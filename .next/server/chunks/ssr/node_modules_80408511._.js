module.exports = {

"[project]/node_modules/webidl-conversions/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var conversions = {};
module.exports = conversions;
function sign(x) {
    return x < 0 ? -1 : 1;
}
function evenRound(x) {
    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
    if (x % 1 === 0.5 && (x & 1) === 0) {
        return Math.floor(x);
    } else {
        return Math.round(x);
    }
}
function createNumberConversion(bitLength, typeOpts) {
    if (!typeOpts.unsigned) {
        --bitLength;
    }
    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
    const upperBound = Math.pow(2, bitLength) - 1;
    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
    return function(V, opts) {
        if (!opts) opts = {};
        let x = +V;
        if (opts.enforceRange) {
            if (!Number.isFinite(x)) {
                throw new TypeError("Argument is not a finite number");
            }
            x = sign(x) * Math.floor(Math.abs(x));
            if (x < lowerBound || x > upperBound) {
                throw new TypeError("Argument is not in byte range");
            }
            return x;
        }
        if (!isNaN(x) && opts.clamp) {
            x = evenRound(x);
            if (x < lowerBound) x = lowerBound;
            if (x > upperBound) x = upperBound;
            return x;
        }
        if (!Number.isFinite(x) || x === 0) {
            return 0;
        }
        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;
        if (!typeOpts.unsigned && x >= moduloBound) {
            return x - moduloVal;
        } else if (typeOpts.unsigned) {
            if (x < 0) {
                x += moduloVal;
            } else if (x === -0) {
                return 0;
            }
        }
        return x;
    };
}
conversions["void"] = function() {
    return undefined;
};
conversions["boolean"] = function(val) {
    return !!val;
};
conversions["byte"] = createNumberConversion(8, {
    unsigned: false
});
conversions["octet"] = createNumberConversion(8, {
    unsigned: true
});
conversions["short"] = createNumberConversion(16, {
    unsigned: false
});
conversions["unsigned short"] = createNumberConversion(16, {
    unsigned: true
});
conversions["long"] = createNumberConversion(32, {
    unsigned: false
});
conversions["unsigned long"] = createNumberConversion(32, {
    unsigned: true
});
conversions["long long"] = createNumberConversion(32, {
    unsigned: false,
    moduloBitLength: 64
});
conversions["unsigned long long"] = createNumberConversion(32, {
    unsigned: true,
    moduloBitLength: 64
});
conversions["double"] = function(V) {
    const x = +V;
    if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
    }
    return x;
};
conversions["unrestricted double"] = function(V) {
    const x = +V;
    if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
    }
    return x;
};
// not quite valid, but good enough for JS
conversions["float"] = conversions["double"];
conversions["unrestricted float"] = conversions["unrestricted double"];
conversions["DOMString"] = function(V, opts) {
    if (!opts) opts = {};
    if (opts.treatNullAsEmptyString && V === null) {
        return "";
    }
    return String(V);
};
conversions["ByteString"] = function(V, opts) {
    const x = String(V);
    let c = undefined;
    for(let i = 0; (c = x.codePointAt(i)) !== undefined; ++i){
        if (c > 255) {
            throw new TypeError("Argument is not a valid bytestring");
        }
    }
    return x;
};
conversions["USVString"] = function(V) {
    const S = String(V);
    const n = S.length;
    const U = [];
    for(let i = 0; i < n; ++i){
        const c = S.charCodeAt(i);
        if (c < 0xD800 || c > 0xDFFF) {
            U.push(String.fromCodePoint(c));
        } else if (0xDC00 <= c && c <= 0xDFFF) {
            U.push(String.fromCodePoint(0xFFFD));
        } else {
            if (i === n - 1) {
                U.push(String.fromCodePoint(0xFFFD));
            } else {
                const d = S.charCodeAt(i + 1);
                if (0xDC00 <= d && d <= 0xDFFF) {
                    const a = c & 0x3FF;
                    const b = d & 0x3FF;
                    U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
                    ++i;
                } else {
                    U.push(String.fromCodePoint(0xFFFD));
                }
            }
        }
    }
    return U.join('');
};
conversions["Date"] = function(V, opts) {
    if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
    }
    if (isNaN(V)) {
        return undefined;
    }
    return V;
};
conversions["RegExp"] = function(V, opts) {
    if (!(V instanceof RegExp)) {
        V = new RegExp(V);
    }
    return V;
};
}}),
"[project]/node_modules/whatwg-url/lib/utils.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
module.exports.mixin = function mixin(target, source) {
    const keys = Object.getOwnPropertyNames(source);
    for(let i = 0; i < keys.length; ++i){
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
    }
};
module.exports.wrapperSymbol = Symbol("wrapper");
module.exports.implSymbol = Symbol("impl");
module.exports.wrapperForImpl = function(impl) {
    return impl[module.exports.wrapperSymbol];
};
module.exports.implForWrapper = function(wrapper) {
    return wrapper[module.exports.implSymbol];
};
}}),
"[project]/node_modules/whatwg-url/lib/url-state-machine.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
const punycode = __turbopack_context__.r("[externals]/punycode [external] (punycode, cjs)");
const tr46 = __turbopack_context__.r("[project]/node_modules/tr46/index.js [app-rsc] (ecmascript)");
const specialSchemes = {
    ftp: 21,
    file: null,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
};
const failure = Symbol("failure");
function countSymbols(str) {
    return punycode.ucs2.decode(str).length;
}
function at(input, idx) {
    const c = input[idx];
    return isNaN(c) ? undefined : String.fromCodePoint(c);
}
function isASCIIDigit(c) {
    return c >= 0x30 && c <= 0x39;
}
function isASCIIAlpha(c) {
    return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A;
}
function isASCIIAlphanumeric(c) {
    return isASCIIAlpha(c) || isASCIIDigit(c);
}
function isASCIIHex(c) {
    return isASCIIDigit(c) || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;
}
function isSingleDot(buffer) {
    return buffer === "." || buffer.toLowerCase() === "%2e";
}
function isDoubleDot(buffer) {
    buffer = buffer.toLowerCase();
    return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
}
function isWindowsDriveLetterCodePoints(cp1, cp2) {
    return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
}
function isWindowsDriveLetterString(string) {
    return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
}
function isNormalizedWindowsDriveLetterString(string) {
    return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
}
function containsForbiddenHostCodePoint(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
}
function containsForbiddenHostCodePointExcludingPercent(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
}
function isSpecialScheme(scheme) {
    return specialSchemes[scheme] !== undefined;
}
function isSpecial(url) {
    return isSpecialScheme(url.scheme);
}
function defaultPort(scheme) {
    return specialSchemes[scheme];
}
function percentEncode(c) {
    let hex = c.toString(16).toUpperCase();
    if (hex.length === 1) {
        hex = "0" + hex;
    }
    return "%" + hex;
}
function utf8PercentEncode(c) {
    const buf = new Buffer(c);
    let str = "";
    for(let i = 0; i < buf.length; ++i){
        str += percentEncode(buf[i]);
    }
    return str;
}
function utf8PercentDecode(str) {
    const input = new Buffer(str);
    const output = [];
    for(let i = 0; i < input.length; ++i){
        if (input[i] !== 37) {
            output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
            output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
            i += 2;
        } else {
            output.push(input[i]);
        }
    }
    return new Buffer(output).toString();
}
function isC0ControlPercentEncode(c) {
    return c <= 0x1F || c > 0x7E;
}
const extraPathPercentEncodeSet = new Set([
    32,
    34,
    35,
    60,
    62,
    63,
    96,
    123,
    125
]);
function isPathPercentEncode(c) {
    return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
}
const extraUserinfoPercentEncodeSet = new Set([
    47,
    58,
    59,
    61,
    64,
    91,
    92,
    93,
    94,
    124
]);
function isUserinfoPercentEncode(c) {
    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
}
function percentEncodeChar(c, encodeSetPredicate) {
    const cStr = String.fromCodePoint(c);
    if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
    }
    return cStr;
}
function parseIPv4Number(input) {
    let R = 10;
    if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R = 16;
    } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R = 8;
    }
    if (input === "") {
        return 0;
    }
    const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
    if (regex.test(input)) {
        return failure;
    }
    return parseInt(input, R);
}
function parseIPv4(input) {
    const parts = input.split(".");
    if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
            parts.pop();
        }
    }
    if (parts.length > 4) {
        return input;
    }
    const numbers = [];
    for (const part of parts){
        if (part === "") {
            return input;
        }
        const n = parseIPv4Number(part);
        if (n === failure) {
            return input;
        }
        numbers.push(n);
    }
    for(let i = 0; i < numbers.length - 1; ++i){
        if (numbers[i] > 255) {
            return failure;
        }
    }
    if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
    }
    let ipv4 = numbers.pop();
    let counter = 0;
    for (const n of numbers){
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
    }
    return ipv4;
}
function serializeIPv4(address) {
    let output = "";
    let n = address;
    for(let i = 1; i <= 4; ++i){
        output = String(n % 256) + output;
        if (i !== 4) {
            output = "." + output;
        }
        n = Math.floor(n / 256);
    }
    return output;
}
function parseIPv6(input) {
    const address = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ];
    let pieceIndex = 0;
    let compress = null;
    let pointer = 0;
    input = punycode.ucs2.decode(input);
    if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
            return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
    }
    while(pointer < input.length){
        if (pieceIndex === 8) {
            return failure;
        }
        if (input[pointer] === 58) {
            if (compress !== null) {
                return failure;
            }
            ++pointer;
            ++pieceIndex;
            compress = pieceIndex;
            continue;
        }
        let value = 0;
        let length = 0;
        while(length < 4 && isASCIIHex(input[pointer])){
            value = value * 0x10 + parseInt(at(input, pointer), 16);
            ++pointer;
            ++length;
        }
        if (input[pointer] === 46) {
            if (length === 0) {
                return failure;
            }
            pointer -= length;
            if (pieceIndex > 6) {
                return failure;
            }
            let numbersSeen = 0;
            while(input[pointer] !== undefined){
                let ipv4Piece = null;
                if (numbersSeen > 0) {
                    if (input[pointer] === 46 && numbersSeen < 4) {
                        ++pointer;
                    } else {
                        return failure;
                    }
                }
                if (!isASCIIDigit(input[pointer])) {
                    return failure;
                }
                while(isASCIIDigit(input[pointer])){
                    const number = parseInt(at(input, pointer));
                    if (ipv4Piece === null) {
                        ipv4Piece = number;
                    } else if (ipv4Piece === 0) {
                        return failure;
                    } else {
                        ipv4Piece = ipv4Piece * 10 + number;
                    }
                    if (ipv4Piece > 255) {
                        return failure;
                    }
                    ++pointer;
                }
                address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;
                ++numbersSeen;
                if (numbersSeen === 2 || numbersSeen === 4) {
                    ++pieceIndex;
                }
            }
            if (numbersSeen !== 4) {
                return failure;
            }
            break;
        } else if (input[pointer] === 58) {
            ++pointer;
            if (input[pointer] === undefined) {
                return failure;
            }
        } else if (input[pointer] !== undefined) {
            return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
    }
    if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while(pieceIndex !== 0 && swaps > 0){
            const temp = address[compress + swaps - 1];
            address[compress + swaps - 1] = address[pieceIndex];
            address[pieceIndex] = temp;
            --pieceIndex;
            --swaps;
        }
    } else if (compress === null && pieceIndex !== 8) {
        return failure;
    }
    return address;
}
function serializeIPv6(address) {
    let output = "";
    const seqResult = findLongestZeroSequence(address);
    const compress = seqResult.idx;
    let ignore0 = false;
    for(let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex){
        if (ignore0 && address[pieceIndex] === 0) {
            continue;
        } else if (ignore0) {
            ignore0 = false;
        }
        if (compress === pieceIndex) {
            const separator = pieceIndex === 0 ? "::" : ":";
            output += separator;
            ignore0 = true;
            continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
            output += ":";
        }
    }
    return output;
}
function parseHost(input, isSpecialArg) {
    if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
            return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
    }
    if (!isSpecialArg) {
        return parseOpaqueHost(input);
    }
    const domain = utf8PercentDecode(input);
    const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
    if (asciiDomain === null) {
        return failure;
    }
    if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
    }
    const ipv4Host = parseIPv4(asciiDomain);
    if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
    }
    return asciiDomain;
}
function parseOpaqueHost(input) {
    if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
    }
    let output = "";
    const decoded = punycode.ucs2.decode(input);
    for(let i = 0; i < decoded.length; ++i){
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
    }
    return output;
}
function findLongestZeroSequence(arr) {
    let maxIdx = null;
    let maxLen = 1; // only find elements > 1
    let currStart = null;
    let currLen = 0;
    for(let i = 0; i < arr.length; ++i){
        if (arr[i] !== 0) {
            if (currLen > maxLen) {
                maxIdx = currStart;
                maxLen = currLen;
            }
            currStart = null;
            currLen = 0;
        } else {
            if (currStart === null) {
                currStart = i;
            }
            ++currLen;
        }
    }
    // if trailing zeros
    if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
    }
    return {
        idx: maxIdx,
        len: maxLen
    };
}
function serializeHost(host) {
    if (typeof host === "number") {
        return serializeIPv4(host);
    }
    // IPv6 serializer
    if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
    }
    return host;
}
function trimControlChars(url) {
    return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
}
function trimTabAndNewline(url) {
    return url.replace(/\u0009|\u000A|\u000D/g, "");
}
function shortenPath(url) {
    const path = url.path;
    if (path.length === 0) {
        return;
    }
    if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
    }
    path.pop();
}
function includesCredentials(url) {
    return url.username !== "" || url.password !== "";
}
function cannotHaveAUsernamePasswordPort(url) {
    return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
}
function isNormalizedWindowsDriveLetter(string) {
    return /^[A-Za-z]:$/.test(string);
}
function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
    this.pointer = 0;
    this.input = input;
    this.base = base || null;
    this.encodingOverride = encodingOverride || "utf-8";
    this.stateOverride = stateOverride;
    this.url = url;
    this.failure = false;
    this.parseError = false;
    if (!this.url) {
        this.url = {
            scheme: "",
            username: "",
            password: "",
            host: null,
            port: null,
            path: [],
            query: null,
            fragment: null,
            cannotBeABaseURL: false
        };
        const res = trimControlChars(this.input);
        if (res !== this.input) {
            this.parseError = true;
        }
        this.input = res;
    }
    const res = trimTabAndNewline(this.input);
    if (res !== this.input) {
        this.parseError = true;
    }
    this.input = res;
    this.state = stateOverride || "scheme start";
    this.buffer = "";
    this.atFlag = false;
    this.arrFlag = false;
    this.passwordTokenSeenFlag = false;
    this.input = punycode.ucs2.decode(this.input);
    for(; this.pointer <= this.input.length; ++this.pointer){
        const c = this.input[this.pointer];
        const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);
        // exec state machine
        const ret = this["parse " + this.state](c, cStr);
        if (!ret) {
            break; // terminate algorithm
        } else if (ret === failure) {
            this.failure = true;
            break;
        }
    }
}
URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
    if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
    } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
    } else {
        this.parseError = true;
        return failure;
    }
    return true;
};
URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
    if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
    } else if (c === 58) {
        if (this.stateOverride) {
            if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
                return false;
            }
            if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
                return false;
            }
            if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
                return false;
            }
            if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
                return false;
            }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
            return false;
        }
        if (this.url.scheme === "file") {
            if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
                this.parseError = true;
            }
            this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
            this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
            this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
            this.state = "path or authority";
            ++this.pointer;
        } else {
            this.url.cannotBeABaseURL = true;
            this.url.path.push("");
            this.state = "cannot-be-a-base-URL path";
        }
    } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
    } else {
        this.parseError = true;
        return failure;
    }
    return true;
};
URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
    if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
    } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
    } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
    } else {
        this.state = "relative";
        --this.pointer;
    }
    return true;
};
URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
    } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
    }
    return true;
};
URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
    if (c === 47) {
        this.state = "authority";
    } else {
        this.state = "path";
        --this.pointer;
    }
    return true;
};
URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
    this.url.scheme = this.base.scheme;
    if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
    } else if (c === 47) {
        this.state = "relative slash";
    } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
    } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
    } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
    } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
    }
    return true;
};
URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
    if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
            this.parseError = true;
        }
        this.state = "special authority ignore slashes";
    } else if (c === 47) {
        this.state = "authority";
    } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
    }
    return true;
};
URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
    } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
    }
    return true;
};
URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
    if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
    } else {
        this.parseError = true;
    }
    return true;
};
URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
    if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
            this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;
        // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars
        const len = countSymbols(this.buffer);
        for(let pointer = 0; pointer < len; ++pointer){
            const codePoint = this.buffer.codePointAt(pointer);
            if (codePoint === 58 && !this.passwordTokenSeenFlag) {
                this.passwordTokenSeenFlag = true;
                continue;
            }
            const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
            if (this.passwordTokenSeenFlag) {
                this.url.password += encodedCodePoints;
            } else {
                this.url.username += encodedCodePoints;
            }
        }
        this.buffer = "";
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
            this.parseError = true;
            return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
    } else {
        this.buffer += cStr;
    }
    return true;
};
URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
    if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
    } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
            this.parseError = true;
            return failure;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
            return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
            return false;
        }
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
            this.parseError = true;
            return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
            this.parseError = true;
            return false;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
            return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
            return false;
        }
    } else {
        if (c === 91) {
            this.arrFlag = true;
        } else if (c === 93) {
            this.arrFlag = false;
        }
        this.buffer += cStr;
    }
    return true;
};
URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
    if (isASCIIDigit(c)) {
        this.buffer += cStr;
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
            const port = parseInt(this.buffer);
            if (port > Math.pow(2, 16) - 1) {
                this.parseError = true;
                return failure;
            }
            this.url.port = port === defaultPort(this.url.scheme) ? null : port;
            this.buffer = "";
        }
        if (this.stateOverride) {
            return false;
        }
        this.state = "path start";
        --this.pointer;
    } else {
        this.parseError = true;
        return failure;
    }
    return true;
};
const fileOtherwiseCodePoints = new Set([
    47,
    92,
    63,
    35
]);
URLStateMachine.prototype["parse file"] = function parseFile(c) {
    this.url.scheme = "file";
    if (c === 47 || c === 92) {
        if (c === 92) {
            this.parseError = true;
        }
        this.state = "file slash";
    } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            this.url.query = this.base.query;
        } else if (c === 63) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            this.url.query = "";
            this.state = "query";
        } else if (c === 35) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            this.url.query = this.base.query;
            this.url.fragment = "";
            this.state = "fragment";
        } else {
            if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
            !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
            !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
                this.url.host = this.base.host;
                this.url.path = this.base.path.slice();
                shortenPath(this.url);
            } else {
                this.parseError = true;
            }
            this.state = "path";
            --this.pointer;
        }
    } else {
        this.state = "path";
        --this.pointer;
    }
    return true;
};
URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
    if (c === 47 || c === 92) {
        if (c === 92) {
            this.parseError = true;
        }
        this.state = "file host";
    } else {
        if (this.base !== null && this.base.scheme === "file") {
            if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
                this.url.path.push(this.base.path[0]);
            } else {
                this.url.host = this.base.host;
            }
        }
        this.state = "path";
        --this.pointer;
    }
    return true;
};
URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
    if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
            this.parseError = true;
            this.state = "path";
        } else if (this.buffer === "") {
            this.url.host = "";
            if (this.stateOverride) {
                return false;
            }
            this.state = "path start";
        } else {
            let host = parseHost(this.buffer, isSpecial(this.url));
            if (host === failure) {
                return failure;
            }
            if (host === "localhost") {
                host = "";
            }
            this.url.host = host;
            if (this.stateOverride) {
                return false;
            }
            this.buffer = "";
            this.state = "path start";
        }
    } else {
        this.buffer += cStr;
    }
    return true;
};
URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
    if (isSpecial(this.url)) {
        if (c === 92) {
            this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
            --this.pointer;
        }
    } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
    } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
    } else if (c !== undefined) {
        this.state = "path";
        if (c !== 47) {
            --this.pointer;
        }
    }
    return true;
};
URLStateMachine.prototype["parse path"] = function parsePath(c) {
    if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
            this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
            shortenPath(this.url);
            if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
                this.url.path.push("");
            }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
            if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
                if (this.url.host !== "" && this.url.host !== null) {
                    this.parseError = true;
                    this.url.host = "";
                }
                this.buffer = this.buffer[0] + ":";
            }
            this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === undefined || c === 63 || c === 35)) {
            while(this.url.path.length > 1 && this.url.path[0] === ""){
                this.parseError = true;
                this.url.path.shift();
            }
        }
        if (c === 63) {
            this.url.query = "";
            this.state = "query";
        }
        if (c === 35) {
            this.url.fragment = "";
            this.state = "fragment";
        }
    } else {
        // TODO: If c is not a URL code point and not "%", parse error.
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
    }
    return true;
};
URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
    if (c === 63) {
        this.url.query = "";
        this.state = "query";
    } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
    } else {
        // TODO: Add: not a URL code point
        if (!isNaN(c) && c !== 37) {
            this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
        }
        if (!isNaN(c)) {
            this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
    }
    return true;
};
URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
    if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
            this.encodingOverride = "utf-8";
        }
        const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead
        for(let i = 0; i < buffer.length; ++i){
            if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 || buffer[i] === 0x3C || buffer[i] === 0x3E) {
                this.url.query += percentEncode(buffer[i]);
            } else {
                this.url.query += String.fromCodePoint(buffer[i]);
            }
        }
        this.buffer = "";
        if (c === 35) {
            this.url.fragment = "";
            this.state = "fragment";
        }
    } else {
        // TODO: If c is not a URL code point and not "%", parse error.
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
        }
        this.buffer += cStr;
    }
    return true;
};
URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
    if (isNaN(c)) {} else if (c === 0x0) {
        this.parseError = true;
    } else {
        // TODO: If c is not a URL code point and not "%", parse error.
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
    }
    return true;
};
function serializeURL(url, excludeFragment) {
    let output = url.scheme + ":";
    if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
            output += url.username;
            if (url.password !== "") {
                output += ":" + url.password;
            }
            output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
            output += ":" + url.port;
        }
    } else if (url.host === null && url.scheme === "file") {
        output += "//";
    }
    if (url.cannotBeABaseURL) {
        output += url.path[0];
    } else {
        for (const string of url.path){
            output += "/" + string;
        }
    }
    if (url.query !== null) {
        output += "?" + url.query;
    }
    if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
    }
    return output;
}
function serializeOrigin(tuple) {
    let result = tuple.scheme + "://";
    result += serializeHost(tuple.host);
    if (tuple.port !== null) {
        result += ":" + tuple.port;
    }
    return result;
}
module.exports.serializeURL = serializeURL;
module.exports.serializeURLOrigin = function(url) {
    // https://url.spec.whatwg.org/#concept-url-origin
    switch(url.scheme){
        case "blob":
            try {
                return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
            } catch (e) {
                // serializing an opaque origin returns "null"
                return "null";
            }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
            return serializeOrigin({
                scheme: url.scheme,
                host: url.host,
                port: url.port
            });
        case "file":
            // spec says "exercise to the reader", chrome says "file://"
            return "file://";
        default:
            // serializing an opaque origin returns "null"
            return "null";
    }
};
module.exports.basicURLParse = function(input, options) {
    if (options === undefined) {
        options = {};
    }
    const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
    if (usm.failure) {
        return "failure";
    }
    return usm.url;
};
module.exports.setTheUsername = function(url, username) {
    url.username = "";
    const decoded = punycode.ucs2.decode(username);
    for(let i = 0; i < decoded.length; ++i){
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
};
module.exports.setThePassword = function(url, password) {
    url.password = "";
    const decoded = punycode.ucs2.decode(password);
    for(let i = 0; i < decoded.length; ++i){
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
};
module.exports.serializeHost = serializeHost;
module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
module.exports.serializeInteger = function(integer) {
    return String(integer);
};
module.exports.parseURL = function(input, options) {
    if (options === undefined) {
        options = {};
    }
    // We don't handle blobs, so this just delegates:
    return module.exports.basicURLParse(input, {
        baseURL: options.baseURL,
        encodingOverride: options.encodingOverride
    });
};
}}),
"[project]/node_modules/whatwg-url/lib/URL-impl.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
const usm = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/url-state-machine.js [app-rsc] (ecmascript)");
exports.implementation = class URLImpl {
    constructor(constructorArgs){
        const url = constructorArgs[0];
        const base = constructorArgs[1];
        let parsedBase = null;
        if (base !== undefined) {
            parsedBase = usm.basicURLParse(base);
            if (parsedBase === "failure") {
                throw new TypeError("Invalid base URL");
            }
        }
        const parsedURL = usm.basicURLParse(url, {
            baseURL: parsedBase
        });
        if (parsedURL === "failure") {
            throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
    // TODO: query stuff
    }
    get href() {
        return usm.serializeURL(this._url);
    }
    set href(v) {
        const parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
            throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
    }
    get origin() {
        return usm.serializeURLOrigin(this._url);
    }
    get protocol() {
        return this._url.scheme + ":";
    }
    set protocol(v) {
        usm.basicURLParse(v + ":", {
            url: this._url,
            stateOverride: "scheme start"
        });
    }
    get username() {
        return this._url.username;
    }
    set username(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
        }
        usm.setTheUsername(this._url, v);
    }
    get password() {
        return this._url.password;
    }
    set password(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
        }
        usm.setThePassword(this._url, v);
    }
    get host() {
        const url = this._url;
        if (url.host === null) {
            return "";
        }
        if (url.port === null) {
            return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
    }
    set host(v) {
        if (this._url.cannotBeABaseURL) {
            return;
        }
        usm.basicURLParse(v, {
            url: this._url,
            stateOverride: "host"
        });
    }
    get hostname() {
        if (this._url.host === null) {
            return "";
        }
        return usm.serializeHost(this._url.host);
    }
    set hostname(v) {
        if (this._url.cannotBeABaseURL) {
            return;
        }
        usm.basicURLParse(v, {
            url: this._url,
            stateOverride: "hostname"
        });
    }
    get port() {
        if (this._url.port === null) {
            return "";
        }
        return usm.serializeInteger(this._url.port);
    }
    set port(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
        }
        if (v === "") {
            this._url.port = null;
        } else {
            usm.basicURLParse(v, {
                url: this._url,
                stateOverride: "port"
            });
        }
    }
    get pathname() {
        if (this._url.cannotBeABaseURL) {
            return this._url.path[0];
        }
        if (this._url.path.length === 0) {
            return "";
        }
        return "/" + this._url.path.join("/");
    }
    set pathname(v) {
        if (this._url.cannotBeABaseURL) {
            return;
        }
        this._url.path = [];
        usm.basicURLParse(v, {
            url: this._url,
            stateOverride: "path start"
        });
    }
    get search() {
        if (this._url.query === null || this._url.query === "") {
            return "";
        }
        return "?" + this._url.query;
    }
    set search(v) {
        // TODO: query stuff
        const url = this._url;
        if (v === "") {
            url.query = null;
            return;
        }
        const input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, {
            url,
            stateOverride: "query"
        });
    }
    get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
            return "";
        }
        return "#" + this._url.fragment;
    }
    set hash(v) {
        if (v === "") {
            this._url.fragment = null;
            return;
        }
        const input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, {
            url: this._url,
            stateOverride: "fragment"
        });
    }
    toJSON() {
        return this.href;
    }
};
}}),
"[project]/node_modules/whatwg-url/lib/URL.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
const conversions = __turbopack_context__.r("[project]/node_modules/webidl-conversions/lib/index.js [app-rsc] (ecmascript)");
const utils = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/utils.js [app-rsc] (ecmascript)");
const Impl = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/URL-impl.js [app-rsc] (ecmascript)");
const impl = utils.implSymbol;
function URL(url) {
    if (!this || this[impl] || !(this instanceof URL)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
    }
    if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
    }
    const args = [];
    for(let i = 0; i < arguments.length && i < 2; ++i){
        args[i] = arguments[i];
    }
    args[0] = conversions["USVString"](args[0]);
    if (args[1] !== undefined) {
        args[1] = conversions["USVString"](args[1]);
    }
    module.exports.setup(this, args);
}
URL.prototype.toJSON = function toJSON() {
    if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
    }
    const args = [];
    for(let i = 0; i < arguments.length && i < 0; ++i){
        args[i] = arguments[i];
    }
    return this[impl].toJSON.apply(this[impl], args);
};
Object.defineProperty(URL.prototype, "href", {
    get () {
        return this[impl].href;
    },
    set (V) {
        V = conversions["USVString"](V);
        this[impl].href = V;
    },
    enumerable: true,
    configurable: true
});
URL.prototype.toString = function() {
    if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
    }
    return this.href;
};
Object.defineProperty(URL.prototype, "origin", {
    get () {
        return this[impl].origin;
    },
    enumerable: true,
    configurable: true
});
Object.defineProperty(URL.prototype, "protocol", {
    get () {
        return this[impl].protocol;
    },
    set (V) {
        V = conversions["USVString"](V);
        this[impl].protocol = V;
    },
    enumerable: true,
    configurable: true
});
Object.defineProperty(URL.prototype, "username", {
    get () {
        return this[impl].username;
    },
    set (V) {
        V = conversions["USVString"](V);
        this[impl].username = V;
    },
    enumerable: true,
    configurable: true
});
Object.defineProperty(URL.prototype, "password", {
    get () {
        return this[impl].password;
    },
    set (V) {
        V = conversions["USVString"](V);
        this[impl].password = V;
    },
    enumerable: true,
    configurable: true
});
Object.defineProperty(URL.prototype, "host", {
    get () {
        return this[impl].host;
    },
    set (V) {
        V = conversions["USVString"](V);
        this[impl].host = V;
    },
    enumerable: true,
    configurable: true
});
Object.defineProperty(URL.prototype, "hostname", {
    get () {
        return this[impl].hostname;
    },
    set (V) {
        V = conversions["USVString"](V);
        this[impl].hostname = V;
    },
    enumerable: true,
    configurable: true
});
Object.defineProperty(URL.prototype, "port", {
    get () {
        return this[impl].port;
    },
    set (V) {
        V = conversions["USVString"](V);
        this[impl].port = V;
    },
    enumerable: true,
    configurable: true
});
Object.defineProperty(URL.prototype, "pathname", {
    get () {
        return this[impl].pathname;
    },
    set (V) {
        V = conversions["USVString"](V);
        this[impl].pathname = V;
    },
    enumerable: true,
    configurable: true
});
Object.defineProperty(URL.prototype, "search", {
    get () {
        return this[impl].search;
    },
    set (V) {
        V = conversions["USVString"](V);
        this[impl].search = V;
    },
    enumerable: true,
    configurable: true
});
Object.defineProperty(URL.prototype, "hash", {
    get () {
        return this[impl].hash;
    },
    set (V) {
        V = conversions["USVString"](V);
        this[impl].hash = V;
    },
    enumerable: true,
    configurable: true
});
module.exports = {
    is (obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
    },
    create (constructorArgs, privateData) {
        let obj = Object.create(URL.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
    },
    setup (obj, constructorArgs, privateData) {
        if (!privateData) privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
    },
    interface: URL,
    expose: {
        Window: {
            URL: URL
        },
        Worker: {
            URL: URL
        }
    }
};
}}),
"[project]/node_modules/whatwg-url/lib/public-api.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
exports.URL = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/URL.js [app-rsc] (ecmascript)").interface;
exports.serializeURL = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/url-state-machine.js [app-rsc] (ecmascript)").serializeURL;
exports.serializeURLOrigin = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/url-state-machine.js [app-rsc] (ecmascript)").serializeURLOrigin;
exports.basicURLParse = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/url-state-machine.js [app-rsc] (ecmascript)").basicURLParse;
exports.setTheUsername = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/url-state-machine.js [app-rsc] (ecmascript)").setTheUsername;
exports.setThePassword = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/url-state-machine.js [app-rsc] (ecmascript)").setThePassword;
exports.serializeHost = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/url-state-machine.js [app-rsc] (ecmascript)").serializeHost;
exports.serializeInteger = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/url-state-machine.js [app-rsc] (ecmascript)").serializeInteger;
exports.parseURL = __turbopack_context__.r("[project]/node_modules/whatwg-url/lib/url-state-machine.js [app-rsc] (ecmascript)").parseURL;
}}),
"[project]/node_modules/node-fetch/lib/index.mjs [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AbortError": (()=>AbortError),
    "FetchError": (()=>FetchError),
    "Headers": (()=>Headers),
    "Request": (()=>Request),
    "Response": (()=>Response),
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/stream [external] (stream, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$http__$5b$external$5d$__$28$http$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/http [external] (http, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$url__$5b$external$5d$__$28$url$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/url [external] (url, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$whatwg$2d$url$2f$lib$2f$public$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/whatwg-url/lib/public-api.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$https__$5b$external$5d$__$28$https$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/https [external] (https, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$zlib__$5b$external$5d$__$28$zlib$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/zlib [external] (zlib, cjs)");
;
;
;
;
;
;
// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js
// fix for "Readable" isn't a named export issue
const Readable = __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"].Readable;
const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');
class Blob {
    constructor(){
        this[TYPE] = '';
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
            const a = blobParts;
            const length = Number(a.length);
            for(let i = 0; i < length; i++){
                const element = a[i];
                let buffer;
                if (element instanceof Buffer) {
                    buffer = element;
                } else if (ArrayBuffer.isView(element)) {
                    buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
                } else if (element instanceof ArrayBuffer) {
                    buffer = Buffer.from(element);
                } else if (element instanceof Blob) {
                    buffer = element[BUFFER];
                } else {
                    buffer = Buffer.from(typeof element === 'string' ? element : String(element));
                }
                size += buffer.length;
                buffers.push(buffer);
            }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== undefined && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
            this[TYPE] = type;
        }
    }
    get size() {
        return this[BUFFER].length;
    }
    get type() {
        return this[TYPE];
    }
    text() {
        return Promise.resolve(this[BUFFER].toString());
    }
    arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
    }
    stream() {
        const readable = new Readable();
        readable._read = function() {};
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
    }
    toString() {
        return '[object Blob]';
    }
    slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === undefined) {
            relativeStart = 0;
        } else if (start < 0) {
            relativeStart = Math.max(size + start, 0);
        } else {
            relativeStart = Math.min(start, size);
        }
        if (end === undefined) {
            relativeEnd = size;
        } else if (end < 0) {
            relativeEnd = Math.max(size + end, 0);
        } else {
            relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new Blob([], {
            type: arguments[2]
        });
        blob[BUFFER] = slicedBuffer;
        return blob;
    }
}
Object.defineProperties(Blob.prototype, {
    size: {
        enumerable: true
    },
    type: {
        enumerable: true
    },
    slice: {
        enumerable: true
    }
});
Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
    value: 'Blob',
    writable: false,
    enumerable: false,
    configurable: true
});
/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */ /**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */ function FetchError(message, type, systemError) {
    Error.call(this, message);
    this.message = message;
    this.type = type;
    // when err.type is `system`, err.code contains system error code
    if (systemError) {
        this.code = this.errno = systemError.code;
    }
    // hide custom error implementation details from end-users
    Error.captureStackTrace(this, this.constructor);
}
FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';
let convert;
try {
    convert = (()=>{
        const e = new Error("Cannot find module 'encoding'");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
    })().convert;
} catch (e) {}
const INTERNALS = Symbol('Body internals');
// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"].PassThrough;
/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */ function Body(body) {
    var _this = this;
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$size = _ref.size;
    let size = _ref$size === undefined ? 0 : _ref$size;
    var _ref$timeout = _ref.timeout;
    let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;
    if (body == null) {
        // body is undefined or null
        body = null;
    } else if (isURLSearchParams(body)) {
        // body is a URLSearchParams
        body = Buffer.from(body.toString());
    } else if (isBlob(body)) ;
    else if (Buffer.isBuffer(body)) ;
    else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
        // body is ArrayBuffer
        body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
        // body is ArrayBufferView
        body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"]) ;
    else {
        // none of the above
        // coerce to string then buffer
        body = Buffer.from(String(body));
    }
    this[INTERNALS] = {
        body,
        disturbed: false,
        error: null
    };
    this.size = size;
    this.timeout = timeout;
    if (body instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"]) {
        body.on('error', function(err) {
            const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
            _this[INTERNALS].error = error;
        });
    }
}
Body.prototype = {
    get body () {
        return this[INTERNALS].body;
    },
    get bodyUsed () {
        return this[INTERNALS].disturbed;
    },
    /**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */ arrayBuffer () {
        return consumeBody.call(this).then(function(buf) {
            return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
    },
    /**
  * Return raw response as Blob
  *
  * @return Promise
  */ blob () {
        let ct = this.headers && this.headers.get('content-type') || '';
        return consumeBody.call(this).then(function(buf) {
            return Object.assign(// Prevent copying
            new Blob([], {
                type: ct.toLowerCase()
            }), {
                [BUFFER]: buf
            });
        });
    },
    /**
  * Decode response as json
  *
  * @return  Promise
  */ json () {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
            try {
                return JSON.parse(buffer.toString());
            } catch (err) {
                return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
            }
        });
    },
    /**
  * Decode response as text
  *
  * @return  Promise
  */ text () {
        return consumeBody.call(this).then(function(buffer) {
            return buffer.toString();
        });
    },
    /**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */ buffer () {
        return consumeBody.call(this);
    },
    /**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */ textConverted () {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
            return convertBody(buffer, _this3.headers);
        });
    }
};
// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
    body: {
        enumerable: true
    },
    bodyUsed: {
        enumerable: true
    },
    arrayBuffer: {
        enumerable: true
    },
    blob: {
        enumerable: true
    },
    json: {
        enumerable: true
    },
    text: {
        enumerable: true
    }
});
Body.mixIn = function(proto) {
    for (const name of Object.getOwnPropertyNames(Body.prototype)){
        // istanbul ignore else: future proof
        if (!(name in proto)) {
            const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
            Object.defineProperty(proto, name, desc);
        }
    }
};
/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */ function consumeBody() {
    var _this4 = this;
    if (this[INTERNALS].disturbed) {
        return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
    }
    this[INTERNALS].disturbed = true;
    if (this[INTERNALS].error) {
        return Body.Promise.reject(this[INTERNALS].error);
    }
    let body = this.body;
    // body is null
    if (body === null) {
        return Body.Promise.resolve(Buffer.alloc(0));
    }
    // body is blob
    if (isBlob(body)) {
        body = body.stream();
    }
    // body is buffer
    if (Buffer.isBuffer(body)) {
        return Body.Promise.resolve(body);
    }
    // istanbul ignore if: should never happen
    if (!(body instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"])) {
        return Body.Promise.resolve(Buffer.alloc(0));
    }
    // body is stream
    // get ready to actually consume the body
    let accum = [];
    let accumBytes = 0;
    let abort = false;
    return new Body.Promise(function(resolve, reject) {
        let resTimeout;
        // allow timeout on slow response body
        if (_this4.timeout) {
            resTimeout = setTimeout(function() {
                abort = true;
                reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
            }, _this4.timeout);
        }
        // handle stream errors
        body.on('error', function(err) {
            if (err.name === 'AbortError') {
                // if the request was aborted, reject with this Error
                abort = true;
                reject(err);
            } else {
                // other errors, such as incorrect content-encoding
                reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
            }
        });
        body.on('data', function(chunk) {
            if (abort || chunk === null) {
                return;
            }
            if (_this4.size && accumBytes + chunk.length > _this4.size) {
                abort = true;
                reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
                return;
            }
            accumBytes += chunk.length;
            accum.push(chunk);
        });
        body.on('end', function() {
            if (abort) {
                return;
            }
            clearTimeout(resTimeout);
            try {
                resolve(Buffer.concat(accum, accumBytes));
            } catch (err) {
                // handle streams that have accumulated too much data (issue #414)
                reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
            }
        });
    });
}
/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */ function convertBody(buffer, headers) {
    if (typeof convert !== 'function') {
        throw new Error('The package `encoding` must be installed to use the textConverted() function');
    }
    const ct = headers.get('content-type');
    let charset = 'utf-8';
    let res, str;
    // header
    if (ct) {
        res = /charset=([^;]*)/i.exec(ct);
    }
    // no charset in content type, peek at response body for at most 1024 bytes
    str = buffer.slice(0, 1024).toString();
    // html5
    if (!res && str) {
        res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
    }
    // html4
    if (!res && str) {
        res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
        if (!res) {
            res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
            if (res) {
                res.pop(); // drop last quote
            }
        }
        if (res) {
            res = /charset=(.*)/i.exec(res.pop());
        }
    }
    // xml
    if (!res && str) {
        res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
    }
    // found charset
    if (res) {
        charset = res.pop();
        // prevent decode issues when sites use incorrect encoding
        // ref: https://hsivonen.fi/encoding-menu/
        if (charset === 'gb2312' || charset === 'gbk') {
            charset = 'gb18030';
        }
    }
    // turn raw buffers into a single utf-8 buffer
    return convert(buffer, 'UTF-8', charset).toString();
}
/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */ function isURLSearchParams(obj) {
    // Duck-typing as a necessary condition.
    if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
        return false;
    }
    // Brand-checking and more duck-typing as optional condition.
    return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}
/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */ function isBlob(obj) {
    return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}
/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */ function clone(instance) {
    let p1, p2;
    let body = instance.body;
    // don't allow cloning a used body
    if (instance.bodyUsed) {
        throw new Error('cannot clone body after it is used');
    }
    // check that body is a stream and not form-data object
    // note: we can't clone the form-data object without having it as a dependency
    if (body instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"] && typeof body.getBoundary !== 'function') {
        // tee instance body
        p1 = new PassThrough();
        p2 = new PassThrough();
        body.pipe(p1);
        body.pipe(p2);
        // set instance body to teed body and return the other teed body
        instance[INTERNALS].body = p1;
        body = p2;
    }
    return body;
}
/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */ function extractContentType(body) {
    if (body === null) {
        // body is null
        return null;
    } else if (typeof body === 'string') {
        // body is string
        return 'text/plain;charset=UTF-8';
    } else if (isURLSearchParams(body)) {
        // body is a URLSearchParams
        return 'application/x-www-form-urlencoded;charset=UTF-8';
    } else if (isBlob(body)) {
        // body is blob
        return body.type || null;
    } else if (Buffer.isBuffer(body)) {
        // body is buffer
        return null;
    } else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
        // body is ArrayBuffer
        return null;
    } else if (ArrayBuffer.isView(body)) {
        // body is ArrayBufferView
        return null;
    } else if (typeof body.getBoundary === 'function') {
        // detect form data input from form-data module
        return `multipart/form-data;boundary=${body.getBoundary()}`;
    } else if (body instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"]) {
        // body is stream
        // can't really do much about this
        return null;
    } else {
        // Body constructor defaults other things to string
        return 'text/plain;charset=UTF-8';
    }
}
/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */ function getTotalBytes(instance) {
    const body = instance.body;
    if (body === null) {
        // body is null
        return 0;
    } else if (isBlob(body)) {
        return body.size;
    } else if (Buffer.isBuffer(body)) {
        // body is buffer
        return body.length;
    } else if (body && typeof body.getLengthSync === 'function') {
        // detect form data input from form-data module
        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
        body.hasKnownLength && body.hasKnownLength()) {
            // 2.x
            return body.getLengthSync();
        }
        return null;
    } else {
        // body is stream
        return null;
    }
}
/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */ function writeToStream(dest, instance) {
    const body = instance.body;
    if (body === null) {
        // body is null
        dest.end();
    } else if (isBlob(body)) {
        body.stream().pipe(dest);
    } else if (Buffer.isBuffer(body)) {
        // body is buffer
        dest.write(body);
        dest.end();
    } else {
        // body is stream
        body.pipe(dest);
    }
}
// expose Promise
Body.Promise = global.Promise;
/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */ const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
function validateName(name) {
    name = `${name}`;
    if (invalidTokenRegex.test(name) || name === '') {
        throw new TypeError(`${name} is not a legal HTTP header name`);
    }
}
function validateValue(value) {
    value = `${value}`;
    if (invalidHeaderCharRegex.test(value)) {
        throw new TypeError(`${value} is not a legal HTTP header value`);
    }
}
/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */ function find(map, name) {
    name = name.toLowerCase();
    for(const key in map){
        if (key.toLowerCase() === name) {
            return key;
        }
    }
    return undefined;
}
const MAP = Symbol('map');
class Headers {
    /**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */ constructor(){
        let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        this[MAP] = Object.create(null);
        if (init instanceof Headers) {
            const rawHeaders = init.raw();
            const headerNames = Object.keys(rawHeaders);
            for (const headerName of headerNames){
                for (const value of rawHeaders[headerName]){
                    this.append(headerName, value);
                }
            }
            return;
        }
        // We don't worry about converting prop to ByteString here as append()
        // will handle it.
        if (init == null) ;
        else if (typeof init === 'object') {
            const method = init[Symbol.iterator];
            if (method != null) {
                if (typeof method !== 'function') {
                    throw new TypeError('Header pairs must be iterable');
                }
                // sequence<sequence<ByteString>>
                // Note: per spec we have to first exhaust the lists then process them
                const pairs = [];
                for (const pair of init){
                    if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
                        throw new TypeError('Each header pair must be iterable');
                    }
                    pairs.push(Array.from(pair));
                }
                for (const pair of pairs){
                    if (pair.length !== 2) {
                        throw new TypeError('Each header pair must be a name/value tuple');
                    }
                    this.append(pair[0], pair[1]);
                }
            } else {
                // record<ByteString, ByteString>
                for (const key of Object.keys(init)){
                    const value = init[key];
                    this.append(key, value);
                }
            }
        } else {
            throw new TypeError('Provided initializer must be an object');
        }
    }
    /**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */ get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === undefined) {
            return null;
        }
        return this[MAP][key].join(', ');
    }
    /**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */ forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        let pairs = getHeaders(this);
        let i = 0;
        while(i < pairs.length){
            var _pairs$i = pairs[i];
            const name = _pairs$i[0], value = _pairs$i[1];
            callback.call(thisArg, value, name, this);
            pairs = getHeaders(this);
            i++;
        }
    }
    /**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */ set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== undefined ? key : name] = [
            value
        ];
    }
    /**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */ append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== undefined) {
            this[MAP][key].push(value);
        } else {
            this[MAP][name] = [
                value
            ];
        }
    }
    /**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */ has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== undefined;
    }
    /**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */ delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== undefined) {
            delete this[MAP][key];
        }
    }
    /**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */ raw() {
        return this[MAP];
    }
    /**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */ keys() {
        return createHeadersIterator(this, 'key');
    }
    /**
  * Get an iterator on values.
  *
  * @return  Iterator
  */ values() {
        return createHeadersIterator(this, 'value');
    }
    /**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */ [Symbol.iterator]() {
        return createHeadersIterator(this, 'key+value');
    }
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];
Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
    value: 'Headers',
    writable: false,
    enumerable: false,
    configurable: true
});
Object.defineProperties(Headers.prototype, {
    get: {
        enumerable: true
    },
    forEach: {
        enumerable: true
    },
    set: {
        enumerable: true
    },
    append: {
        enumerable: true
    },
    has: {
        enumerable: true
    },
    delete: {
        enumerable: true
    },
    keys: {
        enumerable: true
    },
    values: {
        enumerable: true
    },
    entries: {
        enumerable: true
    }
});
function getHeaders(headers) {
    let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';
    const keys = Object.keys(headers[MAP]).sort();
    return keys.map(kind === 'key' ? function(k) {
        return k.toLowerCase();
    } : kind === 'value' ? function(k) {
        return headers[MAP][k].join(', ');
    } : function(k) {
        return [
            k.toLowerCase(),
            headers[MAP][k].join(', ')
        ];
    });
}
const INTERNAL = Symbol('internal');
function createHeadersIterator(target, kind) {
    const iterator = Object.create(HeadersIteratorPrototype);
    iterator[INTERNAL] = {
        target,
        kind,
        index: 0
    };
    return iterator;
}
const HeadersIteratorPrototype = Object.setPrototypeOf({
    next () {
        // istanbul ignore if
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
            throw new TypeError('Value of `this` is not a HeadersIterator');
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index >= len) {
            return {
                value: undefined,
                done: true
            };
        }
        this[INTERNAL].index = index + 1;
        return {
            value: values[index],
            done: false
        };
    }
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
    value: 'HeadersIterator',
    writable: false,
    enumerable: false,
    configurable: true
});
/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */ function exportNodeCompatibleHeaders(headers) {
    const obj = Object.assign({
        __proto__: null
    }, headers[MAP]);
    // http.request() only supports string as Host header. This hack makes
    // specifying custom Host header possible.
    const hostHeaderKey = find(headers[MAP], 'Host');
    if (hostHeaderKey !== undefined) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0];
    }
    return obj;
}
/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */ function createHeadersLenient(obj) {
    const headers = new Headers();
    for (const name of Object.keys(obj)){
        if (invalidTokenRegex.test(name)) {
            continue;
        }
        if (Array.isArray(obj[name])) {
            for (const val of obj[name]){
                if (invalidHeaderCharRegex.test(val)) {
                    continue;
                }
                if (headers[MAP][name] === undefined) {
                    headers[MAP][name] = [
                        val
                    ];
                } else {
                    headers[MAP][name].push(val);
                }
            }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
            headers[MAP][name] = [
                obj[name]
            ];
        }
    }
    return headers;
}
const INTERNALS$1 = Symbol('Response internals');
// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = __TURBOPACK__imported__module__$5b$externals$5d2f$http__$5b$external$5d$__$28$http$2c$__cjs$29$__["default"].STATUS_CODES;
/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */ class Response {
    constructor(){
        let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        Body.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers(opts.headers);
        if (body != null && !headers.has('Content-Type')) {
            const contentType = extractContentType(body);
            if (contentType) {
                headers.append('Content-Type', contentType);
            }
        }
        this[INTERNALS$1] = {
            url: opts.url,
            status,
            statusText: opts.statusText || STATUS_CODES[status],
            headers,
            counter: opts.counter
        };
    }
    get url() {
        return this[INTERNALS$1].url || '';
    }
    get status() {
        return this[INTERNALS$1].status;
    }
    /**
  * Convenience property representing if the request ended normally
  */ get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
    }
    get redirected() {
        return this[INTERNALS$1].counter > 0;
    }
    get statusText() {
        return this[INTERNALS$1].statusText;
    }
    get headers() {
        return this[INTERNALS$1].headers;
    }
    /**
  * Clone this response
  *
  * @return  Response
  */ clone() {
        return new Response(clone(this), {
            url: this.url,
            status: this.status,
            statusText: this.statusText,
            headers: this.headers,
            ok: this.ok,
            redirected: this.redirected
        });
    }
}
Body.mixIn(Response.prototype);
Object.defineProperties(Response.prototype, {
    url: {
        enumerable: true
    },
    status: {
        enumerable: true
    },
    ok: {
        enumerable: true
    },
    redirected: {
        enumerable: true
    },
    statusText: {
        enumerable: true
    },
    headers: {
        enumerable: true
    },
    clone: {
        enumerable: true
    }
});
Object.defineProperty(Response.prototype, Symbol.toStringTag, {
    value: 'Response',
    writable: false,
    enumerable: false,
    configurable: true
});
const INTERNALS$2 = Symbol('Request internals');
const URL = __TURBOPACK__imported__module__$5b$externals$5d2f$url__$5b$external$5d$__$28$url$2c$__cjs$29$__["default"].URL || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$whatwg$2d$url$2f$lib$2f$public$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].URL;
// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = __TURBOPACK__imported__module__$5b$externals$5d2f$url__$5b$external$5d$__$28$url$2c$__cjs$29$__["default"].parse;
const format_url = __TURBOPACK__imported__module__$5b$externals$5d2f$url__$5b$external$5d$__$28$url$2c$__cjs$29$__["default"].format;
/**
 * Wrapper around `new URL` to handle arbitrary URLs
 *
 * @param  {string} urlStr
 * @return {void}
 */ function parseURL(urlStr) {
    /*
 	Check whether the URL is absolute or not
 		Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
 	Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
 */ if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
        urlStr = new URL(urlStr).toString();
    }
    // Fallback to old implementation for arbitrary URLs
    return parse_url(urlStr);
}
const streamDestructionSupported = 'destroy' in __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"].Readable.prototype;
/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */ function isRequest(input) {
    return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}
function isAbortSignal(signal) {
    const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
    return !!(proto && proto.constructor.name === 'AbortSignal');
}
/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */ class Request {
    constructor(input){
        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        let parsedURL;
        // normalize input
        if (!isRequest(input)) {
            if (input && input.href) {
                // in order to support Node.js' Url objects; though WHATWG's URL objects
                // will fall into this branch also (since their `toString()` will return
                // `href` property anyway)
                parsedURL = parseURL(input.href);
            } else {
                // coerce input to a string before attempting to parse
                parsedURL = parseURL(`${input}`);
            }
            input = {};
        } else {
            parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || 'GET';
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
            throw new TypeError('Request with GET/HEAD method cannot have body');
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        Body.call(this, inputBody, {
            timeout: init.timeout || input.timeout || 0,
            size: init.size || input.size || 0
        });
        const headers = new Headers(init.headers || input.headers || {});
        if (inputBody != null && !headers.has('Content-Type')) {
            const contentType = extractContentType(inputBody);
            if (contentType) {
                headers.append('Content-Type', contentType);
            }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ('signal' in init) signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
            throw new TypeError('Expected signal to be an instanceof AbortSignal');
        }
        this[INTERNALS$2] = {
            method,
            redirect: init.redirect || input.redirect || 'follow',
            headers,
            parsedURL,
            signal
        };
        // node-fetch-only options
        this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
        this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
    }
    get method() {
        return this[INTERNALS$2].method;
    }
    get url() {
        return format_url(this[INTERNALS$2].parsedURL);
    }
    get headers() {
        return this[INTERNALS$2].headers;
    }
    get redirect() {
        return this[INTERNALS$2].redirect;
    }
    get signal() {
        return this[INTERNALS$2].signal;
    }
    /**
  * Clone this request
  *
  * @return  Request
  */ clone() {
        return new Request(this);
    }
}
Body.mixIn(Request.prototype);
Object.defineProperty(Request.prototype, Symbol.toStringTag, {
    value: 'Request',
    writable: false,
    enumerable: false,
    configurable: true
});
Object.defineProperties(Request.prototype, {
    method: {
        enumerable: true
    },
    url: {
        enumerable: true
    },
    headers: {
        enumerable: true
    },
    redirect: {
        enumerable: true
    },
    clone: {
        enumerable: true
    },
    signal: {
        enumerable: true
    }
});
/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */ function getNodeRequestOptions(request) {
    const parsedURL = request[INTERNALS$2].parsedURL;
    const headers = new Headers(request[INTERNALS$2].headers);
    // fetch step 1.3
    if (!headers.has('Accept')) {
        headers.set('Accept', '*/*');
    }
    // Basic fetch
    if (!parsedURL.protocol || !parsedURL.hostname) {
        throw new TypeError('Only absolute URLs are supported');
    }
    if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError('Only HTTP(S) protocols are supported');
    }
    if (request.signal && request.body instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"].Readable && !streamDestructionSupported) {
        throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
    }
    // HTTP-network-or-cache fetch steps 2.4-2.7
    let contentLengthValue = null;
    if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
        contentLengthValue = '0';
    }
    if (request.body != null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === 'number') {
            contentLengthValue = String(totalBytes);
        }
    }
    if (contentLengthValue) {
        headers.set('Content-Length', contentLengthValue);
    }
    // HTTP-network-or-cache fetch step 2.11
    if (!headers.has('User-Agent')) {
        headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
    }
    // HTTP-network-or-cache fetch step 2.15
    if (request.compress && !headers.has('Accept-Encoding')) {
        headers.set('Accept-Encoding', 'gzip,deflate');
    }
    let agent = request.agent;
    if (typeof agent === 'function') {
        agent = agent(parsedURL);
    }
    // HTTP-network fetch step 4.2
    // chunked encoding is handled by Node.js
    return Object.assign({}, parsedURL, {
        method: request.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent
    });
}
/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */ /**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */ function AbortError(message) {
    Error.call(this, message);
    this.type = 'aborted';
    this.message = message;
    // hide custom error implementation details from end-users
    Error.captureStackTrace(this, this.constructor);
}
AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';
const URL$1 = __TURBOPACK__imported__module__$5b$externals$5d2f$url__$5b$external$5d$__$28$url$2c$__cjs$29$__["default"].URL || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$whatwg$2d$url$2f$lib$2f$public$2d$api$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].URL;
// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"].PassThrough;
const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
    const orig = new URL$1(original).hostname;
    const dest = new URL$1(destination).hostname;
    return orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);
};
/**
 * isSameProtocol reports whether the two provided URLs use the same protocol.
 *
 * Both domains must already be in canonical form.
 * @param {string|URL} original
 * @param {string|URL} destination
 */ const isSameProtocol = function isSameProtocol(destination, original) {
    const orig = new URL$1(original).protocol;
    const dest = new URL$1(destination).protocol;
    return orig === dest;
};
/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */ function fetch(url, opts) {
    // allow custom promise
    if (!fetch.Promise) {
        throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
    }
    Body.Promise = fetch.Promise;
    // wrap http.request into fetch
    return new fetch.Promise(function(resolve, reject) {
        // build request object
        const request = new Request(url, opts);
        const options = getNodeRequestOptions(request);
        const send = (options.protocol === 'https:' ? __TURBOPACK__imported__module__$5b$externals$5d2f$https__$5b$external$5d$__$28$https$2c$__cjs$29$__["default"] : __TURBOPACK__imported__module__$5b$externals$5d2f$http__$5b$external$5d$__$28$http$2c$__cjs$29$__["default"]).request;
        const signal = request.signal;
        let response = null;
        const abort = function abort() {
            let error = new AbortError('The user aborted a request.');
            reject(error);
            if (request.body && request.body instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["default"].Readable) {
                destroyStream(request.body, error);
            }
            if (!response || !response.body) return;
            response.body.emit('error', error);
        };
        if (signal && signal.aborted) {
            abort();
            return;
        }
        const abortAndFinalize = function abortAndFinalize() {
            abort();
            finalize();
        };
        // send request
        const req = send(options);
        let reqTimeout;
        if (signal) {
            signal.addEventListener('abort', abortAndFinalize);
        }
        function finalize() {
            req.abort();
            if (signal) signal.removeEventListener('abort', abortAndFinalize);
            clearTimeout(reqTimeout);
        }
        if (request.timeout) {
            req.once('socket', function(socket) {
                reqTimeout = setTimeout(function() {
                    reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
                    finalize();
                }, request.timeout);
            });
        }
        req.on('error', function(err) {
            reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
            if (response && response.body) {
                destroyStream(response.body, err);
            }
            finalize();
        });
        fixResponseChunkedTransferBadEnding(req, function(err) {
            if (signal && signal.aborted) {
                return;
            }
            if (response && response.body) {
                destroyStream(response.body, err);
            }
        });
        /* c8 ignore next 18 */ if (parseInt(process.version.substring(1)) < 14) {
            // Before Node.js 14, pipeline() does not fully support async iterators and does not always
            // properly handle when the socket close/end events are out of order.
            req.on('socket', function(s) {
                s.addListener('close', function(hadError) {
                    // if a data listener is still present we didn't end cleanly
                    const hasDataListener = s.listenerCount('data') > 0;
                    // if end happened before close but the socket didn't emit an error, do it now
                    if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
                        const err = new Error('Premature close');
                        err.code = 'ERR_STREAM_PREMATURE_CLOSE';
                        response.body.emit('error', err);
                    }
                });
            });
        }
        req.on('response', function(res) {
            clearTimeout(reqTimeout);
            const headers = createHeadersLenient(res.headers);
            // HTTP fetch step 5
            if (fetch.isRedirect(res.statusCode)) {
                // HTTP fetch step 5.2
                const location = headers.get('Location');
                // HTTP fetch step 5.3
                let locationURL = null;
                try {
                    locationURL = location === null ? null : new URL$1(location, request.url).toString();
                } catch (err) {
                    // error here can only be invalid URL in Location: header
                    // do not throw when options.redirect == manual
                    // let the user extract the errorneous redirect URL
                    if (request.redirect !== 'manual') {
                        reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));
                        finalize();
                        return;
                    }
                }
                // HTTP fetch step 5.5
                switch(request.redirect){
                    case 'error':
                        reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
                        finalize();
                        return;
                    case 'manual':
                        // node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
                        if (locationURL !== null) {
                            // handle corrupted header
                            try {
                                headers.set('Location', locationURL);
                            } catch (err) {
                                // istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
                                reject(err);
                            }
                        }
                        break;
                    case 'follow':
                        // HTTP-redirect fetch step 2
                        if (locationURL === null) {
                            break;
                        }
                        // HTTP-redirect fetch step 5
                        if (request.counter >= request.follow) {
                            reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
                            finalize();
                            return;
                        }
                        // HTTP-redirect fetch step 6 (counter increment)
                        // Create a new Request object.
                        const requestOpts = {
                            headers: new Headers(request.headers),
                            follow: request.follow,
                            counter: request.counter + 1,
                            agent: request.agent,
                            compress: request.compress,
                            method: request.method,
                            body: request.body,
                            signal: request.signal,
                            timeout: request.timeout,
                            size: request.size
                        };
                        if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
                            for (const name of [
                                'authorization',
                                'www-authenticate',
                                'cookie',
                                'cookie2'
                            ]){
                                requestOpts.headers.delete(name);
                            }
                        }
                        // HTTP-redirect fetch step 9
                        if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                            reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
                            finalize();
                            return;
                        }
                        // HTTP-redirect fetch step 11
                        if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
                            requestOpts.method = 'GET';
                            requestOpts.body = undefined;
                            requestOpts.headers.delete('content-length');
                        }
                        // HTTP-redirect fetch step 15
                        resolve(fetch(new Request(locationURL, requestOpts)));
                        finalize();
                        return;
                }
            }
            // prepare response
            res.once('end', function() {
                if (signal) signal.removeEventListener('abort', abortAndFinalize);
            });
            let body = res.pipe(new PassThrough$1());
            const response_options = {
                url: request.url,
                status: res.statusCode,
                statusText: res.statusMessage,
                headers: headers,
                size: request.size,
                timeout: request.timeout,
                counter: request.counter
            };
            // HTTP-network fetch step 12.1.1.3
            const codings = headers.get('Content-Encoding');
            // HTTP-network fetch step 12.1.1.4: handle content codings
            // in following scenarios we ignore compression support
            // 1. compression support is disabled
            // 2. HEAD request
            // 3. no Content-Encoding header
            // 4. no content response (204)
            // 5. content not modified response (304)
            if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
                response = new Response(body, response_options);
                resolve(response);
                return;
            }
            // For Node v6+
            // Be less strict when decoding compressed responses, since sometimes
            // servers send slightly invalid responses that are still accepted
            // by common browsers.
            // Always using Z_SYNC_FLUSH is what cURL does.
            const zlibOptions = {
                flush: __TURBOPACK__imported__module__$5b$externals$5d2f$zlib__$5b$external$5d$__$28$zlib$2c$__cjs$29$__["default"].Z_SYNC_FLUSH,
                finishFlush: __TURBOPACK__imported__module__$5b$externals$5d2f$zlib__$5b$external$5d$__$28$zlib$2c$__cjs$29$__["default"].Z_SYNC_FLUSH
            };
            // for gzip
            if (codings == 'gzip' || codings == 'x-gzip') {
                body = body.pipe(__TURBOPACK__imported__module__$5b$externals$5d2f$zlib__$5b$external$5d$__$28$zlib$2c$__cjs$29$__["default"].createGunzip(zlibOptions));
                response = new Response(body, response_options);
                resolve(response);
                return;
            }
            // for deflate
            if (codings == 'deflate' || codings == 'x-deflate') {
                // handle the infamous raw deflate response from old servers
                // a hack for old IIS and Apache servers
                const raw = res.pipe(new PassThrough$1());
                raw.once('data', function(chunk) {
                    // see http://stackoverflow.com/questions/37519828
                    if ((chunk[0] & 0x0F) === 0x08) {
                        body = body.pipe(__TURBOPACK__imported__module__$5b$externals$5d2f$zlib__$5b$external$5d$__$28$zlib$2c$__cjs$29$__["default"].createInflate());
                    } else {
                        body = body.pipe(__TURBOPACK__imported__module__$5b$externals$5d2f$zlib__$5b$external$5d$__$28$zlib$2c$__cjs$29$__["default"].createInflateRaw());
                    }
                    response = new Response(body, response_options);
                    resolve(response);
                });
                raw.on('end', function() {
                    // some old IIS servers return zero-length OK deflate responses, so 'data' is never emitted.
                    if (!response) {
                        response = new Response(body, response_options);
                        resolve(response);
                    }
                });
                return;
            }
            // for br
            if (codings == 'br' && typeof __TURBOPACK__imported__module__$5b$externals$5d2f$zlib__$5b$external$5d$__$28$zlib$2c$__cjs$29$__["default"].createBrotliDecompress === 'function') {
                body = body.pipe(__TURBOPACK__imported__module__$5b$externals$5d2f$zlib__$5b$external$5d$__$28$zlib$2c$__cjs$29$__["default"].createBrotliDecompress());
                response = new Response(body, response_options);
                resolve(response);
                return;
            }
            // otherwise, use response as-is
            response = new Response(body, response_options);
            resolve(response);
        });
        writeToStream(req, request);
    });
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
    let socket;
    request.on('socket', function(s) {
        socket = s;
    });
    request.on('response', function(response) {
        const headers = response.headers;
        if (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {
            response.once('close', function(hadError) {
                // tests for socket presence, as in some situations the
                // the 'socket' event is not triggered for the request
                // (happens in deno), avoids `TypeError`
                // if a data listener is still present we didn't end cleanly
                const hasDataListener = socket && socket.listenerCount('data') > 0;
                if (hasDataListener && !hadError) {
                    const err = new Error('Premature close');
                    err.code = 'ERR_STREAM_PREMATURE_CLOSE';
                    errorCallback(err);
                }
            });
        }
    });
}
function destroyStream(stream, err) {
    if (stream.destroy) {
        stream.destroy(err);
    } else {
        // node < 8
        stream.emit('error', err);
        stream.end();
    }
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */ fetch.isRedirect = function(code) {
    return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};
// expose Promise
fetch.Promise = global.Promise;
const __TURBOPACK__default__export__ = fetch;
;
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/errors/invalidApplicationIdError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidApplicationIdError = void 0;
/**
 * InvalidMissingApplicationIdError` class for throwing an error when the
 * application id is not a valid string. You can get the application ID from
 * your developer dashboard. The ID will be a UUID that was generated when you
 * created the application.
 *
 * @extends {Error}
 */ class InvalidApplicationIdError extends Error {
    constructor(){
        super('Invalid Application Id');
    }
}
exports.InvalidApplicationIdError = InvalidApplicationIdError; //# sourceMappingURL=invalidApplicationIdError.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/errors/invalidPrivateKeyError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidPrivateKeyError = void 0;
/**
 * `InvalidPrivateKeyError` class for throwing an error when the private key
 * is invalid. The private key must either be the string of the key or a buffer
 * from the key file. When you created the application, the private key would
 * have been downloaded then. If you lost the key, you will need to regenrate
 * the key.
 *
 * @extends {Error}
 */ class InvalidPrivateKeyError extends Error {
    constructor(){
        super('Private key must be a string or buffer');
    }
}
exports.InvalidPrivateKeyError = InvalidPrivateKeyError; //# sourceMappingURL=invalidPrivateKeyError.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/errors/missingApplicationIdError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MissingApplicationIdError = void 0;
/**
 * `MissingApplicationIdError` class for throwing an error when the
 * application id is missing. You can get the application ID from your developer
 * dashboard. The ID will be a UUID that was generated when you created the
 * application.
 *
 * @extends {Error}
 */ class MissingApplicationIdError extends Error {
    constructor(){
        super('Missing application id');
    }
}
exports.MissingApplicationIdError = MissingApplicationIdError; //# sourceMappingURL=missingApplicationIdError.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/errors/missingPrivateKeyError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MissingPrivateKeyError = void 0;
/**
 * `MissingPrivateKeyError` class for throwing an error when the private key
 * is missing. The private key must either be the string of the key or a buffer
 * from the key file. When you created the application, the private key would
 * have been downloaded then. If you lost the key, you will need to regenrate
 * the key.
 *
 * @extends {Error}
 */ class MissingPrivateKeyError extends Error {
    constructor(){
        super('Missing private key');
    }
}
exports.MissingPrivateKeyError = MissingPrivateKeyError; //# sourceMappingURL=missingPrivateKeyError.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/errors/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/errors/invalidApplicationIdError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/errors/invalidPrivateKeyError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/errors/missingApplicationIdError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/errors/missingPrivateKeyError.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/tokenGenerate.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.tokenGenerate = exports.validateOptions = void 0;
const jsonwebtoken_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/jsonwebtoken/index.js [app-rsc] (ecmascript)"));
const uuid_1 = __turbopack_context__.r("[project]/node_modules/uuid/dist/esm-node/index.js [app-rsc] (ecmascript)");
const errors_1 = __turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/errors/index.js [app-rsc] (ecmascript)");
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-rsc] (ecmascript)"));
const { sign } = jsonwebtoken_1.default;
const log = (0, debug_1.default)('vonage:jwt:tokenGenerate');
/**
 * Validates the generator options and constructs the claims object.
 *
 * @param {GeneratorOptions} [opts] - The generator options.
 * @return {Claims} - The claims object.
 * @private
 */ const validateOptions = (opts)=>{
    const now = parseInt((Date.now() / 1000).toString(), 10);
    const ttl = opts?.ttl || 900;
    if (opts?.ttl) {
        delete opts.ttl;
    }
    const claims = {
        ...opts,
        jti: opts?.jti || (0, uuid_1.v4)(),
        iat: opts?.issued_at || now,
        exp: opts?.exp && opts?.exp > now ? opts.exp : now + ttl
    };
    if (opts?.subject) {
        claims.sub = opts.subject;
    }
    if (opts?.acl) {
        claims.acl = opts.acl;
    }
    return claims;
};
exports.validateOptions = validateOptions;
/**
 * Generates a JWT token.
 *
 * @param {string} applicationId - The application id.
 * @param {string | Buffer} privateKey - The private key as a string or buffer.
 * @param {GeneratorOptions} [opts] - Optional generator options.
 * @return {string} - Returns the signed JWT token.
 * @throws {MissingApplicationIdError} Throws an error if applicationId is missing.
 * @throws {MissingPrivateKeyError} Throws an error if privateKey is missing.
 * @throws {InvalidApplicationIdError} Throws an error if applicationId is not a string.
 * @throws {InvalidPrivateKeyError} Throws an error if privateKey is not a string or buffer.
 * @see {@link https://developer.vonage.com/en/getting-started/concepts/authentication#json-web-tokens}
 *
 * @example
 * Generate a JWT token with default claims.
 *
 * ```js
 * const privateKey = fs.readFileSync(__dirname + '/private.key');
 * const token = tokenGenerate(applicationId, privateKey);
 * ```
 *
 * @example
 * Generate a JWT token with custom claims.
 *
 * ```js
 * const privateKey = fs.readFileSync(__dirname + '/private.key');
 * const token = tokenGenerate(applicationId, privateKey, {
 *   subject: 'my-subject',
 *   acl: {
 *    paths: {
 *      '/*\/users\/**': {},
 *      '/*\/conversations\/**': {},
 *      '/*\/sessions\/**': {},
 *    },
 *   },
 * });
 * ```
 */ const tokenGenerate = (applicationId, privateKey, opts)=>{
    log(`Application id: ${applicationId}`);
    log(`Private key: ${privateKey}`);
    if (!applicationId) {
        throw new errors_1.MissingApplicationIdError();
    }
    if (!privateKey) {
        throw new errors_1.MissingPrivateKeyError();
    }
    if (typeof applicationId !== 'string') {
        throw new errors_1.InvalidApplicationIdError();
    }
    if (typeof privateKey !== 'string' && !(privateKey instanceof Buffer)) {
        throw new errors_1.InvalidPrivateKeyError();
    }
    const claims = (0, exports.validateOptions)(opts);
    log('Claims', claims);
    claims.application_id = applicationId;
    return sign(claims, privateKey, {
        algorithm: 'RS256',
        header: {
            typ: 'JWT',
            alg: 'RS256'
        }
    });
};
exports.tokenGenerate = tokenGenerate; //# sourceMappingURL=tokenGenerate.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/verifySignature.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.verifySignature = void 0;
const jsonwebtoken_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/jsonwebtoken/index.js [app-rsc] (ecmascript)"));
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-rsc] (ecmascript)"));
const errors_1 = __turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/errors/index.js [app-rsc] (ecmascript)");
const { verify } = jsonwebtoken_1.default;
const log = (0, debug_1.default)('vonage:jwt:verifySignature');
/**
 * Verifies a JWT token
 *
 * @function
 * @param {string} jwt - The JSON Web Token to verify.
 * @param {string | Buffer} privateKey - The private key used to verify the JWT
 *  signature.
 * @return {boolean} Returns true if the JWT signature is verified successfully,
 *  otherwise returns false.
 * @throws {MissingPrivateKeyError} Throws an error if the private key is
 *  missing.
 * @throws {InvalidPrivateKeyError} Throws an error if the private key is not
 *  a string or buffer.
 *
 * @example
 * Validate a JWT token
 *
 * ```js
 * const privateKey = fs.readFileSync('./private.key');
 * if (verifySignature(token, privateKey)) {
 *   console.log('JWT signature verified.');
 * } else {
 *   console.log('JWT signature verification failed.');
 * }
 * ```
 */ const verifySignature = (jwt, privateKey)=>{
    if (!privateKey) {
        throw new errors_1.MissingPrivateKeyError();
    }
    if (typeof privateKey !== 'string' && !(privateKey instanceof Buffer)) {
        throw new errors_1.InvalidPrivateKeyError();
    }
    try {
        verify(jwt, privateKey, {
            algorithms: [
                'RS256',
                'HS256'
            ]
        });
        return true;
    } catch (error) {
        log('Error when verifying token', error);
    }
    return false;
};
exports.verifySignature = verifySignature; //# sourceMappingURL=verifySignature.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/types/claims.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=claims.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/types/generatorOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=generatorOptions.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/types/acl.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=acl.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/types/claims.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/types/generatorOptions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/types/acl.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/jwt.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JWT = void 0;
const tokenGenerate_1 = __turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/tokenGenerate.js [app-rsc] (ecmascript)");
const verifySignature_1 = __turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/verifySignature.js [app-rsc] (ecmascript)");
/**
 * Class implementing the JWTInterface for JWT operations.
 *
 * @ignore
 * @deprecated Using the class is no longer needed
 */ class JWT {
    /**
     * Generates a JWT token.
     *
     * @param {string} applicationId - The application ID.
     * @param {string | Buffer} privateKey - The private key for signing the JWT.
     * @param {GeneratorOptions} [opts] - Optional parameters for token generation.
     * @return {string} - The generated JWT token.
     */ tokenGenerate(applicationId, privateKey, opts) {
        return (0, tokenGenerate_1.tokenGenerate)(applicationId, privateKey, opts);
    }
    /**
     * Verifies the signature of a JWT token.
     *
     * @param {string} jwt - The JWT token to verify.
     * @param {string | Buffer} privateKey - The private key used for verification.
     * @return {boolean} - True if the signature is valid, false otherwise.
     */ verifySignature(jwt, privateKey) {
        return (0, verifySignature_1.verifySignature)(jwt, privateKey);
    }
    /**
     * Validates the options provided for JWT generation.
     *
     * @param {GeneratorOptions} [opts] - The options to validate.
     * @return {Claims} - The validated claims.
     */ validateOptions(opts) {
        return (0, tokenGenerate_1.validateOptions)(opts);
    }
}
exports.JWT = JWT; //# sourceMappingURL=jwt.js.map
}}),
"[project]/node_modules/@vonage/jwt/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/errors/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/tokenGenerate.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/verifySignature.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/jwt.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/safe-buffer/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = __turbopack_context__.r("[externals]/buffer [external] (buffer, cjs)");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src){
        dst[key] = src[key];
    }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
} else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number');
    }
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') {
            buf.fill(fill, encoding);
        } else {
            buf.fill(fill);
        }
    } else {
        buf.fill(0);
    }
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
    }
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
    }
    return buffer.SlowBuffer(size);
};
}}),
"[project]/node_modules/jws/lib/data-stream.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*global module, process*/ var Buffer = __turbopack_context__.r("[project]/node_modules/safe-buffer/index.js [app-rsc] (ecmascript)").Buffer;
var Stream = __turbopack_context__.r("[externals]/stream [external] (stream, cjs)");
var util = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
function DataStream(data) {
    this.buffer = null;
    this.writable = true;
    this.readable = true;
    // No input
    if (!data) {
        this.buffer = Buffer.alloc(0);
        return this;
    }
    // Stream
    if (typeof data.pipe === 'function') {
        this.buffer = Buffer.alloc(0);
        data.pipe(this);
        return this;
    }
    // Buffer or String
    // or Object (assumedly a passworded key)
    if (data.length || typeof data === 'object') {
        this.buffer = data;
        this.writable = false;
        process.nextTick((function() {
            this.emit('end', data);
            this.readable = false;
            this.emit('close');
        }).bind(this));
        return this;
    }
    throw new TypeError('Unexpected data type (' + typeof data + ')');
}
util.inherits(DataStream, Stream);
DataStream.prototype.write = function write(data) {
    this.buffer = Buffer.concat([
        this.buffer,
        Buffer.from(data)
    ]);
    this.emit('data', data);
};
DataStream.prototype.end = function end(data) {
    if (data) this.write(data);
    this.emit('end', data);
    this.emit('close');
    this.writable = false;
    this.readable = false;
};
module.exports = DataStream;
}}),
"[project]/node_modules/jws/lib/tostring.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*global module*/ var Buffer = __turbopack_context__.r("[externals]/buffer [external] (buffer, cjs)").Buffer;
module.exports = function toString(obj) {
    if (typeof obj === 'string') return obj;
    if (typeof obj === 'number' || Buffer.isBuffer(obj)) return obj.toString();
    return JSON.stringify(obj);
};
}}),
"[project]/node_modules/jws/lib/sign-stream.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*global module*/ var Buffer = __turbopack_context__.r("[project]/node_modules/safe-buffer/index.js [app-rsc] (ecmascript)").Buffer;
var DataStream = __turbopack_context__.r("[project]/node_modules/jws/lib/data-stream.js [app-rsc] (ecmascript)");
var jwa = __turbopack_context__.r("[project]/node_modules/jwa/index.js [app-rsc] (ecmascript)");
var Stream = __turbopack_context__.r("[externals]/stream [external] (stream, cjs)");
var toString = __turbopack_context__.r("[project]/node_modules/jws/lib/tostring.js [app-rsc] (ecmascript)");
var util = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
function base64url(string, encoding) {
    return Buffer.from(string, encoding).toString('base64').replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
}
function jwsSecuredInput(header, payload, encoding) {
    encoding = encoding || 'utf8';
    var encodedHeader = base64url(toString(header), 'binary');
    var encodedPayload = base64url(toString(payload), encoding);
    return util.format('%s.%s', encodedHeader, encodedPayload);
}
function jwsSign(opts) {
    var header = opts.header;
    var payload = opts.payload;
    var secretOrKey = opts.secret || opts.privateKey;
    var encoding = opts.encoding;
    var algo = jwa(header.alg);
    var securedInput = jwsSecuredInput(header, payload, encoding);
    var signature = algo.sign(securedInput, secretOrKey);
    return util.format('%s.%s', securedInput, signature);
}
function SignStream(opts) {
    var secret = opts.secret || opts.privateKey || opts.key;
    var secretStream = new DataStream(secret);
    this.readable = true;
    this.header = opts.header;
    this.encoding = opts.encoding;
    this.secret = this.privateKey = this.key = secretStream;
    this.payload = new DataStream(opts.payload);
    this.secret.once('close', (function() {
        if (!this.payload.writable && this.readable) this.sign();
    }).bind(this));
    this.payload.once('close', (function() {
        if (!this.secret.writable && this.readable) this.sign();
    }).bind(this));
}
util.inherits(SignStream, Stream);
SignStream.prototype.sign = function sign() {
    try {
        var signature = jwsSign({
            header: this.header,
            payload: this.payload.buffer,
            secret: this.secret.buffer,
            encoding: this.encoding
        });
        this.emit('done', signature);
        this.emit('data', signature);
        this.emit('end');
        this.readable = false;
        return signature;
    } catch (e) {
        this.readable = false;
        this.emit('error', e);
        this.emit('close');
    }
};
SignStream.sign = jwsSign;
module.exports = SignStream;
}}),
"[project]/node_modules/jws/lib/verify-stream.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*global module*/ var Buffer = __turbopack_context__.r("[project]/node_modules/safe-buffer/index.js [app-rsc] (ecmascript)").Buffer;
var DataStream = __turbopack_context__.r("[project]/node_modules/jws/lib/data-stream.js [app-rsc] (ecmascript)");
var jwa = __turbopack_context__.r("[project]/node_modules/jwa/index.js [app-rsc] (ecmascript)");
var Stream = __turbopack_context__.r("[externals]/stream [external] (stream, cjs)");
var toString = __turbopack_context__.r("[project]/node_modules/jws/lib/tostring.js [app-rsc] (ecmascript)");
var util = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
function isObject(thing) {
    return Object.prototype.toString.call(thing) === '[object Object]';
}
function safeJsonParse(thing) {
    if (isObject(thing)) return thing;
    try {
        return JSON.parse(thing);
    } catch (e) {
        return undefined;
    }
}
function headerFromJWS(jwsSig) {
    var encodedHeader = jwsSig.split('.', 1)[0];
    return safeJsonParse(Buffer.from(encodedHeader, 'base64').toString('binary'));
}
function securedInputFromJWS(jwsSig) {
    return jwsSig.split('.', 2).join('.');
}
function signatureFromJWS(jwsSig) {
    return jwsSig.split('.')[2];
}
function payloadFromJWS(jwsSig, encoding) {
    encoding = encoding || 'utf8';
    var payload = jwsSig.split('.')[1];
    return Buffer.from(payload, 'base64').toString(encoding);
}
function isValidJws(string) {
    return JWS_REGEX.test(string) && !!headerFromJWS(string);
}
function jwsVerify(jwsSig, algorithm, secretOrKey) {
    if (!algorithm) {
        var err = new Error("Missing algorithm parameter for jws.verify");
        err.code = "MISSING_ALGORITHM";
        throw err;
    }
    jwsSig = toString(jwsSig);
    var signature = signatureFromJWS(jwsSig);
    var securedInput = securedInputFromJWS(jwsSig);
    var algo = jwa(algorithm);
    return algo.verify(securedInput, signature, secretOrKey);
}
function jwsDecode(jwsSig, opts) {
    opts = opts || {};
    jwsSig = toString(jwsSig);
    if (!isValidJws(jwsSig)) return null;
    var header = headerFromJWS(jwsSig);
    if (!header) return null;
    var payload = payloadFromJWS(jwsSig);
    if (header.typ === 'JWT' || opts.json) payload = JSON.parse(payload, opts.encoding);
    return {
        header: header,
        payload: payload,
        signature: signatureFromJWS(jwsSig)
    };
}
function VerifyStream(opts) {
    opts = opts || {};
    var secretOrKey = opts.secret || opts.publicKey || opts.key;
    var secretStream = new DataStream(secretOrKey);
    this.readable = true;
    this.algorithm = opts.algorithm;
    this.encoding = opts.encoding;
    this.secret = this.publicKey = this.key = secretStream;
    this.signature = new DataStream(opts.signature);
    this.secret.once('close', (function() {
        if (!this.signature.writable && this.readable) this.verify();
    }).bind(this));
    this.signature.once('close', (function() {
        if (!this.secret.writable && this.readable) this.verify();
    }).bind(this));
}
util.inherits(VerifyStream, Stream);
VerifyStream.prototype.verify = function verify() {
    try {
        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit('done', valid, obj);
        this.emit('data', valid);
        this.emit('end');
        this.readable = false;
        return valid;
    } catch (e) {
        this.readable = false;
        this.emit('error', e);
        this.emit('close');
    }
};
VerifyStream.decode = jwsDecode;
VerifyStream.isValid = isValidJws;
VerifyStream.verify = jwsVerify;
module.exports = VerifyStream;
}}),
"[project]/node_modules/jws/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*global exports*/ var SignStream = __turbopack_context__.r("[project]/node_modules/jws/lib/sign-stream.js [app-rsc] (ecmascript)");
var VerifyStream = __turbopack_context__.r("[project]/node_modules/jws/lib/verify-stream.js [app-rsc] (ecmascript)");
var ALGORITHMS = [
    'HS256',
    'HS384',
    'HS512',
    'RS256',
    'RS384',
    'RS512',
    'PS256',
    'PS384',
    'PS512',
    'ES256',
    'ES384',
    'ES512'
];
exports.ALGORITHMS = ALGORITHMS;
exports.sign = SignStream.sign;
exports.verify = VerifyStream.verify;
exports.decode = VerifyStream.decode;
exports.isValid = VerifyStream.isValid;
exports.createSign = function createSign(opts) {
    return new SignStream(opts);
};
exports.createVerify = function createVerify(opts) {
    return new VerifyStream(opts);
};
}}),
"[project]/node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
function getParamSize(keySize) {
    var result = (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);
    return result;
}
var paramBytesForAlg = {
    ES256: getParamSize(256),
    ES384: getParamSize(384),
    ES512: getParamSize(521)
};
function getParamBytesForAlg(alg) {
    var paramBytes = paramBytesForAlg[alg];
    if (paramBytes) {
        return paramBytes;
    }
    throw new Error('Unknown algorithm "' + alg + '"');
}
module.exports = getParamBytesForAlg;
}}),
"[project]/node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var Buffer = __turbopack_context__.r("[project]/node_modules/safe-buffer/index.js [app-rsc] (ecmascript)").Buffer;
var getParamBytesForAlg = __turbopack_context__.r("[project]/node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js [app-rsc] (ecmascript)");
var MAX_OCTET = 0x80, CLASS_UNIVERSAL = 0, PRIMITIVE_BIT = 0x20, TAG_SEQ = 0x10, TAG_INT = 0x02, ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6, ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;
function base64Url(base64) {
    return base64.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
}
function signatureAsBuffer(signature) {
    if (Buffer.isBuffer(signature)) {
        return signature;
    } else if ('string' === typeof signature) {
        return Buffer.from(signature, 'base64');
    }
    throw new TypeError('ECDSA signature must be a Base64 string or a Buffer');
}
function derToJose(signature, alg) {
    signature = signatureAsBuffer(signature);
    var paramBytes = getParamBytesForAlg(alg);
    // the DER encoded param should at most be the param size, plus a padding
    // zero, since due to being a signed integer
    var maxEncodedParamLength = paramBytes + 1;
    var inputLength = signature.length;
    var offset = 0;
    if (signature[offset++] !== ENCODED_TAG_SEQ) {
        throw new Error('Could not find expected "seq"');
    }
    var seqLength = signature[offset++];
    if (seqLength === (MAX_OCTET | 1)) {
        seqLength = signature[offset++];
    }
    if (inputLength - offset < seqLength) {
        throw new Error('"seq" specified length of "' + seqLength + '", only "' + (inputLength - offset) + '" remaining');
    }
    if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "r"');
    }
    var rLength = signature[offset++];
    if (inputLength - offset - 2 < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", only "' + (inputLength - offset - 2) + '" available');
    }
    if (maxEncodedParamLength < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
    }
    var rOffset = offset;
    offset += rLength;
    if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "s"');
    }
    var sLength = signature[offset++];
    if (inputLength - offset !== sLength) {
        throw new Error('"s" specified length of "' + sLength + '", expected "' + (inputLength - offset) + '"');
    }
    if (maxEncodedParamLength < sLength) {
        throw new Error('"s" specified length of "' + sLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
    }
    var sOffset = offset;
    offset += sLength;
    if (offset !== inputLength) {
        throw new Error('Expected to consume entire buffer, but "' + (inputLength - offset) + '" bytes remain');
    }
    var rPadding = paramBytes - rLength, sPadding = paramBytes - sLength;
    var dst = Buffer.allocUnsafe(rPadding + rLength + sPadding + sLength);
    for(offset = 0; offset < rPadding; ++offset){
        dst[offset] = 0;
    }
    signature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);
    offset = paramBytes;
    for(var o = offset; offset < o + sPadding; ++offset){
        dst[offset] = 0;
    }
    signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);
    dst = dst.toString('base64');
    dst = base64Url(dst);
    return dst;
}
function countPadding(buf, start, stop) {
    var padding = 0;
    while(start + padding < stop && buf[start + padding] === 0){
        ++padding;
    }
    var needsSign = buf[start + padding] >= MAX_OCTET;
    if (needsSign) {
        --padding;
    }
    return padding;
}
function joseToDer(signature, alg) {
    signature = signatureAsBuffer(signature);
    var paramBytes = getParamBytesForAlg(alg);
    var signatureBytes = signature.length;
    if (signatureBytes !== paramBytes * 2) {
        throw new TypeError('"' + alg + '" signatures must be "' + paramBytes * 2 + '" bytes, saw "' + signatureBytes + '"');
    }
    var rPadding = countPadding(signature, 0, paramBytes);
    var sPadding = countPadding(signature, paramBytes, signature.length);
    var rLength = paramBytes - rPadding;
    var sLength = paramBytes - sPadding;
    var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;
    var shortLength = rsBytes < MAX_OCTET;
    var dst = Buffer.allocUnsafe((shortLength ? 2 : 3) + rsBytes);
    var offset = 0;
    dst[offset++] = ENCODED_TAG_SEQ;
    if (shortLength) {
        // Bit 8 has value "0"
        // bits 7-1 give the length.
        dst[offset++] = rsBytes;
    } else {
        // Bit 8 of first octet has value "1"
        // bits 7-1 give the number of additional length octets.
        dst[offset++] = MAX_OCTET | 1;
        // length, base 256
        dst[offset++] = rsBytes & 0xff;
    }
    dst[offset++] = ENCODED_TAG_INT;
    dst[offset++] = rLength;
    if (rPadding < 0) {
        dst[offset++] = 0;
        offset += signature.copy(dst, offset, 0, paramBytes);
    } else {
        offset += signature.copy(dst, offset, rPadding, paramBytes);
    }
    dst[offset++] = ENCODED_TAG_INT;
    dst[offset++] = sLength;
    if (sPadding < 0) {
        dst[offset++] = 0;
        signature.copy(dst, offset, paramBytes);
    } else {
        signature.copy(dst, offset, paramBytes + sPadding);
    }
    return dst;
}
module.exports = {
    derToJose: derToJose,
    joseToDer: joseToDer
};
}}),
"[project]/node_modules/buffer-equal-constant-time/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*jshint node:true */ 'use strict';
var Buffer = __turbopack_context__.r("[externals]/buffer [external] (buffer, cjs)").Buffer; // browserify
var SlowBuffer = __turbopack_context__.r("[externals]/buffer [external] (buffer, cjs)").SlowBuffer;
module.exports = bufferEq;
function bufferEq(a, b) {
    // shortcutting on type is necessary for correctness
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        return false;
    }
    // buffer sizes should be well-known information, so despite this
    // shortcutting, it doesn't leak any information about the *contents* of the
    // buffers.
    if (a.length !== b.length) {
        return false;
    }
    var c = 0;
    for(var i = 0; i < a.length; i++){
        /*jshint bitwise:false */ c |= a[i] ^ b[i]; // XOR
    }
    return c === 0;
}
bufferEq.install = function() {
    Buffer.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {
        return bufferEq(this, that);
    };
};
var origBufEqual = Buffer.prototype.equal;
var origSlowBufEqual = SlowBuffer.prototype.equal;
bufferEq.restore = function() {
    Buffer.prototype.equal = origBufEqual;
    SlowBuffer.prototype.equal = origSlowBufEqual;
};
}}),
"[project]/node_modules/jwa/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var Buffer = __turbopack_context__.r("[project]/node_modules/safe-buffer/index.js [app-rsc] (ecmascript)").Buffer;
var crypto = __turbopack_context__.r("[externals]/crypto [external] (crypto, cjs)");
var formatEcdsa = __turbopack_context__.r("[project]/node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js [app-rsc] (ecmascript)");
var util = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
var MSG_INVALID_SECRET = 'secret must be a string or buffer';
var MSG_INVALID_VERIFIER_KEY = 'key must be a string or a buffer';
var MSG_INVALID_SIGNER_KEY = 'key must be a string, a buffer or an object';
var supportsKeyObjects = typeof crypto.createPublicKey === 'function';
if (supportsKeyObjects) {
    MSG_INVALID_VERIFIER_KEY += ' or a KeyObject';
    MSG_INVALID_SECRET += 'or a KeyObject';
}
function checkIsPublicKey(key) {
    if (Buffer.isBuffer(key)) {
        return;
    }
    if (typeof key === 'string') {
        return;
    }
    if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
    }
    if (typeof key !== 'object') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
    }
    if (typeof key.type !== 'string') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
    }
    if (typeof key.asymmetricKeyType !== 'string') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
    }
    if (typeof key.export !== 'function') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
    }
}
;
function checkIsPrivateKey(key) {
    if (Buffer.isBuffer(key)) {
        return;
    }
    if (typeof key === 'string') {
        return;
    }
    if (typeof key === 'object') {
        return;
    }
    throw typeError(MSG_INVALID_SIGNER_KEY);
}
;
function checkIsSecretKey(key) {
    if (Buffer.isBuffer(key)) {
        return;
    }
    if (typeof key === 'string') {
        return key;
    }
    if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
    }
    if (typeof key !== 'object') {
        throw typeError(MSG_INVALID_SECRET);
    }
    if (key.type !== 'secret') {
        throw typeError(MSG_INVALID_SECRET);
    }
    if (typeof key.export !== 'function') {
        throw typeError(MSG_INVALID_SECRET);
    }
}
function fromBase64(base64) {
    return base64.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
}
function toBase64(base64url) {
    base64url = base64url.toString();
    var padding = 4 - base64url.length % 4;
    if (padding !== 4) {
        for(var i = 0; i < padding; ++i){
            base64url += '=';
        }
    }
    return base64url.replace(/\-/g, '+').replace(/_/g, '/');
}
function typeError(template) {
    var args = [].slice.call(arguments, 1);
    var errMsg = util.format.bind(util, template).apply(null, args);
    return new TypeError(errMsg);
}
function bufferOrString(obj) {
    return Buffer.isBuffer(obj) || typeof obj === 'string';
}
function normalizeInput(thing) {
    if (!bufferOrString(thing)) thing = JSON.stringify(thing);
    return thing;
}
function createHmacSigner(bits) {
    return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto.createHmac('sha' + bits, secret);
        var sig = (hmac.update(thing), hmac.digest('base64'));
        return fromBase64(sig);
    };
}
var bufferEqual;
var timingSafeEqual = 'timingSafeEqual' in crypto ? function timingSafeEqual(a, b) {
    if (a.byteLength !== b.byteLength) {
        return false;
    }
    return crypto.timingSafeEqual(a, b);
} : function timingSafeEqual(a, b) {
    if (!bufferEqual) {
        bufferEqual = __turbopack_context__.r("[project]/node_modules/buffer-equal-constant-time/index.js [app-rsc] (ecmascript)");
    }
    return bufferEqual(a, b);
};
function createHmacVerifier(bits) {
    return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return timingSafeEqual(Buffer.from(signature), Buffer.from(computedSig));
    };
}
function createKeySigner(bits) {
    return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        // Even though we are specifying "RSA" here, this works with ECDSA
        // keys as well.
        var signer = crypto.createSign('RSA-SHA' + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, 'base64'));
        return fromBase64(sig);
    };
}
function createKeyVerifier(bits) {
    return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto.createVerify('RSA-SHA' + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, 'base64');
    };
}
function createPSSKeySigner(bits) {
    return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto.createSign('RSA-SHA' + bits);
        var sig = (signer.update(thing), signer.sign({
            key: privateKey,
            padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
            saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST
        }, 'base64'));
        return fromBase64(sig);
    };
}
function createPSSKeyVerifier(bits) {
    return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto.createVerify('RSA-SHA' + bits);
        verifier.update(thing);
        return verifier.verify({
            key: publicKey,
            padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
            saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST
        }, signature, 'base64');
    };
}
function createECDSASigner(bits) {
    var inner = createKeySigner(bits);
    return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, 'ES' + bits);
        return signature;
    };
}
function createECDSAVerifer(bits) {
    var inner = createKeyVerifier(bits);
    return function verify(thing, signature, publicKey) {
        signature = formatEcdsa.joseToDer(signature, 'ES' + bits).toString('base64');
        var result = inner(thing, signature, publicKey);
        return result;
    };
}
function createNoneSigner() {
    return function sign() {
        return '';
    };
}
function createNoneVerifier() {
    return function verify(thing, signature) {
        return signature === '';
    };
}
module.exports = function jwa(algorithm) {
    var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner
    };
    var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier
    };
    var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);
    if (!match) throw typeError(MSG_INVALID_ALGORITHM, algorithm);
    var algo = (match[1] || match[3]).toLowerCase();
    var bits = match[2];
    return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits)
    };
};
}}),
"[project]/node_modules/jsonwebtoken/decode.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var jws = __turbopack_context__.r("[project]/node_modules/jws/index.js [app-rsc] (ecmascript)");
module.exports = function(jwt, options) {
    options = options || {};
    var decoded = jws.decode(jwt, options);
    if (!decoded) {
        return null;
    }
    var payload = decoded.payload;
    //try parse the payload
    if (typeof payload === 'string') {
        try {
            var obj = JSON.parse(payload);
            if (obj !== null && typeof obj === 'object') {
                payload = obj;
            }
        } catch (e) {}
    }
    //return header if `complete` option is enabled.  header includes claims
    //such as `kid` and `alg` used to select the key within a JWKS needed to
    //verify the signature
    if (options.complete === true) {
        return {
            header: decoded.header,
            payload: payload,
            signature: decoded.signature
        };
    }
    return payload;
};
}}),
"[project]/node_modules/jsonwebtoken/lib/JsonWebTokenError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var JsonWebTokenError = function(message, error) {
    Error.call(this, message);
    if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
    }
    this.name = 'JsonWebTokenError';
    this.message = message;
    if (error) this.inner = error;
};
JsonWebTokenError.prototype = Object.create(Error.prototype);
JsonWebTokenError.prototype.constructor = JsonWebTokenError;
module.exports = JsonWebTokenError;
}}),
"[project]/node_modules/jsonwebtoken/lib/NotBeforeError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var JsonWebTokenError = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/JsonWebTokenError.js [app-rsc] (ecmascript)");
var NotBeforeError = function(message, date) {
    JsonWebTokenError.call(this, message);
    this.name = 'NotBeforeError';
    this.date = date;
};
NotBeforeError.prototype = Object.create(JsonWebTokenError.prototype);
NotBeforeError.prototype.constructor = NotBeforeError;
module.exports = NotBeforeError;
}}),
"[project]/node_modules/jsonwebtoken/lib/TokenExpiredError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var JsonWebTokenError = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/JsonWebTokenError.js [app-rsc] (ecmascript)");
var TokenExpiredError = function(message, expiredAt) {
    JsonWebTokenError.call(this, message);
    this.name = 'TokenExpiredError';
    this.expiredAt = expiredAt;
};
TokenExpiredError.prototype = Object.create(JsonWebTokenError.prototype);
TokenExpiredError.prototype.constructor = TokenExpiredError;
module.exports = TokenExpiredError;
}}),
"[project]/node_modules/jsonwebtoken/lib/timespan.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var ms = __turbopack_context__.r("[project]/node_modules/ms/index.js [app-rsc] (ecmascript)");
module.exports = function(time, iat) {
    var timestamp = iat || Math.floor(Date.now() / 1000);
    if (typeof time === 'string') {
        var milliseconds = ms(time);
        if (typeof milliseconds === 'undefined') {
            return;
        }
        return Math.floor(timestamp + milliseconds / 1000);
    } else if (typeof time === 'number') {
        return timestamp + time;
    } else {
        return;
    }
};
}}),
"[project]/node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
const semver = __turbopack_context__.r("[project]/node_modules/semver/index.js [app-rsc] (ecmascript)");
module.exports = semver.satisfies(process.version, '>=15.7.0');
}}),
"[project]/node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
const semver = __turbopack_context__.r("[project]/node_modules/semver/index.js [app-rsc] (ecmascript)");
module.exports = semver.satisfies(process.version, '>=16.9.0');
}}),
"[project]/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
const ASYMMETRIC_KEY_DETAILS_SUPPORTED = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js [app-rsc] (ecmascript)");
const RSA_PSS_KEY_DETAILS_SUPPORTED = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js [app-rsc] (ecmascript)");
const allowedAlgorithmsForKeys = {
    'ec': [
        'ES256',
        'ES384',
        'ES512'
    ],
    'rsa': [
        'RS256',
        'PS256',
        'RS384',
        'PS384',
        'RS512',
        'PS512'
    ],
    'rsa-pss': [
        'PS256',
        'PS384',
        'PS512'
    ]
};
const allowedCurves = {
    ES256: 'prime256v1',
    ES384: 'secp384r1',
    ES512: 'secp521r1'
};
module.exports = function(algorithm, key) {
    if (!algorithm || !key) return;
    const keyType = key.asymmetricKeyType;
    if (!keyType) return;
    const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];
    if (!allowedAlgorithms) {
        throw new Error(`Unknown key type "${keyType}".`);
    }
    if (!allowedAlgorithms.includes(algorithm)) {
        throw new Error(`"alg" parameter for "${keyType}" key type must be one of: ${allowedAlgorithms.join(', ')}.`);
    }
    /*
   * Ignore the next block from test coverage because it gets executed
   * conditionally depending on the Node version. Not ignoring it would
   * prevent us from reaching the target % of coverage for versions of
   * Node under 15.7.0.
   */ /* istanbul ignore next */ if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {
        switch(keyType){
            case 'ec':
                const keyCurve = key.asymmetricKeyDetails.namedCurve;
                const allowedCurve = allowedCurves[algorithm];
                if (keyCurve !== allowedCurve) {
                    throw new Error(`"alg" parameter "${algorithm}" requires curve "${allowedCurve}".`);
                }
                break;
            case 'rsa-pss':
                if (RSA_PSS_KEY_DETAILS_SUPPORTED) {
                    const length = parseInt(algorithm.slice(-3), 10);
                    const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;
                    if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {
                        throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of "alg" ${algorithm}.`);
                    }
                    if (saltLength !== undefined && saltLength > length >> 3) {
                        throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of "alg" ${algorithm}.`);
                    }
                }
                break;
        }
    }
};
}}),
"[project]/node_modules/jsonwebtoken/lib/psSupported.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var semver = __turbopack_context__.r("[project]/node_modules/semver/index.js [app-rsc] (ecmascript)");
module.exports = semver.satisfies(process.version, '^6.12.0 || >=8.0.0');
}}),
"[project]/node_modules/jsonwebtoken/verify.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
const JsonWebTokenError = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/JsonWebTokenError.js [app-rsc] (ecmascript)");
const NotBeforeError = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/NotBeforeError.js [app-rsc] (ecmascript)");
const TokenExpiredError = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/TokenExpiredError.js [app-rsc] (ecmascript)");
const decode = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/decode.js [app-rsc] (ecmascript)");
const timespan = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/timespan.js [app-rsc] (ecmascript)");
const validateAsymmetricKey = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js [app-rsc] (ecmascript)");
const PS_SUPPORTED = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/psSupported.js [app-rsc] (ecmascript)");
const jws = __turbopack_context__.r("[project]/node_modules/jws/index.js [app-rsc] (ecmascript)");
const { KeyObject, createSecretKey, createPublicKey } = __turbopack_context__.r("[externals]/crypto [external] (crypto, cjs)");
const PUB_KEY_ALGS = [
    'RS256',
    'RS384',
    'RS512'
];
const EC_KEY_ALGS = [
    'ES256',
    'ES384',
    'ES512'
];
const RSA_KEY_ALGS = [
    'RS256',
    'RS384',
    'RS512'
];
const HS_ALGS = [
    'HS256',
    'HS384',
    'HS512'
];
if (PS_SUPPORTED) {
    PUB_KEY_ALGS.splice(PUB_KEY_ALGS.length, 0, 'PS256', 'PS384', 'PS512');
    RSA_KEY_ALGS.splice(RSA_KEY_ALGS.length, 0, 'PS256', 'PS384', 'PS512');
}
module.exports = function(jwtString, secretOrPublicKey, options, callback) {
    if (typeof options === 'function' && !callback) {
        callback = options;
        options = {};
    }
    if (!options) {
        options = {};
    }
    //clone this object since we are going to mutate it.
    options = Object.assign({}, options);
    let done;
    if (callback) {
        done = callback;
    } else {
        done = function(err, data) {
            if (err) throw err;
            return data;
        };
    }
    if (options.clockTimestamp && typeof options.clockTimestamp !== 'number') {
        return done(new JsonWebTokenError('clockTimestamp must be a number'));
    }
    if (options.nonce !== undefined && (typeof options.nonce !== 'string' || options.nonce.trim() === '')) {
        return done(new JsonWebTokenError('nonce must be a non-empty string'));
    }
    if (options.allowInvalidAsymmetricKeyTypes !== undefined && typeof options.allowInvalidAsymmetricKeyTypes !== 'boolean') {
        return done(new JsonWebTokenError('allowInvalidAsymmetricKeyTypes must be a boolean'));
    }
    const clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1000);
    if (!jwtString) {
        return done(new JsonWebTokenError('jwt must be provided'));
    }
    if (typeof jwtString !== 'string') {
        return done(new JsonWebTokenError('jwt must be a string'));
    }
    const parts = jwtString.split('.');
    if (parts.length !== 3) {
        return done(new JsonWebTokenError('jwt malformed'));
    }
    let decodedToken;
    try {
        decodedToken = decode(jwtString, {
            complete: true
        });
    } catch (err) {
        return done(err);
    }
    if (!decodedToken) {
        return done(new JsonWebTokenError('invalid token'));
    }
    const header = decodedToken.header;
    let getSecret;
    if (typeof secretOrPublicKey === 'function') {
        if (!callback) {
            return done(new JsonWebTokenError('verify must be called asynchronous if secret or public key is provided as a callback'));
        }
        getSecret = secretOrPublicKey;
    } else {
        getSecret = function(header, secretCallback) {
            return secretCallback(null, secretOrPublicKey);
        };
    }
    return getSecret(header, function(err, secretOrPublicKey) {
        if (err) {
            return done(new JsonWebTokenError('error in secret or public key callback: ' + err.message));
        }
        const hasSignature = parts[2].trim() !== '';
        if (!hasSignature && secretOrPublicKey) {
            return done(new JsonWebTokenError('jwt signature is required'));
        }
        if (hasSignature && !secretOrPublicKey) {
            return done(new JsonWebTokenError('secret or public key must be provided'));
        }
        if (!hasSignature && !options.algorithms) {
            return done(new JsonWebTokenError('please specify "none" in "algorithms" to verify unsigned tokens'));
        }
        if (secretOrPublicKey != null && !(secretOrPublicKey instanceof KeyObject)) {
            try {
                secretOrPublicKey = createPublicKey(secretOrPublicKey);
            } catch (_) {
                try {
                    secretOrPublicKey = createSecretKey(typeof secretOrPublicKey === 'string' ? Buffer.from(secretOrPublicKey) : secretOrPublicKey);
                } catch (_) {
                    return done(new JsonWebTokenError('secretOrPublicKey is not valid key material'));
                }
            }
        }
        if (!options.algorithms) {
            if (secretOrPublicKey.type === 'secret') {
                options.algorithms = HS_ALGS;
            } else if ([
                'rsa',
                'rsa-pss'
            ].includes(secretOrPublicKey.asymmetricKeyType)) {
                options.algorithms = RSA_KEY_ALGS;
            } else if (secretOrPublicKey.asymmetricKeyType === 'ec') {
                options.algorithms = EC_KEY_ALGS;
            } else {
                options.algorithms = PUB_KEY_ALGS;
            }
        }
        if (options.algorithms.indexOf(decodedToken.header.alg) === -1) {
            return done(new JsonWebTokenError('invalid algorithm'));
        }
        if (header.alg.startsWith('HS') && secretOrPublicKey.type !== 'secret') {
            return done(new JsonWebTokenError(`secretOrPublicKey must be a symmetric key when using ${header.alg}`));
        } else if (/^(?:RS|PS|ES)/.test(header.alg) && secretOrPublicKey.type !== 'public') {
            return done(new JsonWebTokenError(`secretOrPublicKey must be an asymmetric key when using ${header.alg}`));
        }
        if (!options.allowInvalidAsymmetricKeyTypes) {
            try {
                validateAsymmetricKey(header.alg, secretOrPublicKey);
            } catch (e) {
                return done(e);
            }
        }
        let valid;
        try {
            valid = jws.verify(jwtString, decodedToken.header.alg, secretOrPublicKey);
        } catch (e) {
            return done(e);
        }
        if (!valid) {
            return done(new JsonWebTokenError('invalid signature'));
        }
        const payload = decodedToken.payload;
        if (typeof payload.nbf !== 'undefined' && !options.ignoreNotBefore) {
            if (typeof payload.nbf !== 'number') {
                return done(new JsonWebTokenError('invalid nbf value'));
            }
            if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {
                return done(new NotBeforeError('jwt not active', new Date(payload.nbf * 1000)));
            }
        }
        if (typeof payload.exp !== 'undefined' && !options.ignoreExpiration) {
            if (typeof payload.exp !== 'number') {
                return done(new JsonWebTokenError('invalid exp value'));
            }
            if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {
                return done(new TokenExpiredError('jwt expired', new Date(payload.exp * 1000)));
            }
        }
        if (options.audience) {
            const audiences = Array.isArray(options.audience) ? options.audience : [
                options.audience
            ];
            const target = Array.isArray(payload.aud) ? payload.aud : [
                payload.aud
            ];
            const match = target.some(function(targetAudience) {
                return audiences.some(function(audience) {
                    return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;
                });
            });
            if (!match) {
                return done(new JsonWebTokenError('jwt audience invalid. expected: ' + audiences.join(' or ')));
            }
        }
        if (options.issuer) {
            const invalid_issuer = typeof options.issuer === 'string' && payload.iss !== options.issuer || Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1;
            if (invalid_issuer) {
                return done(new JsonWebTokenError('jwt issuer invalid. expected: ' + options.issuer));
            }
        }
        if (options.subject) {
            if (payload.sub !== options.subject) {
                return done(new JsonWebTokenError('jwt subject invalid. expected: ' + options.subject));
            }
        }
        if (options.jwtid) {
            if (payload.jti !== options.jwtid) {
                return done(new JsonWebTokenError('jwt jwtid invalid. expected: ' + options.jwtid));
            }
        }
        if (options.nonce) {
            if (payload.nonce !== options.nonce) {
                return done(new JsonWebTokenError('jwt nonce invalid. expected: ' + options.nonce));
            }
        }
        if (options.maxAge) {
            if (typeof payload.iat !== 'number') {
                return done(new JsonWebTokenError('iat required when maxAge is specified'));
            }
            const maxAgeTimestamp = timespan(options.maxAge, payload.iat);
            if (typeof maxAgeTimestamp === 'undefined') {
                return done(new JsonWebTokenError('"maxAge" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
            }
            if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) {
                return done(new TokenExpiredError('maxAge exceeded', new Date(maxAgeTimestamp * 1000)));
            }
        }
        if (options.complete === true) {
            const signature = decodedToken.signature;
            return done(null, {
                header: header,
                payload: payload,
                signature: signature
            });
        }
        return done(null, payload);
    });
};
}}),
"[project]/node_modules/jsonwebtoken/sign.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
const timespan = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/timespan.js [app-rsc] (ecmascript)");
const PS_SUPPORTED = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/psSupported.js [app-rsc] (ecmascript)");
const validateAsymmetricKey = __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js [app-rsc] (ecmascript)");
const jws = __turbopack_context__.r("[project]/node_modules/jws/index.js [app-rsc] (ecmascript)");
const includes = __turbopack_context__.r("[project]/node_modules/lodash.includes/index.js [app-rsc] (ecmascript)");
const isBoolean = __turbopack_context__.r("[project]/node_modules/lodash.isboolean/index.js [app-rsc] (ecmascript)");
const isInteger = __turbopack_context__.r("[project]/node_modules/lodash.isinteger/index.js [app-rsc] (ecmascript)");
const isNumber = __turbopack_context__.r("[project]/node_modules/lodash.isnumber/index.js [app-rsc] (ecmascript)");
const isPlainObject = __turbopack_context__.r("[project]/node_modules/lodash.isplainobject/index.js [app-rsc] (ecmascript)");
const isString = __turbopack_context__.r("[project]/node_modules/lodash.isstring/index.js [app-rsc] (ecmascript)");
const once = __turbopack_context__.r("[project]/node_modules/lodash.once/index.js [app-rsc] (ecmascript)");
const { KeyObject, createSecretKey, createPrivateKey } = __turbopack_context__.r("[externals]/crypto [external] (crypto, cjs)");
const SUPPORTED_ALGS = [
    'RS256',
    'RS384',
    'RS512',
    'ES256',
    'ES384',
    'ES512',
    'HS256',
    'HS384',
    'HS512',
    'none'
];
if (PS_SUPPORTED) {
    SUPPORTED_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');
}
const sign_options_schema = {
    expiresIn: {
        isValid: function(value) {
            return isInteger(value) || isString(value) && value;
        },
        message: '"expiresIn" should be a number of seconds or string representing a timespan'
    },
    notBefore: {
        isValid: function(value) {
            return isInteger(value) || isString(value) && value;
        },
        message: '"notBefore" should be a number of seconds or string representing a timespan'
    },
    audience: {
        isValid: function(value) {
            return isString(value) || Array.isArray(value);
        },
        message: '"audience" must be a string or array'
    },
    algorithm: {
        isValid: includes.bind(null, SUPPORTED_ALGS),
        message: '"algorithm" must be a valid string enum value'
    },
    header: {
        isValid: isPlainObject,
        message: '"header" must be an object'
    },
    encoding: {
        isValid: isString,
        message: '"encoding" must be a string'
    },
    issuer: {
        isValid: isString,
        message: '"issuer" must be a string'
    },
    subject: {
        isValid: isString,
        message: '"subject" must be a string'
    },
    jwtid: {
        isValid: isString,
        message: '"jwtid" must be a string'
    },
    noTimestamp: {
        isValid: isBoolean,
        message: '"noTimestamp" must be a boolean'
    },
    keyid: {
        isValid: isString,
        message: '"keyid" must be a string'
    },
    mutatePayload: {
        isValid: isBoolean,
        message: '"mutatePayload" must be a boolean'
    },
    allowInsecureKeySizes: {
        isValid: isBoolean,
        message: '"allowInsecureKeySizes" must be a boolean'
    },
    allowInvalidAsymmetricKeyTypes: {
        isValid: isBoolean,
        message: '"allowInvalidAsymmetricKeyTypes" must be a boolean'
    }
};
const registered_claims_schema = {
    iat: {
        isValid: isNumber,
        message: '"iat" should be a number of seconds'
    },
    exp: {
        isValid: isNumber,
        message: '"exp" should be a number of seconds'
    },
    nbf: {
        isValid: isNumber,
        message: '"nbf" should be a number of seconds'
    }
};
function validate(schema, allowUnknown, object, parameterName) {
    if (!isPlainObject(object)) {
        throw new Error('Expected "' + parameterName + '" to be a plain object.');
    }
    Object.keys(object).forEach(function(key) {
        const validator = schema[key];
        if (!validator) {
            if (!allowUnknown) {
                throw new Error('"' + key + '" is not allowed in "' + parameterName + '"');
            }
            return;
        }
        if (!validator.isValid(object[key])) {
            throw new Error(validator.message);
        }
    });
}
function validateOptions(options) {
    return validate(sign_options_schema, false, options, 'options');
}
function validatePayload(payload) {
    return validate(registered_claims_schema, true, payload, 'payload');
}
const options_to_payload = {
    'audience': 'aud',
    'issuer': 'iss',
    'subject': 'sub',
    'jwtid': 'jti'
};
const options_for_objects = [
    'expiresIn',
    'notBefore',
    'noTimestamp',
    'audience',
    'issuer',
    'subject',
    'jwtid'
];
module.exports = function(payload, secretOrPrivateKey, options, callback) {
    if (typeof options === 'function') {
        callback = options;
        options = {};
    } else {
        options = options || {};
    }
    const isObjectPayload = typeof payload === 'object' && !Buffer.isBuffer(payload);
    const header = Object.assign({
        alg: options.algorithm || 'HS256',
        typ: isObjectPayload ? 'JWT' : undefined,
        kid: options.keyid
    }, options.header);
    function failure(err) {
        if (callback) {
            return callback(err);
        }
        throw err;
    }
    if (!secretOrPrivateKey && options.algorithm !== 'none') {
        return failure(new Error('secretOrPrivateKey must have a value'));
    }
    if (secretOrPrivateKey != null && !(secretOrPrivateKey instanceof KeyObject)) {
        try {
            secretOrPrivateKey = createPrivateKey(secretOrPrivateKey);
        } catch (_) {
            try {
                secretOrPrivateKey = createSecretKey(typeof secretOrPrivateKey === 'string' ? Buffer.from(secretOrPrivateKey) : secretOrPrivateKey);
            } catch (_) {
                return failure(new Error('secretOrPrivateKey is not valid key material'));
            }
        }
    }
    if (header.alg.startsWith('HS') && secretOrPrivateKey.type !== 'secret') {
        return failure(new Error(`secretOrPrivateKey must be a symmetric key when using ${header.alg}`));
    } else if (/^(?:RS|PS|ES)/.test(header.alg)) {
        if (secretOrPrivateKey.type !== 'private') {
            return failure(new Error(`secretOrPrivateKey must be an asymmetric key when using ${header.alg}`));
        }
        if (!options.allowInsecureKeySizes && !header.alg.startsWith('ES') && secretOrPrivateKey.asymmetricKeyDetails !== undefined && //KeyObject.asymmetricKeyDetails is supported in Node 15+
        secretOrPrivateKey.asymmetricKeyDetails.modulusLength < 2048) {
            return failure(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
        }
    }
    if (typeof payload === 'undefined') {
        return failure(new Error('payload is required'));
    } else if (isObjectPayload) {
        try {
            validatePayload(payload);
        } catch (error) {
            return failure(error);
        }
        if (!options.mutatePayload) {
            payload = Object.assign({}, payload);
        }
    } else {
        const invalid_options = options_for_objects.filter(function(opt) {
            return typeof options[opt] !== 'undefined';
        });
        if (invalid_options.length > 0) {
            return failure(new Error('invalid ' + invalid_options.join(',') + ' option for ' + typeof payload + ' payload'));
        }
    }
    if (typeof payload.exp !== 'undefined' && typeof options.expiresIn !== 'undefined') {
        return failure(new Error('Bad "options.expiresIn" option the payload already has an "exp" property.'));
    }
    if (typeof payload.nbf !== 'undefined' && typeof options.notBefore !== 'undefined') {
        return failure(new Error('Bad "options.notBefore" option the payload already has an "nbf" property.'));
    }
    try {
        validateOptions(options);
    } catch (error) {
        return failure(error);
    }
    if (!options.allowInvalidAsymmetricKeyTypes) {
        try {
            validateAsymmetricKey(header.alg, secretOrPrivateKey);
        } catch (error) {
            return failure(error);
        }
    }
    const timestamp = payload.iat || Math.floor(Date.now() / 1000);
    if (options.noTimestamp) {
        delete payload.iat;
    } else if (isObjectPayload) {
        payload.iat = timestamp;
    }
    if (typeof options.notBefore !== 'undefined') {
        try {
            payload.nbf = timespan(options.notBefore, timestamp);
        } catch (err) {
            return failure(err);
        }
        if (typeof payload.nbf === 'undefined') {
            return failure(new Error('"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
        }
    }
    if (typeof options.expiresIn !== 'undefined' && typeof payload === 'object') {
        try {
            payload.exp = timespan(options.expiresIn, timestamp);
        } catch (err) {
            return failure(err);
        }
        if (typeof payload.exp === 'undefined') {
            return failure(new Error('"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
        }
    }
    Object.keys(options_to_payload).forEach(function(key) {
        const claim = options_to_payload[key];
        if (typeof options[key] !== 'undefined') {
            if (typeof payload[claim] !== 'undefined') {
                return failure(new Error('Bad "options.' + key + '" option. The payload already has an "' + claim + '" property.'));
            }
            payload[claim] = options[key];
        }
    });
    const encoding = options.encoding || 'utf8';
    if (typeof callback === 'function') {
        callback = callback && once(callback);
        jws.createSign({
            header: header,
            privateKey: secretOrPrivateKey,
            payload: payload,
            encoding: encoding
        }).once('error', callback).once('done', function(signature) {
            // TODO: Remove in favor of the modulus length check before signing once node 15+ is the minimum supported version
            if (!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {
                return callback(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
            }
            callback(null, signature);
        });
    } else {
        let signature = jws.sign({
            header: header,
            payload: payload,
            secret: secretOrPrivateKey,
            encoding: encoding
        });
        // TODO: Remove in favor of the modulus length check before signing once node 15+ is the minimum supported version
        if (!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {
            throw new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`);
        }
        return signature;
    }
};
}}),
"[project]/node_modules/jsonwebtoken/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = {
    decode: __turbopack_context__.r("[project]/node_modules/jsonwebtoken/decode.js [app-rsc] (ecmascript)"),
    verify: __turbopack_context__.r("[project]/node_modules/jsonwebtoken/verify.js [app-rsc] (ecmascript)"),
    sign: __turbopack_context__.r("[project]/node_modules/jsonwebtoken/sign.js [app-rsc] (ecmascript)"),
    JsonWebTokenError: __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/JsonWebTokenError.js [app-rsc] (ecmascript)"),
    NotBeforeError: __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/NotBeforeError.js [app-rsc] (ecmascript)"),
    TokenExpiredError: __turbopack_context__.r("[project]/node_modules/jsonwebtoken/lib/TokenExpiredError.js [app-rsc] (ecmascript)")
};
}}),
"[project]/node_modules/ms/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * Helpers.
 */ var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
        return parse(val);
    } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) {
        return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
        return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch(type){
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
            return n * y;
        case 'weeks':
        case 'week':
        case 'w':
            return n * w;
        case 'days':
        case 'day':
        case 'd':
            return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
            return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
            return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
            return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
        return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
}
/**
 * Pluralization helper.
 */ function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}
}}),
"[project]/node_modules/semver/internal/constants.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0';
const MAX_LENGTH = 256;
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991;
// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16;
// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
const RELEASE_TYPES = [
    'major',
    'premajor',
    'minor',
    'preminor',
    'patch',
    'prepatch',
    'prerelease'
];
module.exports = {
    MAX_LENGTH,
    MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER,
    RELEASE_TYPES,
    SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 0b001,
    FLAG_LOOSE: 0b010
};
}}),
"[project]/node_modules/semver/internal/debug.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const debug = typeof process === 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args)=>console.error('SEMVER', ...args) : ()=>{};
module.exports = debug;
}}),
"[project]/node_modules/semver/internal/re.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH } = __turbopack_context__.r("[project]/node_modules/semver/internal/constants.js [app-rsc] (ecmascript)");
const debug = __turbopack_context__.r("[project]/node_modules/semver/internal/debug.js [app-rsc] (ecmascript)");
exports = module.exports = {};
// The actual regexps go on exports.re
const re = exports.re = [];
const safeRe = exports.safeRe = [];
const src = exports.src = [];
const safeSrc = exports.safeSrc = [];
const t = exports.t = {};
let R = 0;
const LETTERDASHNUMBER = '[a-zA-Z0-9-]';
// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
    [
        '\\s',
        1
    ],
    [
        '\\d',
        MAX_LENGTH
    ],
    [
        LETTERDASHNUMBER,
        MAX_SAFE_BUILD_LENGTH
    ]
];
const makeSafeRegex = (value)=>{
    for (const [token, max] of safeRegexReplacements){
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
    }
    return value;
};
const createToken = (name, value, isGlobal)=>{
    const safe = makeSafeRegex(value);
    const index = R++;
    debug(name, index, value);
    t[name] = index;
    src[index] = value;
    safeSrc[index] = safe;
    re[index] = new RegExp(value, isGlobal ? 'g' : undefined);
    safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined);
};
// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.
// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.
createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
createToken('NUMERICIDENTIFIERLOOSE', '\\d+');
// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.
createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
// ## Main Version
// Three dot-separated numeric identifiers.
createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})`);
createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`);
// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.
// Non-numberic identifiers include numberic identifiers but can be longer.
// Therefore non-numberic identifiers must go first.
createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIER]})`);
createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIERLOOSE]})`);
// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.
createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.
createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`);
// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.
createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.
// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.
createToken('FULLPLAIN', `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
createToken('FULL', `^${src[t.FULLPLAIN]}$`);
// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);
createToken('GTLT', '((?:<|>)?=?)');
// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);
createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);
createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken('COERCEPLAIN', `${'(^|[^\\d])' + '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
createToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
createToken('COERCEFULL', src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?` + `(?:${src[t.BUILD]})?` + `(?:$|[^\\d])`);
createToken('COERCERTL', src[t.COERCE], true);
createToken('COERCERTLFULL', src[t.COERCEFULL], true);
// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken('LONETILDE', '(?:~>?)');
createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true);
exports.tildeTrimReplace = '$1~';
createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken('LONECARET', '(?:\\^)');
createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true);
exports.caretTrimReplace = '$1^';
createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
exports.comparatorTrimReplace = '$1$2$3';
// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\s*$`);
createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\s*$`);
// Star ranges basically just allow anything at all.
createToken('STAR', '(<|>)?=?\\s*\\*');
// >=0.0.0 is like a star
createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$');
createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$');
}}),
"[project]/node_modules/semver/internal/parse-options.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
// parse out just the options we care about
const looseOption = Object.freeze({
    loose: true
});
const emptyOpts = Object.freeze({});
const parseOptions = (options)=>{
    if (!options) {
        return emptyOpts;
    }
    if (typeof options !== 'object') {
        return looseOption;
    }
    return options;
};
module.exports = parseOptions;
}}),
"[project]/node_modules/semver/internal/identifiers.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const numeric = /^[0-9]+$/;
const compareIdentifiers = (a, b)=>{
    const anum = numeric.test(a);
    const bnum = numeric.test(b);
    if (anum && bnum) {
        a = +a;
        b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};
const rcompareIdentifiers = (a, b)=>compareIdentifiers(b, a);
module.exports = {
    compareIdentifiers,
    rcompareIdentifiers
};
}}),
"[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const debug = __turbopack_context__.r("[project]/node_modules/semver/internal/debug.js [app-rsc] (ecmascript)");
const { MAX_LENGTH, MAX_SAFE_INTEGER } = __turbopack_context__.r("[project]/node_modules/semver/internal/constants.js [app-rsc] (ecmascript)");
const { safeRe: re, t } = __turbopack_context__.r("[project]/node_modules/semver/internal/re.js [app-rsc] (ecmascript)");
const parseOptions = __turbopack_context__.r("[project]/node_modules/semver/internal/parse-options.js [app-rsc] (ecmascript)");
const { compareIdentifiers } = __turbopack_context__.r("[project]/node_modules/semver/internal/identifiers.js [app-rsc] (ecmascript)");
class SemVer {
    constructor(version, options){
        options = parseOptions(options);
        if (version instanceof SemVer) {
            if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
                return version;
            } else {
                version = version.version;
            }
        } else if (typeof version !== 'string') {
            throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        }
        if (version.length > MAX_LENGTH) {
            throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
        }
        debug('SemVer', version, options);
        this.options = options;
        this.loose = !!options.loose;
        // this isn't actually relevant for versions, but keep it so that we
        // don't run into trouble passing this.options around.
        this.includePrerelease = !!options.includePrerelease;
        const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
            throw new TypeError(`Invalid Version: ${version}`);
        }
        this.raw = version;
        // these are actually numbers
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
            throw new TypeError('Invalid major version');
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
            throw new TypeError('Invalid minor version');
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
            throw new TypeError('Invalid patch version');
        }
        // numberify any prerelease numeric ids
        if (!m[4]) {
            this.prerelease = [];
        } else {
            this.prerelease = m[4].split('.').map((id)=>{
                if (/^[0-9]+$/.test(id)) {
                    const num = +id;
                    if (num >= 0 && num < MAX_SAFE_INTEGER) {
                        return num;
                    }
                }
                return id;
            });
        }
        this.build = m[5] ? m[5].split('.') : [];
        this.format();
    }
    format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
            this.version += `-${this.prerelease.join('.')}`;
        }
        return this.version;
    }
    toString() {
        return this.version;
    }
    compare(other) {
        debug('SemVer.compare', this.version, this.options, other);
        if (!(other instanceof SemVer)) {
            if (typeof other === 'string' && other === this.version) {
                return 0;
            }
            other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
            return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
        if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
        if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
        }
        // NOT having a prerelease is > having one
        if (this.prerelease.length && !other.prerelease.length) {
            return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
            return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
            return 0;
        }
        let i = 0;
        do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            debug('prerelease compare', i, a, b);
            if (a === undefined && b === undefined) {
                return 0;
            } else if (b === undefined) {
                return 1;
            } else if (a === undefined) {
                return -1;
            } else if (a === b) {
                continue;
            } else {
                return compareIdentifiers(a, b);
            }
        }while (++i)
    }
    compareBuild(other) {
        if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
        }
        let i = 0;
        do {
            const a = this.build[i];
            const b = other.build[i];
            debug('build compare', i, a, b);
            if (a === undefined && b === undefined) {
                return 0;
            } else if (b === undefined) {
                return 1;
            } else if (a === undefined) {
                return -1;
            } else if (a === b) {
                continue;
            } else {
                return compareIdentifiers(a, b);
            }
        }while (++i)
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
        if (release.startsWith('pre')) {
            if (!identifier && identifierBase === false) {
                throw new Error('invalid increment argument: identifier is empty');
            }
            // Avoid an invalid semver results
            if (identifier) {
                const match = `-${identifier}`.match(this.options.loose ? re[t.PRERELEASELOOSE] : re[t.PRERELEASE]);
                if (!match || match[1] !== identifier) {
                    throw new Error(`invalid identifier: ${identifier}`);
                }
            }
        }
        switch(release){
            case 'premajor':
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor = 0;
                this.major++;
                this.inc('pre', identifier, identifierBase);
                break;
            case 'preminor':
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor++;
                this.inc('pre', identifier, identifierBase);
                break;
            case 'prepatch':
                // If this is already a prerelease, it will bump to the next version
                // drop any prereleases that might already exist, since they are not
                // relevant at this point.
                this.prerelease.length = 0;
                this.inc('patch', identifier, identifierBase);
                this.inc('pre', identifier, identifierBase);
                break;
            // If the input is a non-prerelease version, this acts the same as
            // prepatch.
            case 'prerelease':
                if (this.prerelease.length === 0) {
                    this.inc('patch', identifier, identifierBase);
                }
                this.inc('pre', identifier, identifierBase);
                break;
            case 'release':
                if (this.prerelease.length === 0) {
                    throw new Error(`version ${this.raw} is not a prerelease`);
                }
                this.prerelease.length = 0;
                break;
            case 'major':
                // If this is a pre-major version, bump up to the same major version.
                // Otherwise increment major.
                // 1.0.0-5 bumps to 1.0.0
                // 1.1.0 bumps to 2.0.0
                if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                    this.major++;
                }
                this.minor = 0;
                this.patch = 0;
                this.prerelease = [];
                break;
            case 'minor':
                // If this is a pre-minor version, bump up to the same minor version.
                // Otherwise increment minor.
                // 1.2.0-5 bumps to 1.2.0
                // 1.2.1 bumps to 1.3.0
                if (this.patch !== 0 || this.prerelease.length === 0) {
                    this.minor++;
                }
                this.patch = 0;
                this.prerelease = [];
                break;
            case 'patch':
                // If this is not a pre-release version, it will increment the patch.
                // If it is a pre-release it will bump up to the same patch version.
                // 1.2.0-5 patches to 1.2.0
                // 1.2.0 patches to 1.2.1
                if (this.prerelease.length === 0) {
                    this.patch++;
                }
                this.prerelease = [];
                break;
            // This probably shouldn't be used publicly.
            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
            case 'pre':
                {
                    const base = Number(identifierBase) ? 1 : 0;
                    if (this.prerelease.length === 0) {
                        this.prerelease = [
                            base
                        ];
                    } else {
                        let i = this.prerelease.length;
                        while(--i >= 0){
                            if (typeof this.prerelease[i] === 'number') {
                                this.prerelease[i]++;
                                i = -2;
                            }
                        }
                        if (i === -1) {
                            // didn't increment anything
                            if (identifier === this.prerelease.join('.') && identifierBase === false) {
                                throw new Error('invalid increment argument: identifier already exists');
                            }
                            this.prerelease.push(base);
                        }
                    }
                    if (identifier) {
                        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                        let prerelease = [
                            identifier,
                            base
                        ];
                        if (identifierBase === false) {
                            prerelease = [
                                identifier
                            ];
                        }
                        if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                            if (isNaN(this.prerelease[1])) {
                                this.prerelease = prerelease;
                            }
                        } else {
                            this.prerelease = prerelease;
                        }
                    }
                    break;
                }
            default:
                throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
            this.raw += `+${this.build.join('.')}`;
        }
        return this;
    }
}
module.exports = SemVer;
}}),
"[project]/node_modules/semver/functions/parse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const parse = (version, options, throwErrors = false)=>{
    if (version instanceof SemVer) {
        return version;
    }
    try {
        return new SemVer(version, options);
    } catch (er) {
        if (!throwErrors) {
            return null;
        }
        throw er;
    }
};
module.exports = parse;
}}),
"[project]/node_modules/semver/functions/valid.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const parse = __turbopack_context__.r("[project]/node_modules/semver/functions/parse.js [app-rsc] (ecmascript)");
const valid = (version, options)=>{
    const v = parse(version, options);
    return v ? v.version : null;
};
module.exports = valid;
}}),
"[project]/node_modules/semver/functions/clean.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const parse = __turbopack_context__.r("[project]/node_modules/semver/functions/parse.js [app-rsc] (ecmascript)");
const clean = (version, options)=>{
    const s = parse(version.trim().replace(/^[=v]+/, ''), options);
    return s ? s.version : null;
};
module.exports = clean;
}}),
"[project]/node_modules/semver/functions/inc.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const inc = (version, release, options, identifier, identifierBase)=>{
    if (typeof options === 'string') {
        identifierBase = identifier;
        identifier = options;
        options = undefined;
    }
    try {
        return new SemVer(version instanceof SemVer ? version.version : version, options).inc(release, identifier, identifierBase).version;
    } catch (er) {
        return null;
    }
};
module.exports = inc;
}}),
"[project]/node_modules/semver/functions/diff.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const parse = __turbopack_context__.r("[project]/node_modules/semver/functions/parse.js [app-rsc] (ecmascript)");
const diff = (version1, version2)=>{
    const v1 = parse(version1, null, true);
    const v2 = parse(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) {
        return null;
    }
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
        // Going from prerelease -> no prerelease requires some special casing
        // If the low version has only a major, then it will always be a major
        // Some examples:
        // 1.0.0-1 -> 1.0.0
        // 1.0.0-1 -> 1.1.1
        // 1.0.0-1 -> 2.0.0
        if (!lowVersion.patch && !lowVersion.minor) {
            return 'major';
        }
        // If the main part has no difference
        if (lowVersion.compareMain(highVersion) === 0) {
            if (lowVersion.minor && !lowVersion.patch) {
                return 'minor';
            }
            return 'patch';
        }
    }
    // add the `pre` prefix if we are going to a prerelease version
    const prefix = highHasPre ? 'pre' : '';
    if (v1.major !== v2.major) {
        return prefix + 'major';
    }
    if (v1.minor !== v2.minor) {
        return prefix + 'minor';
    }
    if (v1.patch !== v2.patch) {
        return prefix + 'patch';
    }
    // high and low are preleases
    return 'prerelease';
};
module.exports = diff;
}}),
"[project]/node_modules/semver/functions/major.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const major = (a, loose)=>new SemVer(a, loose).major;
module.exports = major;
}}),
"[project]/node_modules/semver/functions/minor.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const minor = (a, loose)=>new SemVer(a, loose).minor;
module.exports = minor;
}}),
"[project]/node_modules/semver/functions/patch.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const patch = (a, loose)=>new SemVer(a, loose).patch;
module.exports = patch;
}}),
"[project]/node_modules/semver/functions/prerelease.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const parse = __turbopack_context__.r("[project]/node_modules/semver/functions/parse.js [app-rsc] (ecmascript)");
const prerelease = (version, options)=>{
    const parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
};
module.exports = prerelease;
}}),
"[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const compare = (a, b, loose)=>new SemVer(a, loose).compare(new SemVer(b, loose));
module.exports = compare;
}}),
"[project]/node_modules/semver/functions/rcompare.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
const rcompare = (a, b, loose)=>compare(b, a, loose);
module.exports = rcompare;
}}),
"[project]/node_modules/semver/functions/compare-loose.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
const compareLoose = (a, b)=>compare(a, b, true);
module.exports = compareLoose;
}}),
"[project]/node_modules/semver/functions/compare-build.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const compareBuild = (a, b, loose)=>{
    const versionA = new SemVer(a, loose);
    const versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
};
module.exports = compareBuild;
}}),
"[project]/node_modules/semver/functions/sort.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const compareBuild = __turbopack_context__.r("[project]/node_modules/semver/functions/compare-build.js [app-rsc] (ecmascript)");
const sort = (list, loose)=>list.sort((a, b)=>compareBuild(a, b, loose));
module.exports = sort;
}}),
"[project]/node_modules/semver/functions/rsort.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const compareBuild = __turbopack_context__.r("[project]/node_modules/semver/functions/compare-build.js [app-rsc] (ecmascript)");
const rsort = (list, loose)=>list.sort((a, b)=>compareBuild(b, a, loose));
module.exports = rsort;
}}),
"[project]/node_modules/semver/functions/gt.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
const gt = (a, b, loose)=>compare(a, b, loose) > 0;
module.exports = gt;
}}),
"[project]/node_modules/semver/functions/lt.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
const lt = (a, b, loose)=>compare(a, b, loose) < 0;
module.exports = lt;
}}),
"[project]/node_modules/semver/functions/eq.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
const eq = (a, b, loose)=>compare(a, b, loose) === 0;
module.exports = eq;
}}),
"[project]/node_modules/semver/functions/neq.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
const neq = (a, b, loose)=>compare(a, b, loose) !== 0;
module.exports = neq;
}}),
"[project]/node_modules/semver/functions/gte.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
const gte = (a, b, loose)=>compare(a, b, loose) >= 0;
module.exports = gte;
}}),
"[project]/node_modules/semver/functions/lte.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
const lte = (a, b, loose)=>compare(a, b, loose) <= 0;
module.exports = lte;
}}),
"[project]/node_modules/semver/functions/cmp.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const eq = __turbopack_context__.r("[project]/node_modules/semver/functions/eq.js [app-rsc] (ecmascript)");
const neq = __turbopack_context__.r("[project]/node_modules/semver/functions/neq.js [app-rsc] (ecmascript)");
const gt = __turbopack_context__.r("[project]/node_modules/semver/functions/gt.js [app-rsc] (ecmascript)");
const gte = __turbopack_context__.r("[project]/node_modules/semver/functions/gte.js [app-rsc] (ecmascript)");
const lt = __turbopack_context__.r("[project]/node_modules/semver/functions/lt.js [app-rsc] (ecmascript)");
const lte = __turbopack_context__.r("[project]/node_modules/semver/functions/lte.js [app-rsc] (ecmascript)");
const cmp = (a, op, b, loose)=>{
    switch(op){
        case '===':
            if (typeof a === 'object') {
                a = a.version;
            }
            if (typeof b === 'object') {
                b = b.version;
            }
            return a === b;
        case '!==':
            if (typeof a === 'object') {
                a = a.version;
            }
            if (typeof b === 'object') {
                b = b.version;
            }
            return a !== b;
        case '':
        case '=':
        case '==':
            return eq(a, b, loose);
        case '!=':
            return neq(a, b, loose);
        case '>':
            return gt(a, b, loose);
        case '>=':
            return gte(a, b, loose);
        case '<':
            return lt(a, b, loose);
        case '<=':
            return lte(a, b, loose);
        default:
            throw new TypeError(`Invalid operator: ${op}`);
    }
};
module.exports = cmp;
}}),
"[project]/node_modules/semver/functions/coerce.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const parse = __turbopack_context__.r("[project]/node_modules/semver/functions/parse.js [app-rsc] (ecmascript)");
const { safeRe: re, t } = __turbopack_context__.r("[project]/node_modules/semver/internal/re.js [app-rsc] (ecmascript)");
const coerce = (version, options)=>{
    if (version instanceof SemVer) {
        return version;
    }
    if (typeof version === 'number') {
        version = String(version);
    }
    if (typeof version !== 'string') {
        return null;
    }
    options = options || {};
    let match = null;
    if (!options.rtl) {
        match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
    } else {
        // Find the right-most coercible string that does not share
        // a terminus with a more left-ward coercible string.
        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
        // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
        //
        // Walk through the string checking with a /g regexp
        // Manually set the index so as to pick up overlapping matches.
        // Stop when we get a match that ends at the string end, since no
        // coercible string can be more right-ward without the same terminus.
        const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
        let next;
        while((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)){
            if (!match || next.index + next[0].length !== match.index + match[0].length) {
                match = next;
            }
            coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        // leave it in a clean state
        coerceRtlRegex.lastIndex = -1;
    }
    if (match === null) {
        return null;
    }
    const major = match[2];
    const minor = match[3] || '0';
    const patch = match[4] || '0';
    const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : '';
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : '';
    return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
};
module.exports = coerce;
}}),
"[project]/node_modules/semver/internal/lrucache.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
class LRUCache {
    constructor(){
        this.max = 1000;
        this.map = new Map();
    }
    get(key) {
        const value = this.map.get(key);
        if (value === undefined) {
            return undefined;
        } else {
            // Remove the key from the map and add it to the end
            this.map.delete(key);
            this.map.set(key, value);
            return value;
        }
    }
    delete(key) {
        return this.map.delete(key);
    }
    set(key, value) {
        const deleted = this.delete(key);
        if (!deleted && value !== undefined) {
            // If cache is full, delete the least recently used item
            if (this.map.size >= this.max) {
                const firstKey = this.map.keys().next().value;
                this.delete(firstKey);
            }
            this.map.set(key, value);
        }
        return this;
    }
}
module.exports = LRUCache;
}}),
"[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SPACE_CHARACTERS = /\s+/g;
// hoisted class for cyclic dependency
class Range {
    constructor(range, options){
        options = parseOptions(options);
        if (range instanceof Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
                return range;
            } else {
                return new Range(range.raw, options);
            }
        }
        if (range instanceof Comparator) {
            // just put it in the set and return
            this.raw = range.value;
            this.set = [
                [
                    range
                ]
            ];
            this.formatted = undefined;
            return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        // First reduce all whitespace as much as possible so we do not have to rely
        // on potentially slow regexes like \s*. This is then stored and used for
        // future error messages as well.
        this.raw = range.trim().replace(SPACE_CHARACTERS, ' ');
        // First, split on ||
        this.set = this.raw.split('||')// map the range to a 2d array of comparators
        .map((r)=>this.parseRange(r.trim()))// throw out any comparator lists that are empty
        // this generally means that it was not a valid range, which is allowed
        // in loose mode, but will still throw if the WHOLE range is invalid.
        .filter((c)=>c.length);
        if (!this.set.length) {
            throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        // if we have any that are not the null set, throw out null sets.
        if (this.set.length > 1) {
            // keep the first one, in case they're all null sets
            const first = this.set[0];
            this.set = this.set.filter((c)=>!isNullSet(c[0]));
            if (this.set.length === 0) {
                this.set = [
                    first
                ];
            } else if (this.set.length > 1) {
                // if we have any that are *, then the range is just *
                for (const c of this.set){
                    if (c.length === 1 && isAny(c[0])) {
                        this.set = [
                            c
                        ];
                        break;
                    }
                }
            }
        }
        this.formatted = undefined;
    }
    get range() {
        if (this.formatted === undefined) {
            this.formatted = '';
            for(let i = 0; i < this.set.length; i++){
                if (i > 0) {
                    this.formatted += '||';
                }
                const comps = this.set[i];
                for(let k = 0; k < comps.length; k++){
                    if (k > 0) {
                        this.formatted += ' ';
                    }
                    this.formatted += comps[k].toString().trim();
                }
            }
        }
        return this.formatted;
    }
    format() {
        return this.range;
    }
    toString() {
        return this.range;
    }
    parseRange(range) {
        // memoize range parsing for performance.
        // this is a very hot path, and fully deterministic.
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ':' + range;
        const cached = cache.get(memoKey);
        if (cached) {
            return cached;
        }
        const loose = this.options.loose;
        // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug('hyphen replace', range);
        // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug('comparator trim', range);
        // `~ 1.2.3` => `~1.2.3`
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug('tilde trim', range);
        // `^ 1.2.3` => `^1.2.3`
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug('caret trim', range);
        // At this point, the range is completely trimmed and
        // ready to be split into comparators.
        let rangeList = range.split(' ').map((comp)=>parseComparator(comp, this.options)).join(' ').split(/\s+/)// >=0.0.0 is equivalent to *
        .map((comp)=>replaceGTE0(comp, this.options));
        if (loose) {
            // in loose mode, throw out any that are not valid comparators
            rangeList = rangeList.filter((comp)=>{
                debug('loose invalid filter', comp, this.options);
                return !!comp.match(re[t.COMPARATORLOOSE]);
            });
        }
        debug('range list', rangeList);
        // if any comparators are the null set, then replace with JUST null set
        // if more than one comparator, remove any * comparators
        // also, don't include the same comparator more than once
        const rangeMap = new Map();
        const comparators = rangeList.map((comp)=>new Comparator(comp, this.options));
        for (const comp of comparators){
            if (isNullSet(comp)) {
                return [
                    comp
                ];
            }
            rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has('')) {
            rangeMap.delete('');
        }
        const result = [
            ...rangeMap.values()
        ];
        cache.set(memoKey, result);
        return result;
    }
    intersects(range, options) {
        if (!(range instanceof Range)) {
            throw new TypeError('a Range is required');
        }
        return this.set.some((thisComparators)=>{
            return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators)=>{
                return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator)=>{
                    return rangeComparators.every((rangeComparator)=>{
                        return thisComparator.intersects(rangeComparator, options);
                    });
                });
            });
        });
    }
    // if ANY of the sets match ALL of its comparators, then pass
    test(version) {
        if (!version) {
            return false;
        }
        if (typeof version === 'string') {
            try {
                version = new SemVer(version, this.options);
            } catch (er) {
                return false;
            }
        }
        for(let i = 0; i < this.set.length; i++){
            if (testSet(this.set[i], version, this.options)) {
                return true;
            }
        }
        return false;
    }
}
module.exports = Range;
const LRU = __turbopack_context__.r("[project]/node_modules/semver/internal/lrucache.js [app-rsc] (ecmascript)");
const cache = new LRU();
const parseOptions = __turbopack_context__.r("[project]/node_modules/semver/internal/parse-options.js [app-rsc] (ecmascript)");
const Comparator = __turbopack_context__.r("[project]/node_modules/semver/classes/comparator.js [app-rsc] (ecmascript)");
const debug = __turbopack_context__.r("[project]/node_modules/semver/internal/debug.js [app-rsc] (ecmascript)");
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const { safeRe: re, t, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = __turbopack_context__.r("[project]/node_modules/semver/internal/re.js [app-rsc] (ecmascript)");
const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = __turbopack_context__.r("[project]/node_modules/semver/internal/constants.js [app-rsc] (ecmascript)");
const isNullSet = (c)=>c.value === '<0.0.0-0';
const isAny = (c)=>c.value === '';
// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options)=>{
    let result = true;
    const remainingComparators = comparators.slice();
    let testComparator = remainingComparators.pop();
    while(result && remainingComparators.length){
        result = remainingComparators.every((otherComparator)=>{
            return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
    }
    return result;
};
// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options)=>{
    debug('comp', comp, options);
    comp = replaceCarets(comp, options);
    debug('caret', comp);
    comp = replaceTildes(comp, options);
    debug('tildes', comp);
    comp = replaceXRanges(comp, options);
    debug('xrange', comp);
    comp = replaceStars(comp, options);
    debug('stars', comp);
    return comp;
};
const isX = (id)=>!id || id.toLowerCase() === 'x' || id === '*';
// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const replaceTildes = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>replaceTilde(c, options)).join(' ');
};
const replaceTilde = (comp, options)=>{
    const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, (_, M, m, p, pr)=>{
        debug('tilde', comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
            ret = '';
        } else if (isX(m)) {
            ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
            // ~1.2 == >=1.2.0 <1.3.0-0
            ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
            debug('replaceTilde pr', pr);
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
            // ~1.2.3 == >=1.2.3 <1.3.0-0
            ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug('tilde return', ret);
        return ret;
    });
};
// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const replaceCarets = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>replaceCaret(c, options)).join(' ');
};
const replaceCaret = (comp, options)=>{
    debug('caret', comp, options);
    const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
    const z = options.includePrerelease ? '-0' : '';
    return comp.replace(r, (_, M, m, p, pr)=>{
        debug('caret', comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
            ret = '';
        } else if (isX(m)) {
            ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
            if (M === '0') {
                ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
            } else {
                ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
            }
        } else if (pr) {
            debug('replaceCaret pr', pr);
            if (M === '0') {
                if (m === '0') {
                    ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
                } else {
                    ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
                }
            } else {
                ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
            }
        } else {
            debug('no pr');
            if (M === '0') {
                if (m === '0') {
                    ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
                } else {
                    ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
                }
            } else {
                ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
            }
        }
        debug('caret return', ret);
        return ret;
    });
};
const replaceXRanges = (comp, options)=>{
    debug('replaceXRanges', comp, options);
    return comp.split(/\s+/).map((c)=>replaceXRange(c, options)).join(' ');
};
const replaceXRange = (comp, options)=>{
    comp = comp.trim();
    const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, (ret, gtlt, M, m, p, pr)=>{
        debug('xRange', comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === '=' && anyX) {
            gtlt = '';
        }
        // if we're including prereleases in the match, then we need
        // to fix this to -0, the lowest possible prerelease value
        pr = options.includePrerelease ? '-0' : '';
        if (xM) {
            if (gtlt === '>' || gtlt === '<') {
                // nothing is allowed
                ret = '<0.0.0-0';
            } else {
                // nothing is forbidden
                ret = '*';
            }
        } else if (gtlt && anyX) {
            // we know patch is an x, because we have any x at all.
            // replace X with 0
            if (xm) {
                m = 0;
            }
            p = 0;
            if (gtlt === '>') {
                // >1 => >=2.0.0
                // >1.2 => >=1.3.0
                gtlt = '>=';
                if (xm) {
                    M = +M + 1;
                    m = 0;
                    p = 0;
                } else {
                    m = +m + 1;
                    p = 0;
                }
            } else if (gtlt === '<=') {
                // <=0.7.x is actually <0.8.0, since any 0.7.x should
                // pass.  Similarly, <=7.x is actually <8.0.0, etc.
                gtlt = '<';
                if (xm) {
                    M = +M + 1;
                } else {
                    m = +m + 1;
                }
            }
            if (gtlt === '<') {
                pr = '-0';
            }
            ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
            ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
            ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug('xRange return', ret);
        return ret;
    });
};
// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options)=>{
    debug('replaceStars', comp, options);
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace(re[t.STAR], '');
};
const replaceGTE0 = (comp, options)=>{
    debug('replaceGTE0', comp, options);
    return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '');
};
// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
// TODO build?
const hyphenReplace = (incPr)=>($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr)=>{
        if (isX(fM)) {
            from = '';
        } else if (isX(fm)) {
            from = `>=${fM}.0.0${incPr ? '-0' : ''}`;
        } else if (isX(fp)) {
            from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`;
        } else if (fpr) {
            from = `>=${from}`;
        } else {
            from = `>=${from}${incPr ? '-0' : ''}`;
        }
        if (isX(tM)) {
            to = '';
        } else if (isX(tm)) {
            to = `<${+tM + 1}.0.0-0`;
        } else if (isX(tp)) {
            to = `<${tM}.${+tm + 1}.0-0`;
        } else if (tpr) {
            to = `<=${tM}.${tm}.${tp}-${tpr}`;
        } else if (incPr) {
            to = `<${tM}.${tm}.${+tp + 1}-0`;
        } else {
            to = `<=${to}`;
        }
        return `${from} ${to}`.trim();
    };
const testSet = (set, version, options)=>{
    for(let i = 0; i < set.length; i++){
        if (!set[i].test(version)) {
            return false;
        }
    }
    if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for(let i = 0; i < set.length; i++){
            debug(set[i].semver);
            if (set[i].semver === Comparator.ANY) {
                continue;
            }
            if (set[i].semver.prerelease.length > 0) {
                const allowed = set[i].semver;
                if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
                    return true;
                }
            }
        }
        // Version has a -pre, but it's not one of the ones we like.
        return false;
    }
    return true;
};
}}),
"[project]/node_modules/semver/classes/comparator.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const ANY = Symbol('SemVer ANY');
// hoisted class for cyclic dependency
class Comparator {
    static get ANY() {
        return ANY;
    }
    constructor(comp, options){
        options = parseOptions(options);
        if (comp instanceof Comparator) {
            if (comp.loose === !!options.loose) {
                return comp;
            } else {
                comp = comp.value;
            }
        }
        comp = comp.trim().split(/\s+/).join(' ');
        debug('comparator', comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
            this.value = '';
        } else {
            this.value = this.operator + this.semver.version;
        }
        debug('comp', this);
    }
    parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
            throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== undefined ? m[1] : '';
        if (this.operator === '=') {
            this.operator = '';
        }
        // if it literally is just '>' or '' then allow anything.
        if (!m[2]) {
            this.semver = ANY;
        } else {
            this.semver = new SemVer(m[2], this.options.loose);
        }
    }
    toString() {
        return this.value;
    }
    test(version) {
        debug('Comparator.test', version, this.options.loose);
        if (this.semver === ANY || version === ANY) {
            return true;
        }
        if (typeof version === 'string') {
            try {
                version = new SemVer(version, this.options);
            } catch (er) {
                return false;
            }
        }
        return cmp(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
            throw new TypeError('a Comparator is required');
        }
        if (this.operator === '') {
            if (this.value === '') {
                return true;
            }
            return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === '') {
            if (comp.value === '') {
                return true;
            }
            return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        // Special cases where nothing can possibly be lower
        if (options.includePrerelease && (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {
            return false;
        }
        if (!options.includePrerelease && (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {
            return false;
        }
        // Same direction increasing (> or >=)
        if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
            return true;
        }
        // Same direction decreasing (< or <=)
        if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
            return true;
        }
        // same SemVer and both sides are inclusive (<= or >=)
        if (this.semver.version === comp.semver.version && this.operator.includes('=') && comp.operator.includes('=')) {
            return true;
        }
        // opposite directions less than
        if (cmp(this.semver, '<', comp.semver, options) && this.operator.startsWith('>') && comp.operator.startsWith('<')) {
            return true;
        }
        // opposite directions greater than
        if (cmp(this.semver, '>', comp.semver, options) && this.operator.startsWith('<') && comp.operator.startsWith('>')) {
            return true;
        }
        return false;
    }
}
module.exports = Comparator;
const parseOptions = __turbopack_context__.r("[project]/node_modules/semver/internal/parse-options.js [app-rsc] (ecmascript)");
const { safeRe: re, t } = __turbopack_context__.r("[project]/node_modules/semver/internal/re.js [app-rsc] (ecmascript)");
const cmp = __turbopack_context__.r("[project]/node_modules/semver/functions/cmp.js [app-rsc] (ecmascript)");
const debug = __turbopack_context__.r("[project]/node_modules/semver/internal/debug.js [app-rsc] (ecmascript)");
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
}}),
"[project]/node_modules/semver/functions/satisfies.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
const satisfies = (version, range, options)=>{
    try {
        range = new Range(range, options);
    } catch (er) {
        return false;
    }
    return range.test(version);
};
module.exports = satisfies;
}}),
"[project]/node_modules/semver/ranges/to-comparators.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
// Mostly just for testing and legacy API reasons
const toComparators = (range, options)=>new Range(range, options).set.map((comp)=>comp.map((c)=>c.value).join(' ').trim().split(' '));
module.exports = toComparators;
}}),
"[project]/node_modules/semver/ranges/max-satisfying.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
const maxSatisfying = (versions, range, options)=>{
    let max = null;
    let maxSV = null;
    let rangeObj = null;
    try {
        rangeObj = new Range(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) {
            // satisfies(v, range, options)
            if (!max || maxSV.compare(v) === -1) {
                // compare(max, v, true)
                max = v;
                maxSV = new SemVer(max, options);
            }
        }
    });
    return max;
};
module.exports = maxSatisfying;
}}),
"[project]/node_modules/semver/ranges/min-satisfying.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
const minSatisfying = (versions, range, options)=>{
    let min = null;
    let minSV = null;
    let rangeObj = null;
    try {
        rangeObj = new Range(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) {
            // satisfies(v, range, options)
            if (!min || minSV.compare(v) === 1) {
                // compare(min, v, true)
                min = v;
                minSV = new SemVer(min, options);
            }
        }
    });
    return min;
};
module.exports = minSatisfying;
}}),
"[project]/node_modules/semver/ranges/min-version.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
const gt = __turbopack_context__.r("[project]/node_modules/semver/functions/gt.js [app-rsc] (ecmascript)");
const minVersion = (range, loose)=>{
    range = new Range(range, loose);
    let minver = new SemVer('0.0.0');
    if (range.test(minver)) {
        return minver;
    }
    minver = new SemVer('0.0.0-0');
    if (range.test(minver)) {
        return minver;
    }
    minver = null;
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator)=>{
            // Clone to avoid manipulating the comparator's semver object.
            const compver = new SemVer(comparator.semver.version);
            switch(comparator.operator){
                case '>':
                    if (compver.prerelease.length === 0) {
                        compver.patch++;
                    } else {
                        compver.prerelease.push(0);
                    }
                    compver.raw = compver.format();
                /* fallthrough */ case '':
                case '>=':
                    if (!setMin || gt(compver, setMin)) {
                        setMin = compver;
                    }
                    break;
                case '<':
                case '<=':
                    break;
                /* istanbul ignore next */ default:
                    throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
            minver = setMin;
        }
    }
    if (minver && range.test(minver)) {
        return minver;
    }
    return null;
};
module.exports = minVersion;
}}),
"[project]/node_modules/semver/ranges/valid.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
const validRange = (range, options)=>{
    try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range(range, options).range || '*';
    } catch (er) {
        return null;
    }
};
module.exports = validRange;
}}),
"[project]/node_modules/semver/ranges/outside.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const Comparator = __turbopack_context__.r("[project]/node_modules/semver/classes/comparator.js [app-rsc] (ecmascript)");
const { ANY } = Comparator;
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
const satisfies = __turbopack_context__.r("[project]/node_modules/semver/functions/satisfies.js [app-rsc] (ecmascript)");
const gt = __turbopack_context__.r("[project]/node_modules/semver/functions/gt.js [app-rsc] (ecmascript)");
const lt = __turbopack_context__.r("[project]/node_modules/semver/functions/lt.js [app-rsc] (ecmascript)");
const lte = __turbopack_context__.r("[project]/node_modules/semver/functions/lte.js [app-rsc] (ecmascript)");
const gte = __turbopack_context__.r("[project]/node_modules/semver/functions/gte.js [app-rsc] (ecmascript)");
const outside = (version, range, hilo, options)=>{
    version = new SemVer(version, options);
    range = new Range(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch(hilo){
        case '>':
            gtfn = gt;
            ltefn = lte;
            ltfn = lt;
            comp = '>';
            ecomp = '>=';
            break;
        case '<':
            gtfn = lt;
            ltefn = gte;
            ltfn = gt;
            comp = '<';
            ecomp = '<=';
            break;
        default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    // If it satisfies the range it is not outside
    if (satisfies(version, range, options)) {
        return false;
    }
    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator)=>{
            if (comparator.semver === ANY) {
                comparator = new Comparator('>=0.0.0');
            }
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) {
                high = comparator;
            } else if (ltfn(comparator.semver, low.semver, options)) {
                low = comparator;
            }
        });
        // If the edge version comparator has a operator then our version
        // isn't outside it
        if (high.operator === comp || high.operator === ecomp) {
            return false;
        }
        // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
            return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
            return false;
        }
    }
    return true;
};
module.exports = outside;
}}),
"[project]/node_modules/semver/ranges/gtr.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
// Determine if version is greater than all the versions possible in the range.
const outside = __turbopack_context__.r("[project]/node_modules/semver/ranges/outside.js [app-rsc] (ecmascript)");
const gtr = (version, range, options)=>outside(version, range, '>', options);
module.exports = gtr;
}}),
"[project]/node_modules/semver/ranges/ltr.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const outside = __turbopack_context__.r("[project]/node_modules/semver/ranges/outside.js [app-rsc] (ecmascript)");
// Determine if version is less than all the versions possible in the range
const ltr = (version, range, options)=>outside(version, range, '<', options);
module.exports = ltr;
}}),
"[project]/node_modules/semver/ranges/intersects.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
const intersects = (r1, r2, options)=>{
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2, options);
};
module.exports = intersects;
}}),
"[project]/node_modules/semver/ranges/simplify.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies = __turbopack_context__.r("[project]/node_modules/semver/functions/satisfies.js [app-rsc] (ecmascript)");
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
module.exports = (versions, range, options)=>{
    const set = [];
    let first = null;
    let prev = null;
    const v = versions.sort((a, b)=>compare(a, b, options));
    for (const version of v){
        const included = satisfies(version, range, options);
        if (included) {
            prev = version;
            if (!first) {
                first = version;
            }
        } else {
            if (prev) {
                set.push([
                    first,
                    prev
                ]);
            }
            prev = null;
            first = null;
        }
    }
    if (first) {
        set.push([
            first,
            null
        ]);
    }
    const ranges = [];
    for (const [min, max] of set){
        if (min === max) {
            ranges.push(min);
        } else if (!max && min === v[0]) {
            ranges.push('*');
        } else if (!max) {
            ranges.push(`>=${min}`);
        } else if (min === v[0]) {
            ranges.push(`<=${max}`);
        } else {
            ranges.push(`${min} - ${max}`);
        }
    }
    const simplified = ranges.join(' || ');
    const original = typeof range.raw === 'string' ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
};
}}),
"[project]/node_modules/semver/ranges/subset.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
const Comparator = __turbopack_context__.r("[project]/node_modules/semver/classes/comparator.js [app-rsc] (ecmascript)");
const { ANY } = Comparator;
const satisfies = __turbopack_context__.r("[project]/node_modules/semver/functions/satisfies.js [app-rsc] (ecmascript)");
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true
const subset = (sub, dom, options = {})=>{
    if (sub === dom) {
        return true;
    }
    sub = new Range(sub, options);
    dom = new Range(dom, options);
    let sawNonNull = false;
    OUTER: for (const simpleSub of sub.set){
        for (const simpleDom of dom.set){
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) {
                continue OUTER;
            }
        }
        // the null set is a subset of everything, but null simple ranges in
        // a complex range should be ignored.  so if we saw a non-null range,
        // then we know this isn't a subset, but if EVERY simple range was null,
        // then it is a subset.
        if (sawNonNull) {
            return false;
        }
    }
    return true;
};
const minimumVersionWithPreRelease = [
    new Comparator('>=0.0.0-0')
];
const minimumVersion = [
    new Comparator('>=0.0.0')
];
const simpleSubset = (sub, dom, options)=>{
    if (sub === dom) {
        return true;
    }
    if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
            return true;
        } else if (options.includePrerelease) {
            sub = minimumVersionWithPreRelease;
        } else {
            sub = minimumVersion;
        }
    }
    if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
            return true;
        } else {
            dom = minimumVersion;
        }
    }
    const eqSet = new Set();
    let gt, lt;
    for (const c of sub){
        if (c.operator === '>' || c.operator === '>=') {
            gt = higherGT(gt, c, options);
        } else if (c.operator === '<' || c.operator === '<=') {
            lt = lowerLT(lt, c, options);
        } else {
            eqSet.add(c.semver);
        }
    }
    if (eqSet.size > 1) {
        return null;
    }
    let gtltComp;
    if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
            return null;
        } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
            return null;
        }
    }
    // will iterate one or zero times
    for (const eq of eqSet){
        if (gt && !satisfies(eq, String(gt), options)) {
            return null;
        }
        if (lt && !satisfies(eq, String(lt), options)) {
            return null;
        }
        for (const c of dom){
            if (!satisfies(eq, String(c), options)) {
                return false;
            }
        }
        return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    // if the subset has a prerelease, we need a comparator in the superset
    // with the same tuple and a prerelease, or it's not a subset
    let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
    let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
    // exception: <1.2.3-0 is the same as <1.2.3
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
    }
    for (const c of dom){
        hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>=';
        hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<=';
        if (gt) {
            if (needDomGTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
                    needDomGTPre = false;
                }
            }
            if (c.operator === '>' || c.operator === '>=') {
                higher = higherGT(gt, c, options);
                if (higher === c && higher !== gt) {
                    return false;
                }
            } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {
                return false;
            }
        }
        if (lt) {
            if (needDomLTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
                    needDomLTPre = false;
                }
            }
            if (c.operator === '<' || c.operator === '<=') {
                lower = lowerLT(lt, c, options);
                if (lower === c && lower !== lt) {
                    return false;
                }
            } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {
                return false;
            }
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) {
            return false;
        }
    }
    // if there was a < or >, and nothing in the dom, then must be false
    // UNLESS it was limited by another range in the other direction.
    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
    if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
    }
    if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
    }
    // we needed a prerelease range in a specific tuple, but didn't get one
    // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
    // because it includes prereleases in the 1.2.3 tuple
    if (needDomGTPre || needDomLTPre) {
        return false;
    }
    return true;
};
// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options)=>{
    if (!a) {
        return b;
    }
    const comp = compare(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;
};
// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options)=>{
    if (!a) {
        return b;
    }
    const comp = compare(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;
};
module.exports = subset;
}}),
"[project]/node_modules/semver/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
// just pre-load all the stuff that index.js lazily exports
const internalRe = __turbopack_context__.r("[project]/node_modules/semver/internal/re.js [app-rsc] (ecmascript)");
const constants = __turbopack_context__.r("[project]/node_modules/semver/internal/constants.js [app-rsc] (ecmascript)");
const SemVer = __turbopack_context__.r("[project]/node_modules/semver/classes/semver.js [app-rsc] (ecmascript)");
const identifiers = __turbopack_context__.r("[project]/node_modules/semver/internal/identifiers.js [app-rsc] (ecmascript)");
const parse = __turbopack_context__.r("[project]/node_modules/semver/functions/parse.js [app-rsc] (ecmascript)");
const valid = __turbopack_context__.r("[project]/node_modules/semver/functions/valid.js [app-rsc] (ecmascript)");
const clean = __turbopack_context__.r("[project]/node_modules/semver/functions/clean.js [app-rsc] (ecmascript)");
const inc = __turbopack_context__.r("[project]/node_modules/semver/functions/inc.js [app-rsc] (ecmascript)");
const diff = __turbopack_context__.r("[project]/node_modules/semver/functions/diff.js [app-rsc] (ecmascript)");
const major = __turbopack_context__.r("[project]/node_modules/semver/functions/major.js [app-rsc] (ecmascript)");
const minor = __turbopack_context__.r("[project]/node_modules/semver/functions/minor.js [app-rsc] (ecmascript)");
const patch = __turbopack_context__.r("[project]/node_modules/semver/functions/patch.js [app-rsc] (ecmascript)");
const prerelease = __turbopack_context__.r("[project]/node_modules/semver/functions/prerelease.js [app-rsc] (ecmascript)");
const compare = __turbopack_context__.r("[project]/node_modules/semver/functions/compare.js [app-rsc] (ecmascript)");
const rcompare = __turbopack_context__.r("[project]/node_modules/semver/functions/rcompare.js [app-rsc] (ecmascript)");
const compareLoose = __turbopack_context__.r("[project]/node_modules/semver/functions/compare-loose.js [app-rsc] (ecmascript)");
const compareBuild = __turbopack_context__.r("[project]/node_modules/semver/functions/compare-build.js [app-rsc] (ecmascript)");
const sort = __turbopack_context__.r("[project]/node_modules/semver/functions/sort.js [app-rsc] (ecmascript)");
const rsort = __turbopack_context__.r("[project]/node_modules/semver/functions/rsort.js [app-rsc] (ecmascript)");
const gt = __turbopack_context__.r("[project]/node_modules/semver/functions/gt.js [app-rsc] (ecmascript)");
const lt = __turbopack_context__.r("[project]/node_modules/semver/functions/lt.js [app-rsc] (ecmascript)");
const eq = __turbopack_context__.r("[project]/node_modules/semver/functions/eq.js [app-rsc] (ecmascript)");
const neq = __turbopack_context__.r("[project]/node_modules/semver/functions/neq.js [app-rsc] (ecmascript)");
const gte = __turbopack_context__.r("[project]/node_modules/semver/functions/gte.js [app-rsc] (ecmascript)");
const lte = __turbopack_context__.r("[project]/node_modules/semver/functions/lte.js [app-rsc] (ecmascript)");
const cmp = __turbopack_context__.r("[project]/node_modules/semver/functions/cmp.js [app-rsc] (ecmascript)");
const coerce = __turbopack_context__.r("[project]/node_modules/semver/functions/coerce.js [app-rsc] (ecmascript)");
const Comparator = __turbopack_context__.r("[project]/node_modules/semver/classes/comparator.js [app-rsc] (ecmascript)");
const Range = __turbopack_context__.r("[project]/node_modules/semver/classes/range.js [app-rsc] (ecmascript)");
const satisfies = __turbopack_context__.r("[project]/node_modules/semver/functions/satisfies.js [app-rsc] (ecmascript)");
const toComparators = __turbopack_context__.r("[project]/node_modules/semver/ranges/to-comparators.js [app-rsc] (ecmascript)");
const maxSatisfying = __turbopack_context__.r("[project]/node_modules/semver/ranges/max-satisfying.js [app-rsc] (ecmascript)");
const minSatisfying = __turbopack_context__.r("[project]/node_modules/semver/ranges/min-satisfying.js [app-rsc] (ecmascript)");
const minVersion = __turbopack_context__.r("[project]/node_modules/semver/ranges/min-version.js [app-rsc] (ecmascript)");
const validRange = __turbopack_context__.r("[project]/node_modules/semver/ranges/valid.js [app-rsc] (ecmascript)");
const outside = __turbopack_context__.r("[project]/node_modules/semver/ranges/outside.js [app-rsc] (ecmascript)");
const gtr = __turbopack_context__.r("[project]/node_modules/semver/ranges/gtr.js [app-rsc] (ecmascript)");
const ltr = __turbopack_context__.r("[project]/node_modules/semver/ranges/ltr.js [app-rsc] (ecmascript)");
const intersects = __turbopack_context__.r("[project]/node_modules/semver/ranges/intersects.js [app-rsc] (ecmascript)");
const simplifyRange = __turbopack_context__.r("[project]/node_modules/semver/ranges/simplify.js [app-rsc] (ecmascript)");
const subset = __turbopack_context__.r("[project]/node_modules/semver/ranges/subset.js [app-rsc] (ecmascript)");
module.exports = {
    parse,
    valid,
    clean,
    inc,
    diff,
    major,
    minor,
    patch,
    prerelease,
    compare,
    rcompare,
    compareLoose,
    compareBuild,
    sort,
    rsort,
    gt,
    lt,
    eq,
    neq,
    gte,
    lte,
    cmp,
    coerce,
    Comparator,
    Range,
    satisfies,
    toComparators,
    maxSatisfying,
    minSatisfying,
    minVersion,
    validRange,
    outside,
    gtr,
    ltr,
    intersects,
    simplifyRange,
    subset,
    SemVer,
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants.RELEASE_TYPES,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers
};
}}),
"[project]/node_modules/lodash.includes/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', stringTag = '[object String]', symbolTag = '[object Symbol]';
/** Used to match leading and trailing whitespace. */ var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function arrayMap(array, iteratee) {
    var index = -1, length = array ? array.length : 0, result = Array(length);
    while(++index < length){
        result[index] = iteratee(array[index], index, array);
    }
    return result;
}
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while(fromRight ? index-- : ++index < length){
        if (predicate(array[index], index, array)) {
            return index;
        }
    }
    return -1;
}
/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
    }
    var index = fromIndex - 1, length = array.length;
    while(++index < length){
        if (array[index] === value) {
            return index;
        }
    }
    return -1;
}
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */ function baseIsNaN(value) {
    return value !== value;
}
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n){
        result[index] = iteratee(index);
    }
    return result;
}
/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */ function baseValues(object, props) {
    return arrayMap(props, function(key) {
        return object[key];
    });
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    // Safari 9 makes `arguments.length` enumerable in strict mode.
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for(var key in value){
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
            result.push(key);
        }
    }
    return result;
}
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!isPrototype(object)) {
        return nativeKeys(object);
    }
    var result = [];
    for(var key in Object(object)){
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
        }
    }
    return result;
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */ function includes(collection, value, fromIndex, guard) {
    collection = isArrayLike(collection) ? collection : values(collection);
    fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
    var length = collection.length;
    if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
    }
    return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
}
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ function isArguments(value) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */ function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
}
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
}
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */ function isString(value) {
    return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */ function toFinite(value) {
    if (!value) {
        return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
}
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */ function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == 'number') {
        return value;
    }
    if (isSymbol(value)) {
        return NAN;
    }
    if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
        return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */ function values(object) {
    return object ? baseValues(object, keys(object)) : [];
}
module.exports = includes;
}}),
"[project]/node_modules/lodash.isboolean/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash 3.0.3 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */ /** `Object#toString` result references. */ var boolTag = '[object Boolean]';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */ function isBoolean(value) {
    return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
module.exports = isBoolean;
}}),
"[project]/node_modules/lodash.isinteger/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/** Used to match leading and trailing whitespace. */ var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/**
 * Checks if `value` is an integer.
 *
 * **Note:** This method is based on
 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
 * @example
 *
 * _.isInteger(3);
 * // => true
 *
 * _.isInteger(Number.MIN_VALUE);
 * // => false
 *
 * _.isInteger(Infinity);
 * // => false
 *
 * _.isInteger('3');
 * // => false
 */ function isInteger(value) {
    return typeof value == 'number' && value == toInteger(value);
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */ function toFinite(value) {
    if (!value) {
        return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
}
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */ function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == 'number') {
        return value;
    }
    if (isSymbol(value)) {
        return NAN;
    }
    if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
        return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
module.exports = isInteger;
}}),
"[project]/node_modules/lodash.isnumber/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash 3.0.3 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */ /** `Object#toString` result references. */ var numberTag = '[object Number]';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
 * as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */ function isNumber(value) {
    return typeof value == 'number' || isObjectLike(value) && objectToString.call(value) == numberTag;
}
module.exports = isNumber;
}}),
"[project]/node_modules/lodash.isplainobject/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** `Object#toString` result references. */ var objectTag = '[object Object]';
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */ function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
        try {
            result = !!(value + '');
        } catch (e) {}
    }
    return result;
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/** Built-in value references. */ var getPrototype = overArg(Object.getPrototypeOf, Object);
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */ function isPlainObject(value) {
    if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
        return true;
    }
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
module.exports = isPlainObject;
}}),
"[project]/node_modules/lodash.isstring/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */ /** `Object#toString` result references. */ var stringTag = '[object String]';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */ function isString(value) {
    return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
}
module.exports = isString;
}}),
"[project]/node_modules/lodash.once/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as the `TypeError` message for "Functions" methods. */ var FUNC_ERROR_TEXT = 'Expected a function';
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/** Used to match leading and trailing whitespace. */ var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {number} n The number of calls at which `func` is no longer invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */ function before(n, func) {
    var result;
    if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
    }
    n = toInteger(n);
    return function() {
        if (--n > 0) {
            result = func.apply(this, arguments);
        }
        if (n <= 1) {
            func = undefined;
        }
        return result;
    };
}
/**
 * Creates a function that is restricted to invoking `func` once. Repeat calls
 * to the function return the value of the first invocation. The `func` is
 * invoked with the `this` binding and arguments of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var initialize = _.once(createApplication);
 * initialize();
 * initialize();
 * // => `createApplication` is invoked once
 */ function once(func) {
    return before(2, func);
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */ function toFinite(value) {
    if (!value) {
        return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
}
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */ function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == 'number') {
        return value;
    }
    if (isSymbol(value)) {
        return NAN;
    }
    if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
        return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
module.exports = once;
}}),
"[project]/node_modules/uuid/dist/esm-node/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
;
;
;
;
;
;
;
;
}}),
"[project]/node_modules/uuid/dist/esm-node/index.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/uuid/dist/esm-node/rng.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>rng)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$crypto__$5b$external$5d$__$28$crypto$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/crypto [external] (crypto, cjs)");
;
const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate
let poolPtr = rnds8Pool.length;
function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
        __TURBOPACK__imported__module__$5b$externals$5d2f$crypto__$5b$external$5d$__$28$crypto$2c$__cjs$29$__["default"].randomFillSync(rnds8Pool);
        poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
}}),
"[project]/node_modules/uuid/dist/esm-node/regex.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
}}),
"[project]/node_modules/uuid/dist/esm-node/validate.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$regex$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/regex.js [app-rsc] (ecmascript)");
;
function validate(uuid) {
    return typeof uuid === 'string' && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$regex$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].test(uuid);
}
const __TURBOPACK__default__export__ = validate;
}}),
"[project]/node_modules/uuid/dist/esm-node/stringify.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__),
    "unsafeStringify": (()=>unsafeStringify)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/validate.js [app-rsc] (ecmascript)");
;
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ const byteToHex = [];
for(let i = 0; i < 256; ++i){
    byteToHex.push((i + 0x100).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}
function stringify(arr, offset = 0) {
    const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(uuid)) {
        throw TypeError('Stringified UUID is invalid');
    }
    return uuid;
}
const __TURBOPACK__default__export__ = stringify;
}}),
"[project]/node_modules/uuid/dist/esm-node/v1.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$rng$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/rng.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$stringify$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/stringify.js [app-rsc] (ecmascript)"); // **`v1()` - Generate time-based UUID**
;
;
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;
let _clockseq; // Previous uuid creation time
let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details
function v1(options, buf, offset) {
    let i = buf && offset || 0;
    const b = buf || new Array(16);
    options = options || {};
    let node = options.node || _nodeId;
    let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$rng$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])();
        if (node == null) {
            // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
            node = _nodeId = [
                seedBytes[0] | 0x01,
                seedBytes[1],
                seedBytes[2],
                seedBytes[3],
                seedBytes[4],
                seedBytes[5]
            ];
        }
        if (clockseq == null) {
            // Per 4.2.2, randomize (14 bit) clockseq
            clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)
    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
    } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
    } // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000; // `time_low`
    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff; // `time_mid`
    const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff; // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`
    b[i++] = clockseq & 0xff; // `node`
    for(let n = 0; n < 6; ++n){
        b[i + n] = node[n];
    }
    return buf || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$stringify$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unsafeStringify"])(b);
}
const __TURBOPACK__default__export__ = v1;
}}),
"[project]/node_modules/uuid/dist/esm-node/parse.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/validate.js [app-rsc] (ecmascript)");
;
function parse(uuid) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(uuid)) {
        throw TypeError('Invalid UUID');
    }
    let v;
    const arr = new Uint8Array(16); // Parse ########-....-....-....-............
    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 0xff;
    arr[2] = v >>> 8 & 0xff;
    arr[3] = v & 0xff; // Parse ........-####-....-....-............
    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 0xff; // Parse ........-....-####-....-............
    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 0xff; // Parse ........-....-....-####-............
    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 0xff; // Parse ........-....-....-....-############
    // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)
    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
    arr[11] = v / 0x100000000 & 0xff;
    arr[12] = v >>> 24 & 0xff;
    arr[13] = v >>> 16 & 0xff;
    arr[14] = v >>> 8 & 0xff;
    arr[15] = v & 0xff;
    return arr;
}
const __TURBOPACK__default__export__ = parse;
}}),
"[project]/node_modules/uuid/dist/esm-node/v35.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DNS": (()=>DNS),
    "URL": (()=>URL),
    "default": (()=>v35)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$stringify$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/stringify.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$parse$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/parse.js [app-rsc] (ecmascript)");
;
;
function stringToBytes(str) {
    str = unescape(encodeURIComponent(str)); // UTF8 escape
    const bytes = [];
    for(let i = 0; i < str.length; ++i){
        bytes.push(str.charCodeAt(i));
    }
    return bytes;
}
const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
function v35(name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
        var _namespace;
        if (typeof value === 'string') {
            value = stringToBytes(value);
        }
        if (typeof namespace === 'string') {
            namespace = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$parse$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(namespace);
        }
        if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
            throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
        } // Compute hash of namespace and value, Per 4.3
        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
        // hashfunc([...namespace, ... value])`
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 0x0f | version;
        bytes[8] = bytes[8] & 0x3f | 0x80;
        if (buf) {
            offset = offset || 0;
            for(let i = 0; i < 16; ++i){
                buf[offset + i] = bytes[i];
            }
            return buf;
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$stringify$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unsafeStringify"])(bytes);
    } // Function#name is not settable on some platforms (#270)
    try {
        generateUUID.name = name; // eslint-disable-next-line no-empty
    } catch (err) {} // For CommonJS default export support
    generateUUID.DNS = DNS;
    generateUUID.URL = URL;
    return generateUUID;
}
}}),
"[project]/node_modules/uuid/dist/esm-node/md5.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$crypto__$5b$external$5d$__$28$crypto$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/crypto [external] (crypto, cjs)");
;
function md5(bytes) {
    if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
    } else if (typeof bytes === 'string') {
        bytes = Buffer.from(bytes, 'utf8');
    }
    return __TURBOPACK__imported__module__$5b$externals$5d2f$crypto__$5b$external$5d$__$28$crypto$2c$__cjs$29$__["default"].createHash('md5').update(bytes).digest();
}
const __TURBOPACK__default__export__ = md5;
}}),
"[project]/node_modules/uuid/dist/esm-node/v3.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v35$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/v35.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$md5$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/md5.js [app-rsc] (ecmascript)");
;
;
const v3 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v35$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])('v3', 0x30, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$md5$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]);
const __TURBOPACK__default__export__ = v3;
}}),
"[project]/node_modules/uuid/dist/esm-node/native.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$crypto__$5b$external$5d$__$28$crypto$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/crypto [external] (crypto, cjs)");
;
const __TURBOPACK__default__export__ = {
    randomUUID: __TURBOPACK__imported__module__$5b$externals$5d2f$crypto__$5b$external$5d$__$28$crypto$2c$__cjs$29$__["default"].randomUUID
};
}}),
"[project]/node_modules/uuid/dist/esm-node/v4.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$native$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/native.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$rng$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/rng.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$stringify$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/stringify.js [app-rsc] (ecmascript)");
;
;
;
function v4(options, buf, offset) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$native$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].randomUUID && !buf && !options) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$native$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].randomUUID();
    }
    options = options || {};
    const rnds = options.random || (options.rng || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$rng$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(let i = 0; i < 16; ++i){
            buf[offset + i] = rnds[i];
        }
        return buf;
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$stringify$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unsafeStringify"])(rnds);
}
const __TURBOPACK__default__export__ = v4;
}}),
"[project]/node_modules/uuid/dist/esm-node/sha1.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$crypto__$5b$external$5d$__$28$crypto$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/crypto [external] (crypto, cjs)");
;
function sha1(bytes) {
    if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
    } else if (typeof bytes === 'string') {
        bytes = Buffer.from(bytes, 'utf8');
    }
    return __TURBOPACK__imported__module__$5b$externals$5d2f$crypto__$5b$external$5d$__$28$crypto$2c$__cjs$29$__["default"].createHash('sha1').update(bytes).digest();
}
const __TURBOPACK__default__export__ = sha1;
}}),
"[project]/node_modules/uuid/dist/esm-node/v5.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v35$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/v35.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$sha1$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/sha1.js [app-rsc] (ecmascript)");
;
;
const v5 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v35$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])('v5', 0x50, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$sha1$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]);
const __TURBOPACK__default__export__ = v5;
}}),
"[project]/node_modules/uuid/dist/esm-node/nil.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = '00000000-0000-0000-0000-000000000000';
}}),
"[project]/node_modules/uuid/dist/esm-node/version.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/validate.js [app-rsc] (ecmascript)");
;
function version(uuid) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(uuid)) {
        throw TypeError('Invalid UUID');
    }
    return parseInt(uuid.slice(14, 15), 16);
}
const __TURBOPACK__default__export__ = version;
}}),
"[project]/node_modules/uuid/dist/esm-node/index.js [app-rsc] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "NIL": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$nil$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]),
    "parse": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$parse$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]),
    "stringify": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$stringify$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]),
    "v1": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v1$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]),
    "v3": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v3$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]),
    "v4": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v4$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]),
    "v5": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v5$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]),
    "validate": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]),
    "version": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$version$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v1$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/v1.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v3$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/v3.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v4$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/v4.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v5$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/v5.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$nil$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/nil.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$version$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/version.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/validate.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$stringify$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/stringify.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$parse$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/parse.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/uuid/dist/esm-node/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "NIL": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["NIL"]),
    "parse": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["parse"]),
    "stringify": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["stringify"]),
    "v1": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["v1"]),
    "v3": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["v3"]),
    "v4": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["v4"]),
    "v5": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["v5"]),
    "validate": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["validate"]),
    "version": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["version"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-node/index.js [app-rsc] (ecmascript) <exports>");
}}),
"[project]/node_modules/debug/src/common.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = __turbopack_context__.r("[project]/node_modules/ms/index.js [app-rsc] (ecmascript)");
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) {
                return;
            }
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== 'string') {
                // Anything else let's inspect with %O
                args.unshift('%O');
            }
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === '%%') {
                    return '%';
                }
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === 'function') {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, 'enabled', {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) {
                    return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === 'function') {
            createDebug.init(debug);
        }
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === 'string' ? namespaces : '').trim().replace(/\s+/g, ',').split(',').filter(Boolean);
        for (const ns of split){
            if (ns[0] === '-') {
                createDebug.skips.push(ns.slice(1));
            } else {
                createDebug.names.push(ns);
            }
        }
    }
    /**
	 * Checks if the given string matches a namespace template, honoring
	 * asterisks as wildcards.
	 *
	 * @param {String} search
	 * @param {String} template
	 * @return {Boolean}
	 */ function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while(searchIndex < search.length){
            if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {
                // Match character or proceed with wildcard
                if (template[templateIndex] === '*') {
                    starIndex = templateIndex;
                    matchIndex = searchIndex;
                    templateIndex++; // Skip the '*'
                } else {
                    searchIndex++;
                    templateIndex++;
                }
            } else if (starIndex !== -1) {
                // Backtrack to the last '*' and try to match more characters
                templateIndex = starIndex + 1;
                matchIndex++;
                searchIndex = matchIndex;
            } else {
                return false; // No match
            }
        }
        // Handle trailing '*' in template
        while(templateIndex < template.length && template[templateIndex] === '*'){
            templateIndex++;
        }
        return templateIndex === template.length;
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names,
            ...createDebug.skips.map((namespace)=>'-' + namespace)
        ].join(',');
        createDebug.enable('');
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        for (const skip of createDebug.skips){
            if (matchesTemplate(name, skip)) {
                return false;
            }
        }
        for (const ns of createDebug.names){
            if (matchesTemplate(name, ns)) {
                return true;
            }
        }
        return false;
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) {
            return val.stack || val.message;
        }
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = setup;
}}),
"[project]/node_modules/debug/src/node.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * Module dependencies.
 */ const tty = __turbopack_context__.r("[externals]/tty [external] (tty, cjs)");
const util = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
/**
 * This is the Node.js implementation of `debug()`.
 */ exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(()=>{}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
/**
 * Colors.
 */ exports.colors = [
    6,
    2,
    3,
    4,
    5,
    1
];
try {
    // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    // eslint-disable-next-line import/no-extraneous-dependencies
    const supportsColor = __turbopack_context__.r("[project]/node_modules/supports-color/index.js [app-rsc] (ecmascript)");
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
            20,
            21,
            26,
            27,
            32,
            33,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            56,
            57,
            62,
            63,
            68,
            69,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            92,
            93,
            98,
            99,
            112,
            113,
            128,
            129,
            134,
            135,
            148,
            149,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            178,
            179,
            184,
            185,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            214,
            215,
            220,
            221
        ];
    }
} catch (error) {
// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}
/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */ exports.inspectOpts = Object.keys(process.env).filter((key)=>{
    return /^debug_/i.test(key);
}).reduce((obj, key)=>{
    // Camel-case
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k)=>{
        return k.toUpperCase();
    });
    // Coerce string value into JS value
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
    } else if (val === 'null') {
        val = null;
    } else {
        val = Number(val);
    }
    obj[prop] = val;
    return obj;
}, {});
/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */ function useColors() {
    return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
}
/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    const { namespace: name, useColors } = this;
    if (useColors) {
        const c = this.color;
        const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
        const prefix = `  ${colorCode};1m${name} \u001B[0m`;
        args[0] = prefix + args[0].split('\n').join('\n' + prefix);
        args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
    } else {
        args[0] = getDate() + name + ' ' + args[0];
    }
}
function getDate() {
    if (exports.inspectOpts.hideDate) {
        return '';
    }
    return new Date().toISOString() + ' ';
}
/**
 * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
 */ function log(...args) {
    return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + '\n');
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    if (namespaces) {
        process.env.DEBUG = namespaces;
    } else {
        // If you set a process.env field to null or undefined, it gets cast to the
        // string 'null' or 'undefined'. Just delete instead.
        delete process.env.DEBUG;
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    return process.env.DEBUG;
}
/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */ function init(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for(let i = 0; i < keys.length; i++){
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
}
module.exports = __turbopack_context__.r("[project]/node_modules/debug/src/common.js [app-rsc] (ecmascript)")(exports);
const { formatters } = module.exports;
/**
 * Map %o to `util.inspect()`, all on a single line.
 */ formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split('\n').map((str)=>str.trim()).join(' ');
};
/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */ formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
};
}}),
"[project]/node_modules/debug/src/browser.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
        }
    };
})();
/**
 * Colors.
 */ exports.colors = [
    '#0000CC',
    '#0000FF',
    '#0033CC',
    '#0033FF',
    '#0066CC',
    '#0066FF',
    '#0099CC',
    '#0099FF',
    '#00CC00',
    '#00CC33',
    '#00CC66',
    '#00CC99',
    '#00CCCC',
    '#00CCFF',
    '#3300CC',
    '#3300FF',
    '#3333CC',
    '#3333FF',
    '#3366CC',
    '#3366FF',
    '#3399CC',
    '#3399FF',
    '#33CC00',
    '#33CC33',
    '#33CC66',
    '#33CC99',
    '#33CCCC',
    '#33CCFF',
    '#6600CC',
    '#6600FF',
    '#6633CC',
    '#6633FF',
    '#66CC00',
    '#66CC33',
    '#9900CC',
    '#9900FF',
    '#9933CC',
    '#9933FF',
    '#99CC00',
    '#99CC33',
    '#CC0000',
    '#CC0033',
    '#CC0066',
    '#CC0099',
    '#CC00CC',
    '#CC00FF',
    '#CC3300',
    '#CC3333',
    '#CC3366',
    '#CC3399',
    '#CC33CC',
    '#CC33FF',
    '#CC6600',
    '#CC6633',
    '#CC9900',
    '#CC9933',
    '#CCCC00',
    '#CCCC33',
    '#FF0000',
    '#FF0033',
    '#FF0066',
    '#FF0099',
    '#FF00CC',
    '#FF00FF',
    '#FF3300',
    '#FF3333',
    '#FF3366',
    '#FF3399',
    '#FF33CC',
    '#FF33FF',
    '#FF6600',
    '#FF6633',
    '#FF9900',
    '#FF9933',
    '#FFCC00',
    '#FFCC33'
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
    }
    let m;
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    // eslint-disable-next-line no-return-assign
    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
    if (!this.useColors) {
        return;
    }
    const c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === '%%') {
            return;
        }
        index++;
        if (match === '%c') {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
        }
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (namespaces) {
            exports.storage.setItem('debug', namespaces);
        } else {
            exports.storage.removeItem('debug');
        }
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    let r;
    try {
        r = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG');
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
    }
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
module.exports = __turbopack_context__.r("[project]/node_modules/debug/src/common.js [app-rsc] (ecmascript)")(exports);
const { formatters } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return '[UnexpectedJSONParseError]: ' + error.message;
    }
};
}}),
"[project]/node_modules/debug/src/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */ if (typeof process === 'undefined' || process.type === 'renderer' || ("TURBOPACK compile-time value", false) === true || process.__nwjs) {
    module.exports = __turbopack_context__.r("[project]/node_modules/debug/src/browser.js [app-rsc] (ecmascript)");
} else {
    module.exports = __turbopack_context__.r("[project]/node_modules/debug/src/node.js [app-rsc] (ecmascript)");
}
}}),
"[project]/node_modules/has-flag/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
module.exports = (flag, argv = process.argv)=>{
    const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
    const position = argv.indexOf(prefix + flag);
    const terminatorPosition = argv.indexOf('--');
    return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};
}}),
"[project]/node_modules/supports-color/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const os = __turbopack_context__.r("[externals]/os [external] (os, cjs)");
const tty = __turbopack_context__.r("[externals]/tty [external] (tty, cjs)");
const hasFlag = __turbopack_context__.r("[project]/node_modules/has-flag/index.js [app-rsc] (ecmascript)");
const { env } = process;
let forceColor;
if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false') || hasFlag('color=never')) {
    forceColor = 0;
} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
    forceColor = 1;
}
if ('FORCE_COLOR' in env) {
    if (env.FORCE_COLOR === 'true') {
        forceColor = 1;
    } else if (env.FORCE_COLOR === 'false') {
        forceColor = 0;
    } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    }
}
function translateLevel(level) {
    if (level === 0) {
        return false;
    }
    return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
    };
}
function supportsColor(haveStream, streamIsTTY) {
    if (forceColor === 0) {
        return 0;
    }
    if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
        return 3;
    }
    if (hasFlag('color=256')) {
        return 2;
    }
    if (haveStream && !streamIsTTY && forceColor === undefined) {
        return 0;
    }
    const min = forceColor || 0;
    if (env.TERM === 'dumb') {
        return min;
    }
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    if ('CI' in env) {
        if ([
            'TRAVIS',
            'CIRCLECI',
            'APPVEYOR',
            'GITLAB_CI',
            'GITHUB_ACTIONS',
            'BUILDKITE'
        ].some((sign)=>sign in env) || env.CI_NAME === 'codeship') {
            return 1;
        }
        return min;
    }
    if ('TEAMCITY_VERSION' in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === 'truecolor') {
        return 3;
    }
    if ('TERM_PROGRAM' in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
        switch(env.TERM_PROGRAM){
            case 'iTerm.app':
                return version >= 3 ? 3 : 2;
            case 'Apple_Terminal':
                return 2;
        }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
    }
    if ('COLORTERM' in env) {
        return 1;
    }
    return min;
}
function getSupportLevel(stream) {
    const level = supportsColor(stream, stream && stream.isTTY);
    return translateLevel(level);
}
module.exports = {
    supportsColor: getSupportLevel,
    stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};
}}),
"[project]/node_modules/@vonage/auth/dist/lib/enums/AlgroithmTypes.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AlgorithmTypes = void 0;
/**
 * Enumeration of supported algorithm types for HMAC hashing.
 *
 * @remarks
 * Ensure to select an algorithm that adheres to your security
 * requirements and is supported by the API endpoint you're interacting with.
 */ var AlgorithmTypes;
(function(AlgorithmTypes) {
    /** Represents the MD5 hash algorithm */ AlgorithmTypes["md5hash"] = "MD5HASH";
    /** Represents the HMAC-MD5 hash algorithm, which uses a secret key for hashing. */ AlgorithmTypes["md5hmac"] = "MD5HMAC";
    /** Represents the HMAC-SHA1 hash algorithm, which uses a secret key for hashing. */ AlgorithmTypes["sha1hmac"] = "SHA1HMAC";
    /** Represents the HMAC-SHA256 hash algorithm, which uses a secret key for hashing. */ AlgorithmTypes["sha256hmac"] = "SHA256HMAC";
    /** Represents the HMAC-SHA512 hash algorithm, which uses a secret key for hashing. */ AlgorithmTypes["sha512hmac"] = "SHA512HMAC";
})(AlgorithmTypes || (exports.AlgorithmTypes = AlgorithmTypes = {})); //# sourceMappingURL=AlgroithmTypes.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/enums/AlgroithmTypes.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/errors/InvalidApiKeyError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidApiKeyError = void 0;
/**
 * Error class representing a specific error scenario where an API key is
 * provided but is not a valid string.
 *
 * This error is thrown when an API request is made with an API key that
 * does not meet the expected format or type (string).
 *
 * @extends {Error}
 */ class InvalidApiKeyError extends Error {
    constructor(){
        super('API Key must be a string');
    }
}
exports.InvalidApiKeyError = InvalidApiKeyError; //# sourceMappingURL=InvalidApiKeyError.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/errors/InvalidApiSecretError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidApiSecretError = void 0;
/**
 * Error class representing a specific error scenario where an API secret is
 * provided but is not a valid string.
 *
 * This error is thrown when an API request is made with an API secret that
 * does not meet the expected format or type (string).
 *
 * @extends {Error}
 */ class InvalidApiSecretError extends Error {
    constructor(){
        super('API Secret must be a string');
    }
}
exports.InvalidApiSecretError = InvalidApiSecretError; //# sourceMappingURL=InvalidApiSecretError.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/errors/InvalidSignatureAlgroithmError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidSignatureAlgorithmError = void 0;
/**
 * Error class representing a specific error scenario where an invalid
 * signature algorithm is provided.
 *
 * This error is thrown when an API request is made with a signature
 * algorithm that is not supported or recognized.
 *
 * @extends {Error}
 */ class InvalidSignatureAlgorithmError extends Error {
    constructor(){
        super('Invalid Signature algorithm');
    }
}
exports.InvalidSignatureAlgorithmError = InvalidSignatureAlgorithmError; //# sourceMappingURL=InvalidSignatureAlgroithmError.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/errors/MissingApiKeyError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MissingApiKeyError = void 0;
/**
 * Error class representing a specific error scenario where an API key is
 * missing in the request.
 *
 * This error is thrown when an API request is made without providing the
 * necessary API key for authentication.
 *
 * @extends {Error}
 */ class MissingApiKeyError extends Error {
    constructor(){
        super('Missing API Key');
    }
}
exports.MissingApiKeyError = MissingApiKeyError; //# sourceMappingURL=MissingApiKeyError.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/errors/MissingApiSecretError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MissingApiSecretError = void 0;
/**
 * Error class representing a specific error scenario where an API secret is
 * missing in the request.
 *
 * This error is thrown when an API request is made without providing the
 * necessary API secret for authentication.
 *
 * @extends {Error}
 */ class MissingApiSecretError extends Error {
    constructor(){
        super('Missing API Secret');
    }
}
exports.MissingApiSecretError = MissingApiSecretError; //# sourceMappingURL=MissingApiSecretError.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/errors/MissingSignatureError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MissingSignatureError = void 0;
/**
 * Error class representing a specific error scenario where a signature
 * algorithm is expected but missing in the request.
 *
 * This error is thrown when an API request is made without providing the
 * necessary signature algorithm for authentication.
 *
 * Users should select a value from the AlgorithmTypes enum.
 *
 * @extends {Error}
 */ class MissingSignatureError extends Error {
    constructor(){
        super('Missing signature algorithm');
    }
}
exports.MissingSignatureError = MissingSignatureError; //# sourceMappingURL=MissingSignatureError.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/errors/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/errors/InvalidApiKeyError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/errors/InvalidApiSecretError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/errors/InvalidSignatureAlgroithmError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/errors/MissingApiKeyError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/errors/MissingApiSecretError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/errors/MissingSignatureError.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/auth.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Auth = void 0;
const jwt_1 = __turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/index.js [app-rsc] (ecmascript)");
const crypto_1 = __turbopack_context__.r("[externals]/crypto [external] (crypto, cjs)");
const fs_1 = __turbopack_context__.r("[externals]/fs [external] (fs, cjs)");
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/enums/index.js [app-rsc] (ecmascript)");
const errors_1 = __turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/errors/index.js [app-rsc] (ecmascript)");
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-rsc] (ecmascript)"));
const log = (0, debug_1.default)('vonage:auth');
/**
 * Authentication class used for generating Authentication headers and query parameters.
 *
 * @remarks
 * This client is only available as a standalone client. It cannot be
 * instantiated from the server-sdk package.
 *
 * @example
 * Create a standard authentication object.
 *
 * ```ts
 * import { Auth } from '@vonage/auth';
 *
 * const auth = new Auth({
 *   apiKey: VONAGE_API_KEY,
 *   apiSecret: VONAGE_API_SECRET,
 *   applicationId: VONAGE_APPLICATION_ID,
 *   privateKey: VONAGE_APPLICATION_PRIVATE_KEY_PATH,
 * });
 * ```
 */ class Auth {
    /**
     * @property {string} apiKey - The API key used for authentication.
     */ apiKey;
    /**
     * @property {string} apiSecret - The API secret used for authentication.
     */ apiSecret;
    /**
     * @property {string | null} [privateKey] - The private key used for JWT
     *     authentication, either as a string or read from a file.
     */ privateKey;
    /**
     * @property {string | null} [applicationId] - The application ID used for
     *     JWT authentication.
     */ applicationId;
    /**
     * @property {SignedHashParams | null} [signature] - The signature parameters
     *     used for signature authentication.
     */ signature;
    /**
     * @property {GeneratorOptions} jwtOptions - Options used for generating JWTs.
     */ jwtOptions;
    constructor(opts){
        this.apiKey = opts?.apiKey || '';
        this.apiSecret = opts?.apiSecret || '';
        this.signature = opts?.signature || null;
        this.applicationId = opts?.applicationId || null;
        this.jwtOptions = opts?.jwtOptions || {};
        let privateKey = opts?.privateKey;
        if ((0, fs_1.existsSync)(opts?.privateKey)) {
            log('Reading private key file');
            privateKey = (0, fs_1.readFileSync)(opts?.privateKey).toString();
        }
        this.privateKey = privateKey instanceof Buffer ? privateKey.toString() : privateKey;
    }
    /**
     * Generates query parameters for authentication, optionally merging with
     * provided parameters.
     *
     *
     * @param {T} [params] - Additional parameters to merge with the
     *     generated authentication query parameters.
     *
     * @return {Promise<AuthQueryParams>} - A promise that resolves
     *     with the merged authentication query parameters.
     *
     * @throws {MissingApiKeyError} - Thrown when the API key is missing.
     * @throws {MissingApiSecretError} - Thrown when the API secret is missing.
     * @throws {InvalidApiKeyError} - Thrown when the API key is not a valid string.
     * @throws {InvalidApiSecretError} - Thrown when the API secret is not a valid string.
     *
     * @example
     * Generate query parameters
     *
     * ```ts
     * const queryParams = await auth.getQueryParams();
     * ```
     *
     * @example
     * Generate query parameters and merge with additional Parameters
     *
     * ```ts
     * const queryParams = await auth.getQueryParams({
     *   to: '15555555555',
     *   from: '15555555556',
     *   text: 'Hello from Vonage SMS API'
     * });
     * ```
     */ getQueryParams = async (params)=>{
        if (!this.apiKey) {
            throw new errors_1.MissingApiKeyError();
        }
        if (!this.apiSecret) {
            throw new errors_1.MissingApiSecretError();
        }
        if (typeof this.apiKey !== 'string') {
            throw new errors_1.InvalidApiKeyError();
        }
        if (typeof this.apiSecret !== 'string') {
            throw new errors_1.InvalidApiSecretError();
        }
        return {
            ...params,
            api_key: this.apiKey,
            api_secret: this.apiSecret
        };
    };
    /**
     * Generates a basic authentication header.
     *
     * @return {Promise<string>} - A promise that resolves with the
     *     generated basic authentication header.
     *
     * @throws {MissingApiKeyError} - Thrown when the API key is missing.
     * @throws {MissingApiSecretError} - Thrown when the API secret is missing.
     * @throws {InvalidApiKeyError} - Thrown when the API key is not a valid string.
     * @throws {InvalidApiSecretError} - Thrown when the API secret is not a valid string.
     *
     * @example
     * Generate a basic authentication headers
     *
     * ```ts
     * const basicAuthHeader = await auth.createBasicHeader();
     * ```
     */ createBasicHeader = async ()=>{
        log('Creating basic auth header');
        if (!this.apiKey) {
            throw new errors_1.MissingApiKeyError();
        }
        if (!this.apiSecret) {
            throw new errors_1.MissingApiSecretError();
        }
        if (typeof this.apiKey !== 'string') {
            throw new errors_1.InvalidApiKeyError();
        }
        if (typeof this.apiSecret !== 'string') {
            throw new errors_1.InvalidApiSecretError();
        }
        const buf = Buffer.from(`${this.apiKey}:${this.apiSecret}`);
        return `Basic ${buf.toString('base64')}`;
    };
    /**
     * Generates a bearer authentication header.
     *
     * @return {Promise<string>} - A promise that resolves with the
     *     generated bearer authentication header.
     *
     * @example
     * Generate a bearer authentication headers
     *
     * ```ts
     * const bearerAuthHeader = await auth.createBearerHeader();
     * ```
     */ createBearerHeader = async ()=>{
        log('Creating bearer header');
        return `Bearer ${(0, jwt_1.tokenGenerate)(this.applicationId || '', this.privateKey || '', this.jwtOptions)}`;
    };
    /**
     * Generates a signature hash for authentication, merging it with
     * provided parameters.
     *
     * @template T - Type of the parameters to merge with.
     * @param {T} params - Parameters to merge with the generated
     *     signature hash.
     * @return {Promise<AuthSignedParams>} - A promise that resolves
     *     with the merged signature hash and parameters.
     *
     * @throws {MissingApiKeyError} - Thrown when the API key is missing.
     * @throws {InvalidApiKeyError} - Thrown when the API key is not a valid string.
     * @throws {MissingSignatureError} - Thrown when the signature algorithm is missing.
     * @throws {MissingApiSecretError} - Thrown when the API secret is missing.
     * @throws {InvalidApiSecretError} - Thrown when the API secret is not a valid string.
     * @throws {InvalidSignatureAlgorithmError} - Thrown when an invalid signature algorithm is provided.
     *
     * @example
     * Generate a signature hash
     *
     * ```ts
     * const signatureHash = await auth.createSignatureHash({
     *   to: '15555555555',
     *   from: '15555555556',
     *   text: 'Hello from Vonage SMS API',
     *   timestamp: '1516878400',
     *   sig: 'a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6',
     * });
     * ```
     */ createSignatureHash = async (params)=>{
        log('Creating signature hash');
        if (!this.apiKey) {
            throw new errors_1.MissingApiKeyError();
        }
        if (typeof this.apiKey !== 'string') {
            throw new errors_1.InvalidApiKeyError();
        }
        if (!this.signature?.algorithm) {
            throw new errors_1.MissingSignatureError();
        }
        if (!this.signature?.secret) {
            throw new errors_1.MissingApiSecretError();
        }
        if (typeof this.signature?.secret !== 'string') {
            throw new errors_1.InvalidApiSecretError();
        }
        const returnParams = {
            ...params,
            api_key: this.apiKey
        };
        // Add the current timestamp to the parameters list with the key
        // 'timestamp'. This should be an integer containing the number of seconds
        // since the epoch (UNIX time))
        if (!returnParams.timestamp) {
            returnParams.timestamp = Math.floor(Date.now() / 1000).toString();
        }
        const sortedParams = new URLSearchParams(returnParams);
        sortedParams.sort();
        const stringifiedParamsforSigning = sortedParams.toString().replace(/(&|=)/gi, '_');
        switch(this.signature.algorithm){
            case enums_1.AlgorithmTypes.md5hash:
                returnParams.sig = (0, crypto_1.createHash)('md5').update(`${stringifiedParamsforSigning}${this.signature.secret}`).digest('hex');
                break;
            case enums_1.AlgorithmTypes.md5hmac:
                returnParams.sig = (0, crypto_1.createHmac)('md5', this.signature.secret).update(stringifiedParamsforSigning).digest('hex');
                break;
            case enums_1.AlgorithmTypes.sha1hmac:
                returnParams.sig = (0, crypto_1.createHmac)('sha1', this.signature.secret).update(stringifiedParamsforSigning).digest('hex');
                break;
            case enums_1.AlgorithmTypes.sha256hmac:
                returnParams.sig = (0, crypto_1.createHmac)('sha256', this.signature.secret).update(stringifiedParamsforSigning).digest('hex');
                break;
            case enums_1.AlgorithmTypes.sha512hmac:
                returnParams.sig = (0, crypto_1.createHmac)('sha512', this.signature.secret).update(stringifiedParamsforSigning).digest('hex');
                break;
            default:
                throw new errors_1.InvalidSignatureAlgorithmError();
        }
        return returnParams;
    };
}
exports.Auth = Auth; //# sourceMappingURL=auth.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/interfaces/AuthInterface.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AuthInterface.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/interfaces/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/interfaces/AuthInterface.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/types/AuthParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AuthParams.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/types/AuthQueryParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AuthQueryParams.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/types/AuthSignedParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AuthSignedParams.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/types/SignedHashParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SignedHashParams.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/types/AuthParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/types/AuthQueryParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/types/AuthSignedParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/types/SignedHashParams.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/auth/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/auth.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/errors/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/interfaces/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/types/headers.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=headers.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/types/vetchOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=vetchOptions.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/types/vetchPromise.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=vetchPromise.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/types/vetchResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=vetchResponse.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/types/headers.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/types/vetchOptions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/types/vetchPromise.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/types/vetchResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/enums/HTTPMethods.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HTTPMethods = void 0;
/**
 * Enum representing the HTTP methods that can be used for Vonage API requests.
 */ var HTTPMethods;
(function(HTTPMethods) {
    /** Represents an HTTP GET request. */ HTTPMethods["GET"] = "GET";
    /** Represents an HTTP POST request. */ HTTPMethods["POST"] = "POST";
    /** Represents an HTTP DELETE request. */ HTTPMethods["DELETE"] = "DELETE";
    /** Represents an HTTP PUT request. */ HTTPMethods["PUT"] = "PUT";
    /** Represents an HTTP PATCH request. */ HTTPMethods["PATCH"] = "PATCH";
})(HTTPMethods || (exports.HTTPMethods = HTTPMethods = {})); //# sourceMappingURL=HTTPMethods.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/enums/contentType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContentType = void 0;
/**
 * Enum representing possible MIME types for the 'content-type' HTTP header that
 * Vonage API's could accept.
 *
 * Note: Most of the APIs will only accept `application/json`.  Please refer
 * to the specific API documentation to determine if another content type is
 * accepted
 */ var ContentType;
(function(ContentType) {
    /** Represents the MIME type for JSON data. */ ContentType["JSON"] = "application/json";
    /** Represents the MIME type for URL-encoded form data. */ ContentType["FORM_URLENCODED"] = "application/x-www-form-urlencoded";
    /** Represents the MIME type for XML data. */ ContentType["XML"] = "application/xml";
    /** Represents the MIME type for CSV data. */ ContentType["CSV"] = "text/csv";
})(ContentType || (exports.ContentType = ContentType = {})); //# sourceMappingURL=contentType.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/enums/responseTypes.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ResponseTypes = void 0;
/**
 * @deprecated
 * Enum representing the expected response types for API requests. This was
 * originaly used to set what the expected response type will be. It is better
 * to use the content-type header from the response to decode properly.
 */ var ResponseTypes;
(function(ResponseTypes) {
    /**
     * Represents a JSON-formatted response.
     */ ResponseTypes["json"] = "json";
    /**
     * Represents a stream response, typically for handling large data or files.
     */ ResponseTypes["stream"] = "stream";
    /**
     * Represents a plain text response.
     */ ResponseTypes["text"] = "text";
})(ResponseTypes || (exports.ResponseTypes = ResponseTypes = {})); //# sourceMappingURL=responseTypes.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/enums/HTTPMethods.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/enums/contentType.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/enums/responseTypes.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/errors/vetchError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VetchError = void 0;
/**
 * Class representing an error from a Vetch API request. Extends the built-in
 * Error class and adds additional properties related to the API request and
 * response.
 *
 * @template T - The type of the data payload in the VetchResponse, expected to be an object that has been decoded from JSON or WebForm.
 *
 * @property {string} [code] - An optional error code.
 * @property {VetchOptions} config - Configuration options for the API request.
 * @property {VetchResponse<T>} response - The API response that resulted in the error.
 */ class VetchError extends Error {
    code;
    config;
    response;
    /**
     * Creates an instance of VetchError.
     *
     * @param {string} message - The error message.
     * @param {VetchOptions} options - Configuration options for the API request.
     * @param {VetchResponse} response - Configuration options for the API request.
     */ constructor(message, options, response){
        super(message);
        this.config = options;
        this.response = response;
    }
}
exports.VetchError = VetchError; //# sourceMappingURL=vetchError.js.map
}}),
"[project]/node_modules/@vonage/vetch/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/errors/vetchError.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/enums/AuthenticationType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AuthenticationType = void 0;
/**
 * Enum representing the different types of authentication methods
 * supported by the Vonage APIs.
 */ var AuthenticationType;
(function(AuthenticationType) {
    /**
     * Basic authentication using a base64-encoded string.
     */ AuthenticationType["BASIC"] = "basic";
    /**
     * JSON Web Token (JWT) authentication.
     */ AuthenticationType["JWT"] = "jwt";
    /**
     * Authentication using both API key and secret in the request body.
     * @deprecated This method is deprecated.
     */ AuthenticationType["KEY_SECRET"] = "key_secret";
    /**
     * Authentication using API key and secret in the query parameters.
     */ AuthenticationType["QUERY_KEY_SECRET"] = "query_key_secret";
    /**
     * HMAC signature-based authentication.
     */ AuthenticationType["SIGNATURE"] = "signature";
    /**
     * CIBA authentication
     */ AuthenticationType["CIBA"] = "ciba";
    /**
     * OAuth2 authentication.
     */ AuthenticationType["OAUTH2"] = "oauth2";
})(AuthenticationType || (exports.AuthenticationType = AuthenticationType = {})); //# sourceMappingURL=AuthenticationType.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/enums/GenericErrorCodes.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GenericErrors = void 0;
/**
 * Enum representing the different types of generic error codes
 * that might be returned by the Vonage APIs.
 */ var GenericErrors;
(function(GenericErrors) {
    /**
     * The account has insufficient funds. This request could not be performed
     * due to your account balance being low. Top up your account in the Vonage
     * Dashboard.
     */ GenericErrors["LOW_BALANCE"] = "low-balance";
    /**
     * The provided credentials are incorrect or missing. You did not provide
     * correct credentials. Check your authentication credentials; they can be
     * found in the Vonage Dashboard.
     */ GenericErrors["UNAUTHORIZED"] = "unauthorized";
    /**
     * The authenticated user does not have access to the requested resource. Your
     * account does not have permission to perform this action. Check that you're
     * using the correct credentials and that your account has this feature enabled.
     */ GenericErrors["FORBIDDEN"] = "forbidden";
    /**
     * The requested resource could not be found. The requested resource does not
     * exist, or you do not have access to it. Check both the URI that you're
     * requesting and your authentication credentials.
     */ GenericErrors["NOT_FOUND"] = "not-found";
    /**
     * The account is not provisioned for the requested service. The credentials
     * provided do not have access to the requested product. Check that your API
     * key is correct and has been whitelisted.
     */ GenericErrors["UNPROVISIONED"] = "unprovisioned";
    /**
     * The account has been suspended. This account has been suspended. Contact
     * support@api.vonage.com for more information.
     */ GenericErrors["ACCOUNT_SUSPENDED"] = "account-suspended";
    /**
     * The provided JWT has expired. The JWT provided has expired. Generate a
     * new JWT with an expiration date in the future.
     */ GenericErrors["JWT_EXPIRED"] = "jwt-expired";
    /**
     * The provided JWT has been revoked. The JWT provided has been revoked.
     * Generate a new JWT using your private key.
     */ GenericErrors["JWT_REVOKED"] = "jwt-revoked";
    /**
     * The provided API key is invalid. The API key provided does not exist in
     * our system, or you do not have access. Modify your request to provide a
     * valid API key.
     */ GenericErrors["INVALID_API_KEY"] = "invalid-api-key";
    /**
     * The provided signature is invalid. The signature provided did not
     * validate. Check your signature secret and ensure you're following the
     * correct signing process.
     */ GenericErrors["INVALID_SIGNATURE"] = "invalid-signature";
    /**
     * The request originates from an unauthorized IP address. The source IP
     * address of the request is not in our allow list. Make a request from an
     * allowed IP address, or add your current IP to the list of authorized
     * addresses.
     */ GenericErrors["INVALID_IP"] = "invalid-ip";
    /**
     * Multiple authentication methods were provided in the request.
     * Provide exactly one authentication method.
     */ GenericErrors["MULTIPLE_AUTH_METHODS"] = "multiple-auth-methods";
    /**
     * The provided ID in the request is invalid. The ID provided does not exist
     * in our system. Modify your request to provide a valid ID.
     */ GenericErrors["INVALID_ID"] = "invalid-id";
    /**
     * The provided JSON in the request body is invalid. The request body did
     * not contain valid JSON. Send a JSON request body, including a
     * Content-Type header of application/json.
     */ GenericErrors["INVALID_JSON"] = "invalid-json";
    /**
     * The HTTP verb used in the request is not allowed. This endpoint does not
     * support the HTTP verb that you requested. Read the API documentation to
     * see which verbs your desired endpoint supports.
     */ GenericErrors["WRONG_VERB"] = "wrong-verb";
    /**
     * The provided Accept header in the request is invalid. Invalid Accept
     * header provided. Most Vonage APIs only send back application/json. Check
     * the API documentation for the specific API you're working with for a
     * complete list of supported data types.
     */ GenericErrors["ACCEPT_HEADER"] = "accept-header";
    /**
     * The provided Content-Type header in the request is invalid. Invalid
     * Content-Type header provided. Most Vonage APIs only accept application/
     * json. Check the API documentation for the specific API you're working
     * with for a complete list of supported data types.
     */ GenericErrors["CONTENT_TYPE_HEADER"] = "content-type-header";
    /**
     * The requested service is unavailable due to legal reasons. Vonage APIs
     * are unavailable in the following areas due to international sanctions:
     * Sudan, Syria, Crimea, North Korea, Iran, and Cuba.
     */ GenericErrors["UNAVAILABLE_LEGAL"] = "unavailable-legal";
    /**
     * The application associated with the request has been suspended. This
     * application has been suspended. Re-enable the application or create a new
     * application to use.
     */ GenericErrors["APPLICATION_SUSPENDED"] = "application-suspended";
})(GenericErrors || (exports.GenericErrors = GenericErrors = {})); //# sourceMappingURL=GenericErrorCodes.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/enums/AuthenticationType.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/enums/GenericErrorCodes.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/transformers.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.omit = exports.kebabCaseObjectKeys = exports.snakeCaseObjectKeys = exports.camelCaseObjectKeys = exports.transformObjectKeys = void 0;
const lodash_camelcase_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/lodash.camelcase/index.js [app-rsc] (ecmascript)"));
const lodash_snakecase_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/lodash.snakecase/index.js [app-rsc] (ecmascript)"));
const lodash_kebabcase_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/lodash.kebabcase/index.js [app-rsc] (ecmascript)"));
const lodash_isobject_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/lodash.isobject/index.js [app-rsc] (ecmascript)"));
/**
 * Transforms the keys of an object based on a provided transformation function.
 *
 * @param {TransformFunction} transformFn - The function to transform the object's keys.
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with transformed keys.
 */ const transformObjectKeys = (transformFn, objectToTransform, deep = false, preserve = false)=>{
    const transformedObject = {
        ...preserve ? objectToTransform : {}
    };
    for(const prop in objectToTransform){
        if (!Object.prototype.hasOwnProperty.call(objectToTransform, prop)) {
            continue;
        }
        const newKey = transformFn(prop);
        const value = objectToTransform[prop];
        if (!deep || !(0, lodash_isobject_1.default)(value)) {
            transformedObject[newKey] = value;
            continue;
        }
        if (Array.isArray(value)) {
            transformedObject[newKey] = value.map((t)=>(0, lodash_isobject_1.default)(t) ? (0, exports.transformObjectKeys)(transformFn, t, deep, preserve) : t);
            continue;
        }
        transformedObject[newKey] = (0, exports.transformObjectKeys)(transformFn, value, deep, preserve);
    }
    return transformedObject;
};
exports.transformObjectKeys = transformObjectKeys;
/**
 * Transforms the keys of an object to camelCase.
 *
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with camelCased keys.
 */ const camelCaseObjectKeys = (...rest)=>(0, exports.transformObjectKeys)(lodash_camelcase_1.default, ...rest);
exports.camelCaseObjectKeys = camelCaseObjectKeys;
/**
 * Transforms the keys of an object to snake_case.
 *
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with snake_cased keys.
 */ const snakeCaseObjectKeys = (...rest)=>(0, exports.transformObjectKeys)(lodash_snakecase_1.default, ...rest);
exports.snakeCaseObjectKeys = snakeCaseObjectKeys;
/**
 * Transforms the keys of an object to kebab-case.
 *
 * @param {Record<string | number, unknown>} objectToTransform - The object whose keys are to be transformed.
 * @param {boolean} [deep=false] - Whether to deeply transform nested object keys.
 * @param {boolean} [preserve=false] - Whether to preserve the original object's keys.
 * @return {Record<string | number, unknown>} A new object with kebab-cased keys.
 */ const kebabCaseObjectKeys = (...rest)=>(0, exports.transformObjectKeys)(lodash_kebabcase_1.default, ...rest);
exports.kebabCaseObjectKeys = kebabCaseObjectKeys;
/**
 * Omit keys from an object.
 *
 * @param {Array<string>} keys - The keys to omit.
 * @param {Record<string | number, unknown>} obj - The object from which to omit keys.
 *
 * @return {Record<string | number, unknown>} A new object with omitted keys.
 */ const omit = (keys, obj)=>Object.fromEntries(Object.entries(obj).filter(([key])=>!keys.includes(key)));
exports.omit = omit; //# sourceMappingURL=transformers.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/client.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Client = void 0;
const node_fetch_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/node-fetch/lib/index.mjs [app-rsc] (ecmascript)"));
const node_fetch_2 = __importDefault(__turbopack_context__.r("[project]/node_modules/node-fetch/lib/index.mjs [app-rsc] (ecmascript)"));
const auth_1 = __turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/index.js [app-rsc] (ecmascript)");
const vetch_1 = __turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/index.js [app-rsc] (ecmascript)");
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/enums/index.js [app-rsc] (ecmascript)");
const transformers_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/transformers.js [app-rsc] (ecmascript)");
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-rsc] (ecmascript)"));
const log = (0, debug_1.default)('vonage:server-client');
class Client {
    /**
     * Static property containing utility transformers.
     */ static transformers = {
        'camelCaseObjectKeys': transformers_1.camelCaseObjectKeys,
        'snakeCaseObjectKeys': transformers_1.snakeCaseObjectKeys,
        'kebabCaseObjectKeys': transformers_1.kebabCaseObjectKeys,
        'omit': transformers_1.omit
    };
    /**
     * The type of authentication used for the client's requests.
     */ authType = enums_1.AuthenticationType.QUERY_KEY_SECRET;
    /**
     * The authentication instance responsible for generating authentication headers and query parameters.
     */ auth;
    /**
     * Configuration settings for the client, including default hosts for various services and other request settings.
     */ config;
    /**
     * Creates a new instance of the Client.
     *
     * @param {AuthInterface | AuthParams} credentials - The authentication credentials or an authentication instance.
     * @param {ConfigParams} [options] - Optional configuration settings for the client.
     */ constructor(credentials, options){
        this.auth = !Object.prototype.hasOwnProperty.call(credentials, 'getQueryParams') ? new auth_1.Auth(credentials) : credentials;
        this.config = {
            restHost: options?.restHost || 'https://rest.nexmo.com',
            apiHost: options?.apiHost || 'https://api.nexmo.com',
            videoHost: options?.videoHost || 'https://video.api.vonage.com',
            meetingsHost: options?.meetingsHost || 'https://api-eu.vonage.com',
            responseType: options?.responseType || vetch_1.ResponseTypes.json,
            timeout: options?.timeout || null
        };
    }
    getConfig() {
        return this.config;
    }
    /**
     * Adds the appropriate authentication headers or parameters to the request based on the authentication type.
     *
     * @param {VetchOptions} request - The request options to which authentication needs to be added.
     * @return {Promise<VetchOptions>} - The request options with the added authentication.
     */ async addAuthenticationToRequest(request) {
        log(`adding ${this.authType || 'api key/secret'} to request`);
        if (!Object.values(enums_1.AuthenticationType).includes(this.authType)) {
            throw new Error('No authentication type set');
        }
        if ([
            enums_1.AuthenticationType.OAUTH2,
            enums_1.AuthenticationType.CIBA
        ].includes(this.authType)) {
            throw new Error('OAuth2 and CIBA authentication is not supported for this Client');
        }
        switch(this.authType){
            case enums_1.AuthenticationType.BASIC:
                return this.addBasicAuthToRequest(request);
            case enums_1.AuthenticationType.JWT:
                return this.addJWTToRequest(request);
            case enums_1.AuthenticationType.QUERY_KEY_SECRET:
                return this.addQueryKeySecretToRequest(request);
            default:
                return this.addQueryKeySecretToRequestBody(request);
        }
    }
    /**
     * Adds API key and secret to the request body.
     *
     * @param {VetchOptions} request - The request options to which authentication needs to be added.
     * @return {VetchOptions} - The request options with the added authentication.
     */ async addQueryKeySecretToRequestBody(request) {
        if (typeof request.data === 'string') {
            throw new Error('Cannot append auth parameters to body');
        }
        const authParams = await this.auth.getQueryParams({});
        request.data = request.data ?? {};
        // JSON as default
        log('Adding parameters to body');
        request.data = {
            ...request.data,
            ...authParams
        };
        return request;
    }
    /**
     * Adds API key and secret to the request.
     *
     * @param {VetchOptions} request - The request options to which authentication needs to be added.
     * @return {VetchOptions} - The request options with the added authentication.
     */ async addQueryKeySecretToRequest(request) {
        log('adding parameters to query string');
        request.params = {
            ...request.params ? request.params : {},
            ...await this.auth.getQueryParams({})
        };
        return request;
    }
    /**
     * Adds a JWT to the request.
     *
     * @param {VetchOptions} request - The request options to which authentication needs to be added.
     * @return {VetchOptions} - The request options with the added authentication.
     */ async addJWTToRequest(request) {
        request.headers = Object.assign({}, request.headers, {
            Authorization: await this.auth.createBearerHeader()
        });
        return request;
    }
    /**
     * Adds basic authentication headers to the request.
     *
     * @param {VetchOptions} request - The request options to which authentication needs to be added.
     * @return {VetchOptions} - The request options with the added authentication.
     */ async addBasicAuthToRequest(request) {
        request.headers = Object.assign({}, request.headers, {
            Authorization: await this.auth.createBasicHeader()
        });
        return request;
    }
    /**
     * Sends a DELETE request to the specified URL.
     *
     * @param {string} url - The URL endpoint for the DELETE request.
     * @return {Promise<VetchResponse<T>>} - The response from the DELETE request.
     */ async sendDeleteRequest(url) {
        const request = {
            url,
            method: vetch_1.HTTPMethods.DELETE
        };
        return await this.sendRequest(request);
    }
    /**
     * Sends a POST request with form data to the specified URL.
     *
     * @param {string} url - The URL endpoint for the POST request.
     * @param {Record<string, string>} [payload] - Optional payload containing form data to send with the POST request.
     * @return {Promise<VetchResponse<T>>} - The response from the POST request.
     */ async sendFormSubmitRequest(url, payload) {
        const request = {
            url,
            method: vetch_1.HTTPMethods.POST,
            type: vetch_1.ContentType.FORM_URLENCODED,
            headers: {
                Accept: 'application/json'
            },
            ...JSON.parse(JSON.stringify(payload ? {
                data: payload
            } : {}))
        };
        return await this.sendRequest(request);
    }
    /**
     * Sends a GET request to the specified URL with optional query parameters.
     *
     * @param {string} url - The URL endpoint for the GET request.
     * @param {Record<string, unknown>} [queryParams] - Optional query parameters to append to the URL. These should be compatible with Node's URLSearchParams.
     * @return {Promise<VetchResponse<T>>} - The response from the GET request.
     */ async sendGetRequest(url, queryParams) {
        const request = {
            url,
            method: vetch_1.HTTPMethods.GET,
            ...queryParams ? {
                params: queryParams
            } : {}
        };
        return await this.sendRequest(request);
    }
    /**
     * Sends a PATCH request to the specified URL with an optional payload.
     *
     * @param {string} url - The URL endpoint for the PATCH request.
     * @param {Record<string, unknown>} [payload] - Optional payload to be sent as the body of the PATCH request.
     * @return {Promise<VetchResponse<T>>} - The response from the PATCH request.
     */ async sendPatchRequest(url, payload) {
        return this.sendRequestWithData(vetch_1.HTTPMethods.PATCH, url, payload);
    }
    /**
     * Sends a POST request to the specified URL with an optional payload.
     *
     * @param {string} url - The URL endpoint for the POST request.
     * @param {Record<string, unknown>} [payload] - Optional payload to be sent as the body of the POST request.
     * @return {Promise<VetchResponse<T>>} - The response from the POST request.
     */ async sendPostRequest(url, payload) {
        return this.sendRequestWithData(vetch_1.HTTPMethods.POST, url, payload);
    }
    /**
     * Sends a PUT request to the specified URL with an optional payload.
     *
     * @param {string} url - The URL endpoint for the PUT request.
     * @param {Record<string, unknown>} [payload] - Optional payload to be sent as the body of the PUT request.
     * @return {Promise<VetchResponse<T>>} - The response from the PUT request.
     */ sendPutRequest(url, payload) {
        return this.sendRequestWithData(vetch_1.HTTPMethods.PUT, url, payload);
    }
    /**
     * Sends a request with JSON-encoded data to the specified URL using the provided HTTP method.
     *
     * @param {HTTPMethods.POST | HTTPMethods.PATCH | HTTPMethods.PUT} method - The HTTP method to be used for the request (only POST, PATCH, or PUT are acceptable).
     * @param {string} url - The URL endpoint for the request.
     * @param {Record<string, unknown>} [payload] - Optional payload to be sent as the body of the request, JSON-encoded.
     * @return {Promise<VetchResponse<T>>} - The response from the request.
     */ async sendRequestWithData(method, url, payload) {
        const request = {
            url,
            method: method,
            type: vetch_1.ContentType.JSON,
            ...payload ? {
                data: payload
            } : {}
        };
        return await this.sendRequest(request);
    }
    /**
     * Sends a request adding necessary headers, handling authentication, and parsing the response.
     *
     * @param {VetchOptions} request - The options defining the request, including URL, method, headers, and data.
     * @return {Promise<VetchResponse<T>>} - The parsed response from the request.
     */ async sendRequest(request) {
        const timeout = request.timeout || this.config.timeout;
        const controller = new AbortController();
        const timeoutId = setTimeout(()=>{
            controller.abort();
        }, timeout);
        try {
            log('Preparing request', request);
            request = await this.prepareRequest(request);
            const fetcRequest = {
                url: request.url,
                method: request.method,
                headers: request.headers,
                body: this.prepareBody(request),
                ...timeout ? {
                    signal: controller.signal
                } : {}
            };
            log('Sending request', fetcRequest);
            return await this.parseResponse(request, await (0, node_fetch_1.default)(request.url, fetcRequest));
        } catch (error) {
            if (error instanceof node_fetch_2.default) {
                log(`Request timed out after ${timeout}`);
            }
            throw error;
        } finally{
            clearTimeout(timeoutId);
        }
    }
    /**
     * Prepares the request with necessary headers, authentication, and query parameters.
     *
     * @param {VetchOptions} request - The initial request options.
     * @return {Promise<VetchOptions>} - The modified request options.
     */ async prepareRequest(request) {
        request.headers = {
            ...request.headers,
            'user-agent': [
                '@vonage/server-sdk/3.0.0',
                ` node/${process.version.replace('v', '')}`,
                this.config.appendUserAgent ? ` ${this.config.appendUserAgent}` : ''
            ].join()
        };
        switch(request.type){
            case vetch_1.ContentType.FORM_URLENCODED:
                request.headers['content-type'] = vetch_1.ContentType.FORM_URLENCODED;
                break;
            case vetch_1.ContentType.JSON:
                request.headers['content-type'] = vetch_1.ContentType.JSON;
                break;
        }
        request = await this.addAuthenticationToRequest(request);
        log('Request prepared', request);
        if (request.params) {
            request.params = JSON.parse(JSON.stringify(request.params));
        }
        const url = new URL(request.url);
        const params = new URLSearchParams(request.params);
        // copy params into the URL
        for (const [param, value] of params.entries()){
            url.searchParams.append(param, value);
        }
        request.url = url.toString();
        return request;
    }
    /**
     * Prepares the body for the request based on the content type.
     *
     * @param {VetchOptions} request - The request options.
     * @return {string | undefined} - The prepared request body as a string or undefined.
     */ prepareBody(request) {
        request.headers = {
            ...request?.headers
        };
        if (!request.data) {
            return;
        }
        if (request.type === vetch_1.ContentType.JSON) {
            return JSON.stringify(request.data);
        }
        if (request.type === vetch_1.ContentType.FORM_URLENCODED) {
            const requestParams = new URLSearchParams(request.data);
            requestParams.sort();
            return requestParams.toString();
        }
        return undefined;
    }
    /**
     * Parses the response based on its content type.
     *
     * @template T - The expected type of the parsed response data.
     *
     * @param {VetchOptions} request - The request options.
     * @param {Response} response - The raw response from the request.
     * @return {Promise<VetchResponse<T>>} - The parsed response.
     */ async parseResponse(request, response) {
        let decoded = null;
        if (!response.ok) {
            log('Request failed', response);
            throw new vetch_1.VetchError(`Request failed with status code ${response.status}`, request, response);
        }
        log('Request succeeded');
        const contentLength = parseInt(response.headers.get('content-length') || '0');
        const [contentType] = (response.headers.get('content-type') || '').split(';');
        log(`Response content type: ${contentType}`);
        try {
            const body = await response.text();
            switch(contentType){
                case vetch_1.ContentType.FORM_URLENCODED:
                    log('Decoding form data');
                    decoded = response.body ? new URLSearchParams(body) : '';
                    break;
                case vetch_1.ContentType.JSON:
                    log('Decoding JSON');
                    decoded = JSON.parse(body);
                    break;
                default:
                    log('Decoding text');
                    decoded = body;
            }
        } catch (error) {
            log('Failed to decode body', error);
            if (contentLength > 0) {
                throw new vetch_1.VetchError('Failed to decode response body', request, response);
            }
        }
        log('Decoded body', decoded);
        const responseHeaders = {};
        for (const [header, value] of response.headers.entries()){
            Object.assign(response, header, value);
        }
        const result = {
            data: decoded,
            config: request,
            status: response.status,
            statusText: response.statusText,
            headers: responseHeaders,
            request: request
        };
        log('Response', JSON.stringify(result, null, 2));
        return result;
    }
}
exports.Client = Client; //# sourceMappingURL=client.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/types/APILink.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=APILink.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/types/APILinks.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=APILinks.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/types/ConfigParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ConfigParams.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/types/APILink.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/types/APILinks.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/types/ConfigParams.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/fileClient.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FileClient = void 0;
const client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/client.js [app-rsc] (ecmascript)");
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/enums/index.js [app-rsc] (ecmascript)");
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-rsc] (ecmascript)"));
const vetch_1 = __turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/index.js [app-rsc] (ecmascript)");
const node_fetch_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/node-fetch/lib/index.mjs [app-rsc] (ecmascript)"));
const fs_1 = __turbopack_context__.r("[externals]/fs [external] (fs, cjs)");
const promises_1 = __turbopack_context__.r("[externals]/stream/promises [external] (stream/promises, cjs)");
const log = (0, debug_1.default)('vonage:file-client');
/**
 * A client for downloading files from Vonage.
 *
 * @extends Client
 */ class FileClient extends client_1.Client {
    authType = enums_1.AuthenticationType.JWT;
    saveFilePath = '';
    /**
     * Downloads a file from Vonage and saves it to a specified path.
     *
     * @param {string} file - The URL or ID of the file to be downloaded.
     * @param {string} path - The path where the downloaded file should be saved.
     *
     * @throws {Error} Throws an error if the file could not be downloaded or saved.
     *
     * @return {Promise<void>} Resolves when the file is successfully downloaded and saved.
     */ async downloadFile(file, path) {
        log(`Downloading file: ${file}`);
        let fileURL;
        try {
            fileURL = new URL(file);
            log('Downloading file by URL');
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        } catch (_) {
            log('Downloading file by ID');
            fileURL = new URL(`${this.config.apiHost}/v3/files/${file}`);
        }
        log(`File URL ${fileURL}`);
        const hostname = fileURL.hostname.split('.').slice(-2).join('.');
        if (![
            'vonage.com',
            'nexmo.com'
        ].includes(hostname)) {
            throw new Error(`The domain ${fileURL} is invalid for file download. Only vonage.com and nexmo.com are allowed.`);
        }
        const request = await this.addAuthenticationToRequest({
            url: fileURL.toString(),
            method: vetch_1.HTTPMethods.GET
        });
        log('File download request', request);
        const response = await (0, node_fetch_1.default)(request.url, {
            method: request.method,
            headers: request.headers
        });
        log('File download response', response);
        if (!response.ok) {
            throw new vetch_1.VetchError(`Unexpected response when downloading file: ${response.statusText}`, request);
        }
        log(`Saving to ${path}`);
        await (0, promises_1.pipeline)(response.body, (0, fs_1.createWriteStream)(path));
        log('File saved');
    }
}
exports.FileClient = FileClient; //# sourceMappingURL=fileClient.js.map
}}),
"[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/client.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/transformers.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/fileClient.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/lodash.camelcase/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
/** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23', rsComboSymbolsRange = '\\u20d0-\\u20f0', rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
/** Used to compose unicode capture groups. */ var rsApos = "['\u2019]", rsAstral = '[' + rsAstralRange + ']', rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */ var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')', rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsOptVar + reOptMod + ')*', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
    rsDingbat,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsSeq, rsSymbol = '(?:' + [
    rsNonAstral + rsCombo + '?',
    rsCombo,
    rsRegional,
    rsSurrPair,
    rsAstral
].join('|') + ')';
/** Used to match apostrophes. */ var reApos = RegExp(rsApos, 'g');
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */ var reComboMark = RegExp(rsCombo, 'g');
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [
        rsBreak,
        rsUpper,
        '$'
    ].join('|') + ')',
    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [
        rsBreak,
        rsUpper + rsLowerMisc,
        '$'
    ].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
    rsUpper + '+' + rsOptUpperContr,
    rsDigits,
    rsEmoji
].join('|'), 'g');
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');
/** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
/** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',
    '\u0102': 'A',
    '\u0104': 'A',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u0105': 'a',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010a': 'C',
    '\u010c': 'C',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010b': 'c',
    '\u010d': 'c',
    '\u010e': 'D',
    '\u0110': 'D',
    '\u010f': 'd',
    '\u0111': 'd',
    '\u0112': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u0118': 'E',
    '\u011a': 'E',
    '\u0113': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u0119': 'e',
    '\u011b': 'e',
    '\u011c': 'G',
    '\u011e': 'G',
    '\u0120': 'G',
    '\u0122': 'G',
    '\u011d': 'g',
    '\u011f': 'g',
    '\u0121': 'g',
    '\u0123': 'g',
    '\u0124': 'H',
    '\u0126': 'H',
    '\u0125': 'h',
    '\u0127': 'h',
    '\u0128': 'I',
    '\u012a': 'I',
    '\u012c': 'I',
    '\u012e': 'I',
    '\u0130': 'I',
    '\u0129': 'i',
    '\u012b': 'i',
    '\u012d': 'i',
    '\u012f': 'i',
    '\u0131': 'i',
    '\u0134': 'J',
    '\u0135': 'j',
    '\u0136': 'K',
    '\u0137': 'k',
    '\u0138': 'k',
    '\u0139': 'L',
    '\u013b': 'L',
    '\u013d': 'L',
    '\u013f': 'L',
    '\u0141': 'L',
    '\u013a': 'l',
    '\u013c': 'l',
    '\u013e': 'l',
    '\u0140': 'l',
    '\u0142': 'l',
    '\u0143': 'N',
    '\u0145': 'N',
    '\u0147': 'N',
    '\u014a': 'N',
    '\u0144': 'n',
    '\u0146': 'n',
    '\u0148': 'n',
    '\u014b': 'n',
    '\u014c': 'O',
    '\u014e': 'O',
    '\u0150': 'O',
    '\u014d': 'o',
    '\u014f': 'o',
    '\u0151': 'o',
    '\u0154': 'R',
    '\u0156': 'R',
    '\u0158': 'R',
    '\u0155': 'r',
    '\u0157': 'r',
    '\u0159': 'r',
    '\u015a': 'S',
    '\u015c': 'S',
    '\u015e': 'S',
    '\u0160': 'S',
    '\u015b': 's',
    '\u015d': 's',
    '\u015f': 's',
    '\u0161': 's',
    '\u0162': 'T',
    '\u0164': 'T',
    '\u0166': 'T',
    '\u0163': 't',
    '\u0165': 't',
    '\u0167': 't',
    '\u0168': 'U',
    '\u016a': 'U',
    '\u016c': 'U',
    '\u016e': 'U',
    '\u0170': 'U',
    '\u0172': 'U',
    '\u0169': 'u',
    '\u016b': 'u',
    '\u016d': 'u',
    '\u016f': 'u',
    '\u0171': 'u',
    '\u0173': 'u',
    '\u0174': 'W',
    '\u0175': 'w',
    '\u0176': 'Y',
    '\u0177': 'y',
    '\u0178': 'Y',
    '\u0179': 'Z',
    '\u017b': 'Z',
    '\u017d': 'Z',
    '\u017a': 'z',
    '\u017c': 'z',
    '\u017e': 'z',
    '\u0132': 'IJ',
    '\u0133': 'ij',
    '\u0152': 'Oe',
    '\u0153': 'oe',
    '\u0149': "'n",
    '\u017f': 'ss'
};
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */ function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array ? array.length : 0;
    if (initAccum && length) {
        accumulator = array[++index];
    }
    while(++index < length){
        accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
}
/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function asciiToArray(string) {
    return string.split('');
}
/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function asciiWords(string) {
    return string.match(reAsciiWord) || [];
}
/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyOf(object) {
    return function(key) {
        return object == null ? undefined : object[key];
    };
}
/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */ var deburrLetter = basePropertyOf(deburredLetters);
/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */ function hasUnicode(string) {
    return reHasUnicode.test(string);
}
/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */ function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
}
/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}
/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function unicodeToArray(string) {
    return string.match(reUnicode) || [];
}
/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
}
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/** Built-in value references. */ var Symbol = root.Symbol;
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */ function baseSlice(array, start, end) {
    var index = -1, length = array.length;
    if (start < 0) {
        start = -start > length ? 0 : length + start;
    }
    end = end > length ? length : end;
    if (end < 0) {
        end += length;
    }
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while(++index < length){
        result[index] = array[index + start];
    }
    return result;
}
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
        return value;
    }
    if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */ function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice(array, start, end);
}
/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */ function createCaseFirst(methodName) {
    return function(string) {
        string = toString(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
        return chr[methodName]() + trailing;
    };
}
/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */ function createCompounder(callback) {
    return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function toString(value) {
    return value == null ? '' : baseToString(value);
}
/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */ var camelCase = createCompounder(function(result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
});
/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */ function capitalize(string) {
    return upperFirst(toString(string).toLowerCase());
}
/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */ function deburr(string) {
    string = toString(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}
/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */ var upperFirst = createCaseFirst('toUpperCase');
/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */ function words(string, pattern, guard) {
    string = toString(string);
    pattern = guard ? undefined : pattern;
    if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }
    return string.match(pattern) || [];
}
module.exports = camelCase;
}}),
"[project]/node_modules/lodash.snakecase/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
/** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23', rsComboSymbolsRange = '\\u20d0-\\u20f0', rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
/** Used to compose unicode capture groups. */ var rsApos = "['\u2019]", rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */ var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')', rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsOptVar + reOptMod + ')*', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
    rsDingbat,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsSeq;
/** Used to match apostrophes. */ var reApos = RegExp(rsApos, 'g');
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */ var reComboMark = RegExp(rsCombo, 'g');
/** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [
        rsBreak,
        rsUpper,
        '$'
    ].join('|') + ')',
    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [
        rsBreak,
        rsUpper + rsLowerMisc,
        '$'
    ].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
    rsUpper + '+' + rsOptUpperContr,
    rsDigits,
    rsEmoji
].join('|'), 'g');
/** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
/** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',
    '\u0102': 'A',
    '\u0104': 'A',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u0105': 'a',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010a': 'C',
    '\u010c': 'C',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010b': 'c',
    '\u010d': 'c',
    '\u010e': 'D',
    '\u0110': 'D',
    '\u010f': 'd',
    '\u0111': 'd',
    '\u0112': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u0118': 'E',
    '\u011a': 'E',
    '\u0113': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u0119': 'e',
    '\u011b': 'e',
    '\u011c': 'G',
    '\u011e': 'G',
    '\u0120': 'G',
    '\u0122': 'G',
    '\u011d': 'g',
    '\u011f': 'g',
    '\u0121': 'g',
    '\u0123': 'g',
    '\u0124': 'H',
    '\u0126': 'H',
    '\u0125': 'h',
    '\u0127': 'h',
    '\u0128': 'I',
    '\u012a': 'I',
    '\u012c': 'I',
    '\u012e': 'I',
    '\u0130': 'I',
    '\u0129': 'i',
    '\u012b': 'i',
    '\u012d': 'i',
    '\u012f': 'i',
    '\u0131': 'i',
    '\u0134': 'J',
    '\u0135': 'j',
    '\u0136': 'K',
    '\u0137': 'k',
    '\u0138': 'k',
    '\u0139': 'L',
    '\u013b': 'L',
    '\u013d': 'L',
    '\u013f': 'L',
    '\u0141': 'L',
    '\u013a': 'l',
    '\u013c': 'l',
    '\u013e': 'l',
    '\u0140': 'l',
    '\u0142': 'l',
    '\u0143': 'N',
    '\u0145': 'N',
    '\u0147': 'N',
    '\u014a': 'N',
    '\u0144': 'n',
    '\u0146': 'n',
    '\u0148': 'n',
    '\u014b': 'n',
    '\u014c': 'O',
    '\u014e': 'O',
    '\u0150': 'O',
    '\u014d': 'o',
    '\u014f': 'o',
    '\u0151': 'o',
    '\u0154': 'R',
    '\u0156': 'R',
    '\u0158': 'R',
    '\u0155': 'r',
    '\u0157': 'r',
    '\u0159': 'r',
    '\u015a': 'S',
    '\u015c': 'S',
    '\u015e': 'S',
    '\u0160': 'S',
    '\u015b': 's',
    '\u015d': 's',
    '\u015f': 's',
    '\u0161': 's',
    '\u0162': 'T',
    '\u0164': 'T',
    '\u0166': 'T',
    '\u0163': 't',
    '\u0165': 't',
    '\u0167': 't',
    '\u0168': 'U',
    '\u016a': 'U',
    '\u016c': 'U',
    '\u016e': 'U',
    '\u0170': 'U',
    '\u0172': 'U',
    '\u0169': 'u',
    '\u016b': 'u',
    '\u016d': 'u',
    '\u016f': 'u',
    '\u0171': 'u',
    '\u0173': 'u',
    '\u0174': 'W',
    '\u0175': 'w',
    '\u0176': 'Y',
    '\u0177': 'y',
    '\u0178': 'Y',
    '\u0179': 'Z',
    '\u017b': 'Z',
    '\u017d': 'Z',
    '\u017a': 'z',
    '\u017c': 'z',
    '\u017e': 'z',
    '\u0132': 'IJ',
    '\u0133': 'ij',
    '\u0152': 'Oe',
    '\u0153': 'oe',
    '\u0149': "'n",
    '\u017f': 'ss'
};
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */ function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array ? array.length : 0;
    if (initAccum && length) {
        accumulator = array[++index];
    }
    while(++index < length){
        accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
}
/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function asciiWords(string) {
    return string.match(reAsciiWord) || [];
}
/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyOf(object) {
    return function(key) {
        return object == null ? undefined : object[key];
    };
}
/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */ var deburrLetter = basePropertyOf(deburredLetters);
/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */ function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
}
/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
}
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/** Built-in value references. */ var Symbol = root.Symbol;
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
        return value;
    }
    if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */ function createCompounder(callback) {
    return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function toString(value) {
    return value == null ? '' : baseToString(value);
}
/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */ function deburr(string) {
    string = toString(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}
/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */ var snakeCase = createCompounder(function(result, word, index) {
    return result + (index ? '_' : '') + word.toLowerCase();
});
/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */ function words(string, pattern, guard) {
    string = toString(string);
    pattern = guard ? undefined : pattern;
    if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }
    return string.match(pattern) || [];
}
module.exports = snakeCase;
}}),
"[project]/node_modules/lodash.kebabcase/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
/** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23', rsComboSymbolsRange = '\\u20d0-\\u20f0', rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
/** Used to compose unicode capture groups. */ var rsApos = "['\u2019]", rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */ var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')', rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsOptVar + reOptMod + ')*', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
    rsDingbat,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsSeq;
/** Used to match apostrophes. */ var reApos = RegExp(rsApos, 'g');
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */ var reComboMark = RegExp(rsCombo, 'g');
/** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [
        rsBreak,
        rsUpper,
        '$'
    ].join('|') + ')',
    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [
        rsBreak,
        rsUpper + rsLowerMisc,
        '$'
    ].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
    rsUpper + '+' + rsOptUpperContr,
    rsDigits,
    rsEmoji
].join('|'), 'g');
/** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
/** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',
    '\u0102': 'A',
    '\u0104': 'A',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u0105': 'a',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010a': 'C',
    '\u010c': 'C',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010b': 'c',
    '\u010d': 'c',
    '\u010e': 'D',
    '\u0110': 'D',
    '\u010f': 'd',
    '\u0111': 'd',
    '\u0112': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u0118': 'E',
    '\u011a': 'E',
    '\u0113': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u0119': 'e',
    '\u011b': 'e',
    '\u011c': 'G',
    '\u011e': 'G',
    '\u0120': 'G',
    '\u0122': 'G',
    '\u011d': 'g',
    '\u011f': 'g',
    '\u0121': 'g',
    '\u0123': 'g',
    '\u0124': 'H',
    '\u0126': 'H',
    '\u0125': 'h',
    '\u0127': 'h',
    '\u0128': 'I',
    '\u012a': 'I',
    '\u012c': 'I',
    '\u012e': 'I',
    '\u0130': 'I',
    '\u0129': 'i',
    '\u012b': 'i',
    '\u012d': 'i',
    '\u012f': 'i',
    '\u0131': 'i',
    '\u0134': 'J',
    '\u0135': 'j',
    '\u0136': 'K',
    '\u0137': 'k',
    '\u0138': 'k',
    '\u0139': 'L',
    '\u013b': 'L',
    '\u013d': 'L',
    '\u013f': 'L',
    '\u0141': 'L',
    '\u013a': 'l',
    '\u013c': 'l',
    '\u013e': 'l',
    '\u0140': 'l',
    '\u0142': 'l',
    '\u0143': 'N',
    '\u0145': 'N',
    '\u0147': 'N',
    '\u014a': 'N',
    '\u0144': 'n',
    '\u0146': 'n',
    '\u0148': 'n',
    '\u014b': 'n',
    '\u014c': 'O',
    '\u014e': 'O',
    '\u0150': 'O',
    '\u014d': 'o',
    '\u014f': 'o',
    '\u0151': 'o',
    '\u0154': 'R',
    '\u0156': 'R',
    '\u0158': 'R',
    '\u0155': 'r',
    '\u0157': 'r',
    '\u0159': 'r',
    '\u015a': 'S',
    '\u015c': 'S',
    '\u015e': 'S',
    '\u0160': 'S',
    '\u015b': 's',
    '\u015d': 's',
    '\u015f': 's',
    '\u0161': 's',
    '\u0162': 'T',
    '\u0164': 'T',
    '\u0166': 'T',
    '\u0163': 't',
    '\u0165': 't',
    '\u0167': 't',
    '\u0168': 'U',
    '\u016a': 'U',
    '\u016c': 'U',
    '\u016e': 'U',
    '\u0170': 'U',
    '\u0172': 'U',
    '\u0169': 'u',
    '\u016b': 'u',
    '\u016d': 'u',
    '\u016f': 'u',
    '\u0171': 'u',
    '\u0173': 'u',
    '\u0174': 'W',
    '\u0175': 'w',
    '\u0176': 'Y',
    '\u0177': 'y',
    '\u0178': 'Y',
    '\u0179': 'Z',
    '\u017b': 'Z',
    '\u017d': 'Z',
    '\u017a': 'z',
    '\u017c': 'z',
    '\u017e': 'z',
    '\u0132': 'IJ',
    '\u0133': 'ij',
    '\u0152': 'Oe',
    '\u0153': 'oe',
    '\u0149': "'n",
    '\u017f': 'ss'
};
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */ function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array ? array.length : 0;
    if (initAccum && length) {
        accumulator = array[++index];
    }
    while(++index < length){
        accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
}
/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function asciiWords(string) {
    return string.match(reAsciiWord) || [];
}
/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyOf(object) {
    return function(key) {
        return object == null ? undefined : object[key];
    };
}
/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */ var deburrLetter = basePropertyOf(deburredLetters);
/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */ function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
}
/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
}
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/** Built-in value references. */ var Symbol = root.Symbol;
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
        return value;
    }
    if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */ function createCompounder(callback) {
    return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function toString(value) {
    return value == null ? '' : baseToString(value);
}
/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */ function deburr(string) {
    string = toString(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}
/**
 * Converts `string` to
 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the kebab cased string.
 * @example
 *
 * _.kebabCase('Foo Bar');
 * // => 'foo-bar'
 *
 * _.kebabCase('fooBar');
 * // => 'foo-bar'
 *
 * _.kebabCase('__FOO_BAR__');
 * // => 'foo-bar'
 */ var kebabCase = createCompounder(function(result, word, index) {
    return result + (index ? '-' : '') + word.toLowerCase();
});
/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */ function words(string, pattern, guard) {
    string = toString(string);
    pattern = guard ? undefined : pattern;
    if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }
    return string.match(pattern) || [];
}
module.exports = kebabCase;
}}),
"[project]/node_modules/lodash.isobject/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash 3.0.2 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */ /**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */ function isObject(value) {
    // Avoid a V8 JIT bug in Chrome 19-20.
    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
}
module.exports = isObject;
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/accounts.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Accounts = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
/**
 * Client class to interact with the Account API which enables users to manage
 * their Vonage API Account programmatically.
 * @see {@link https://developer.nexmo.com/en/account/overview}
 *
 * @example
 * Create a standalone Account client
 *
 * ```ts
 * import { Accounts } from '@vonage/account';
 *
 * const accountClient = new Accounts({
 *  apiKey: VONAGE_API_KEY,
 *  apiSecret: VONAGE_API_SECRET
 * });
 * ```
 *
 * @example
 * Create an Account client from the Vonage client
 *
 * ```ts
 * import { Vonage } from '@vonage/server-client';
 *
 * const vonage = new Vonage({
 *   apiKey: VONAGE_API_KEY,
 *   apiSecret: VONAGE_API_SECRET
 * });
 *
 * const accountClient = vonage.account;
 * ```
 */ class Accounts extends server_client_1.Client {
    /**
     * @see {@link Client.authType}
     */ authType = server_client_1.AuthenticationType.BASIC;
    /**
     * Retrieves the current balance of the Vonage API account.
     * @see {@link https://rest.nexmo.com/account/get-balance}
     * @return {Promise<GetBalanceResponse>} The current balance of the account in EUR.
     *
     * @example
     *
     * const balance = await accontClient.getBalance();
     *
     * console.log(`The current account balance is ${balance.value} ${balance.currency}`);
     * console.log(`Auto-reload is ${balance.autoReload ? 'enabled' : 'disabled'}`);
     */ async getBalance() {
        const response = await this.sendGetRequest(`${this.config.restHost}/account/get-balance`);
        return response.data;
    }
    /**
     * Tops up the account balance when auto-reload is enabled.
     * The top-up amount corresponds to the amount added when auto-reload was enabled.
     * @see {@link https://rest.nexmo.com/account/top-up}
     * @param {string} trx - The transaction reference for the balance addition and auto-reload activation.
     * @return {Promise<TopUpBalanceResponse>} Response indicating the success of the operation.
     *
     * @example
     *
     * const response = await accountClient.topUpBalance('00X123456Y7890123Z');
     *
     * if (response['error-code'] === '200') {
     *   console.log(`The account balance has been topped up`);
     * } else {
     *   console.log(`The account balance could not be topped up`);
     * }
     *
     */ async topUpBalance(trx) {
        const response = await this.sendFormSubmitRequest(`${this.config.restHost}/account/top-up`, {
            trx
        });
        return response.data;
    }
    /**
     * Updates the default webhook URLs associated with the account for:
     * - Inbound SMS messages
     * - Delivery receipts
     * @see {@link https://rest.nexmo.com/account/settings}
     * @param {AccountCallbacks} callbacks - The new callback URLs for the account.
     * @return {Promise<AccountUpdateResponse>} Details of the updated or current settings.
     *
     * @example
     *
     * const callbacks = {
     *   moCallBackUrl: 'https://example.com/webhooks/inbound-sms',
     *   drCallBackUrl: 'https://example.com/webhooks/delivery-receipts',
     * };
     *
     * const response = await accountClient.updateAccountCallbacks(callbacks);
     *
     * for (const [key, value] of Object.entries(response)) {
     *   console.log(`New ${key}: ${value}`);
     * }
     */ async updateAccountCallbacks(callbacks) {
        const response = await this.sendFormSubmitRequest(`${this.config.restHost}/account/settings`, callbacks);
        return response.data;
    }
}
exports.Accounts = Accounts; //# sourceMappingURL=accounts.js.map
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/secrets.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Secrets = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
/**
 * Client class to interact with the Account API to create secrets in
 * their Vonage API Account programmatically.
 *
 * @remarks
 * This client is only available as a standalone client. It cannot be
 * instantiated from the server-sdk package.
 *
 * @example
 * Create a standalone Secret client
 *
 * ```ts
 * import { Secrets } from '@vonage/account';
 *
 * const secretClient = new Secrets({
 *  apiKey: VONAGE_API_KEY,
 *  apiSecret: VONAGE_API_SECRET
 * });
 * ```
 *
 */ class Secrets extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.BASIC;
    /**
     * Create a new API secret for a given API key.
     *
     * @param {string} apiKey - The API key to manage secrets for.
     * @param {string} secret - The new secret. It must follow the provided rules:
     *   - Minimum 8 characters.
     *   - Maximum 25 characters.
     *   - At least 1 lowercase character.
     *   - At least 1 uppercase character.
     *   - At least 1 digit.
     *
     * @return {Promise<APISecretResponse>} A promise that resolves to an object representing the created API secret.
     *
     * @example
     * const { id } = await secretClient.createSecret(
     *  'new-api-key',
     *  'SuperSecret123!'
     * );
     *
     * console.log(`Created secret with ID ${id}`);
     */ async createSecret(apiKey, secret) {
        const response = await this.sendPostRequest(`${this.config.apiHost}/accounts/${apiKey}/secrets`, {
            secret
        });
        return response.data;
    }
    /**
     * Revoke (delete) an existing API secret for a given API key.
     *
     * @param {string} apiKey - The API key to manage secrets for.
     * @param {string} id - The ID of the API secret to revoke.
     * @return {Promise<void>} A promise that resolves when the secret has been revoked.
     *
     * @example
     * await secretClient.deleteSecret('my-api-key', 'my-secret-id');
     */ async deleteSecret(apiKey, id) {
        await this.sendDeleteRequest(`${this.config.apiHost}/accounts/${apiKey}/secrets/${id}`);
    }
    /**
     * Retrieve the details of a specific API secret for a given API key.
     *
     * @param {string} apiKey - The API key to manage secrets for.
     * @param {string} id - The ID of the API secret to retrieve.
     * @return {Promise<APISecretResponse>} A promise that resolves to an object representing the API secret.
     *
     * @example
     * const { id } = await secretClient.getSecret('my-api-key', 'my-secret-id');
     * console.log(`Secret with ID ${id} has been retrieved`);
     *
     */ async getSecret(apiKey, id) {
        const response = await this.sendGetRequest(`${this.config.apiHost}/accounts/${apiKey}/secrets/${id}`);
        return response.data;
    }
    /**
     * List all the secrets associated with a particular API key.
     *
     * @param {string} apiKey - The API key for which to list secrets.
     *
     * @return {Promise<ListAPISecretsResponse>} A promise that resolves to an object containing a list of API secrets.
     *
     * @example
     * const response = await secretClient.listSecrets('my-api-key');
     *
     * for (const secret of response._embedded.secrets) {
     *   console.log(`Secret with ID ${secret.id} has been retrieved`);
     * }
     */ async listSecrets(apiKey) {
        const response = await this.sendGetRequest(`${this.config.apiHost}/accounts/${apiKey}/secrets`);
        return response.data;
    }
}
exports.Secrets = Secrets; //# sourceMappingURL=secrets.js.map
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/types/AccountCallbacks.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AccountCallbacks.js.map
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/types/Response/APISecretResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=APISecretResponse.js.map
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/types/Response/AccountUpdateResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AccountUpdateResponse.js.map
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/types/Response/GetBalanceResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=GetBalanceResponse.js.map
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/types/Response/ListAPISecretsResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ListAPISecretsResponse.js.map
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/types/Response/TopUpBalanceResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=TopUpBalanceResponse.js.map
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/types/Response/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/types/Response/APISecretResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/types/Response/AccountUpdateResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/types/Response/GetBalanceResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/types/Response/ListAPISecretsResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/types/Response/TopUpBalanceResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/types/AccountCallbacks.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/types/Response/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/accounts/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Secrets = exports.Accounts = void 0;
var accounts_1 = __turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/accounts.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Accounts", {
    enumerable: true,
    get: function() {
        return accounts_1.Accounts;
    }
});
var secrets_1 = __turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/secrets.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Secrets", {
    enumerable: true,
    get: function() {
        return secrets_1.Secrets;
    }
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Application.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=Application.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/ApplicationPageList.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ApplicationPageList.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityBulk.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityBulk.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityMeetings.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityMeetings.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityMessages.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityMessages.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityRTC.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityRTC.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityVerify.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityVerify.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityVoice.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityVoice.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityWebhook.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityWebhook.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/ListApplicationParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ListApplicationParams.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Response/ApplicationPageResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ApplicationPageResponse.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Response/ApplicationResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ApplicationResponse.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityBulkResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityBulkResponse.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityMeetingsResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityMeetingsResponse.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityMessagesResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityMessagesResponse.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityRTCResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityRTCResponse.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityVerifyResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityVerifyResponse.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityVoiceResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityVoiceResponse.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityWebhookResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CapabilityWebhookResponse.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/Response/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Response/ApplicationPageResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Response/ApplicationResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityBulkResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityMeetingsResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityMessagesResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityRTCResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityVerifyResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityVoiceResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Response/CapabilityWebhookResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Application.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/ApplicationPageList.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityBulk.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityMeetings.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityMessages.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityRTC.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityVerify.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityVoice.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/CapabilityWebhook.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/ListApplicationParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/Response/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/enums/VoiceRegions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VoiceRegions = void 0;
/**
 * Enumeration representing different voice regions.
 *
 * @remarks
 * Selecting a region means all inbound, programmable SIP and SIP connect calls
 * will be sent to the selected region unless the call is sent to a regional endpoint.
 * If the call is using a regional endpoint this will override the application setting.
 */ var VoiceRegions;
(function(VoiceRegions) {
    /**
     * @description North America - East region
     */ VoiceRegions["NA_EAST"] = "na-east";
    /**
     * @description North America - West region
     */ VoiceRegions["NA_WEST"] = "na-west";
    /**
     * @description Europe - West region
     */ VoiceRegions["EU_WEST"] = "eu-west";
    /**
     * @description Europe - East region
     */ VoiceRegions["EU_EAST"] = "eu-east";
    /**
     * @description Asia-Pacific - Singapore region
     */ VoiceRegions["APAC_SNG"] = "apac-sng";
    /**
     * @description Asia-Pacific - Australia region
     */ VoiceRegions["APAC_AUSTRALIA"] = "apac-australia";
})(VoiceRegions || (exports.VoiceRegions = VoiceRegions = {})); //# sourceMappingURL=VoiceRegions.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/enums/VoiceRegions.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/applications.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Applications = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
const apiToApplication = (response)=>{
    delete response._links;
    return server_client_1.Client.transformers.camelCaseObjectKeys(response, true, true);
};
class Applications extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.BASIC;
    /**
     * Retrieves a list of applications with optional pagination parameters.
     *
     * @remarks
     * This is used to get a specific page of applications. This will
     * return the `snake_case` and the `camelCase` response. Using `snake_case`
     * is considered deprecated
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/application.v2#listApplication}
     *
     * @param {ListApplicationParams} params - The filter parameters.
     * @return {Promise<ApplicationPageResponse>} - A promise resolving to the list of applications.
     *
     * @example
     * List a single page of applications
     *
     * ```ts
     * const applications = await applicationClient.listApplications({});
     *
     * applications.applications.forEach(application => {
     *   console.log(application.name);
     * });
     * ```
     */ async listApplications(params) {
        return this.getApplicationPage(params);
    }
    /**
     * Retrieves all applications, iterating over paginated results.
     *
     * @remarks
     * This will keep calling the API until there are no pages left. This will
     * return the `snake_case` and the `camelCase` response. Using `snake_case`
     * is considered deprecated
     *
     * @param {ListApplicationParams} [params={}] - Optional filter parameters.
     * @yields {MergedApplication} - Yields application items.
     * @return {AsyncGenerator<MergedApplication, void, undefined>} - An asynchronous generator.
     *
     * @example
     * List applications with pagination using an iterator
     *
     * ```ts
     * for await (const application of applicationClient.listAllApplications()) {
     *   console.log(application.name);
     * }
     * ```
     */ async *listAllApplications(params = {}) {
        let next = null;
        params.page = params?.page || 1;
        do {
            const resp = await this.getApplicationPage(params);
            yield* resp._embedded?.applications || [];
            next = resp._links?.next;
            params.page++;
        }while (next)
    }
    /**
     * Retrieves a page of applications based on filter parameters.
     *
     * @param {ListApplicationParams} filter - The filter parameters for pagination.
     * @return {Promise<ApplicationPageList>} - A promise resolving to a page of applications.
     *
     * @remarks
     * This will return the `snake_case` and the `camelCase` response. Using
     * `snake_case` is considered deprecated
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/application.v2#listApplication}
     *
     * @example
     * Get a single page of applications
     *
     * ```ts
     * const applications = await applicationClient.getApplicationPage({
     *   page: 1,
     *   size: 10
     * });
     *
     * applications.applications.forEach(application => {
     *   console.log(application.name);
     * });
     * ```
     */ async getApplicationPage(filter) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v2/applications`, server_client_1.Client.transformers.snakeCaseObjectKeys(filter));
        if (resp.data._embedded?.applications) {
            resp.data._embedded.applications = resp.data._embedded.applications.map(apiToApplication);
        }
        return {
            ...resp.data,
            totalItems: resp.data.total_items,
            totalPages: resp.data.total_pages,
            pageSize: resp.data.page_size
        };
    }
    /**
     * Creates a new application with the provided details.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/application.v2#createApplication}
     *
     * @param {Application} application - The application details to be created.
     * @return {Promise<MergedApplication>} - A promise resolving to the created application.
     *
     * @example
     * Create a new application
     *
     * ```ts
     * const application = await applicationClient.createApplication({
     *   name: 'My Application',
     *   capabilities: {
     *     voice: {
     *       webhooks: {
     *         answerUrl: {
     *           address: 'https://example.com/answer',
     *           httpMethod: 'GET'
     *         },
     *         eventUrl: {
     *           address: 'https://example.com/event',
     *           httpMethod: 'POST'
     *         }
     *       }
     *     }
     *   }
     * });
     *
     * console.log(application.id);
     * ```
     */ async createApplication(application) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v2/applications`, server_client_1.Client.transformers.snakeCaseObjectKeys(application, true));
        return apiToApplication(resp.data);
    }
    /**
     * Retrieves an application by its unique identifier.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/application.v2#getApplication}
     *
     * @param {string} applicationId - The unique identifier of the application to retrieve.
     * @return {Promise<MergedApplication>} - A promise resolving to the retrieved application.
     *
     * @example
     * Retrieve an application
     *
     * ```ts
     * const application = await applicationClient.getApplication(APPLICATION_ID);
     * console.log(application.name);
     * ```
     */ async getApplication(applicationId) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v2/applications/${applicationId}`);
        return apiToApplication(resp.data);
    }
    /**
     * Updates an existing application with the provided details.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/application.v2#updateApplication}
     *
     * @param {Application} application - The application details to be updated.
     * @return {Promise<MergedApplication>} - A promise resolving to the updated application.
     *
     * @example
     * Update an application
     *
     * ```ts
     * const application = await applicationClient.updateApplication({
     *   id: APPLICATION_ID,
     *   name: 'My Application',
     * });
     * console.log(application.name);
     * ```
     */ async updateApplication(application) {
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v2/applications/${application.id}`, server_client_1.Client.transformers.snakeCaseObjectKeys(application, true));
        return apiToApplication(resp.data);
    }
    /**
     * Deletes an application by its unique identifier.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/application.v2#deleteApplication}
     *
     * @param {string} applicationId - The unique identifier of the application to delete.
     * @return {Promise<void>} - A promise indicating the successful deletion of the application.
     *
     * @example
     * Delete an application
     *
     * ```ts
     * await applicationClient.deleteApplication(APPLICATION_ID);
     * ```
     */ async deleteApplication(applicationId) {
        await this.sendDeleteRequest(`${this.config.apiHost}/v2/applications/${applicationId}`);
    }
}
exports.Applications = Applications; //# sourceMappingURL=applications.js.map
}}),
"[project]/node_modules/@vonage/applications/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * A library to allow management of your Vonage Applications.
 *
 * @remarks
 * A Vonage API application contains the security and configuration information
 * you need to connect to Vonage endpoints and use the Vonage APIs. Each Vonage
 * application created can support multiple capabilities - for example you can
 * create an Application that supports using the Voice, Messages and RTC APIs.
 *
 * @link https://developer.vonage.com/en/application/overview
 *
 * @packageDocumentation
 */ __exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/applications.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/number-insights.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NumberInsights = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
/**
 * Client for the Vonage Number Insights API.
 *
 * @example
 * Create a standalone Number Insight client
 *
 * ```ts
 * import { NumberInsights } from '@vonage/numberInsight';
 *
 * const numberInsightClient = new NumberInsights({
 *  apiKey: VONAGE_API_KEY,
 *  apiSecret: VONAGE_API_SECRET
 * });
 * ```
 *
 * @example
 * Create an Number Insight client from the Vonage client
 *
 * ```ts
 * import { Vonage } from '@vonage/server-client';
 *
 * const vonage = new Vonage({
 *   apiKey: VONAGE_API_KEY,
 *   apiSecret: VONAGE_API_SECRET
 * });
 *
 * const numberInsightClient = vonage.numberInsight;
 * ```
 */ class NumberInsights extends server_client_1.Client {
    /**
     * @see {@link Client.authType}
     */ authType = server_client_1.AuthenticationType.BASIC;
    /**
     * Perform an advanced number lookup operation.
     *
     * @param {string} phoneNumber - The phone number to perform the lookup for.
     * @param {AdvancedLookupOptions} options - Additional options for the lookup.
     * @return {Promise<AdvancedResponse>} A promise that resolves to the advanced lookup response.
     * @example
     * ```ts
     * const lookup = await numberInsightsClient.advancedLookup('15555551212');
     * console.log(`Ths number is ${lookup.valid_number}`);
     * ```
     */ async advancedLookup(phoneNumber, options) {
        const params = {
            number: phoneNumber,
            ...options
        };
        const resp = await this.sendGetRequest(`${this.config.apiHost}/ni/advanced/json`, params);
        return resp.data;
    }
    /**
     * Perform an asynchronous advanced number lookup operation.
     *
     * @param {string} phoneNumber - The phone number to perform the lookup for.
     * @param {string} callback - The callback URL for receiving the async lookup response.
     * @param {StandardLookupOptions} options - Additional options for the lookup.
     * @return {Promise<AsyncAdvancedResponse>} A promise that resolves to the async advanced lookup response.
     *
     * @example
     * ```ts
     * const lookup = await numberInsightsClient.asyncAdvancedLookup(
     *   '15555551212',
     *   'https://example.com/number-insights',
     * );
     * console.log(`The request ID is ${lookup.request_id}`);
     * ```
     *
     * @example
     * Lookup with the CNAME option:
     * ```ts
     * const lookup = await numberInsightsClient.asyncAdvancedLookup(
     *   '15555551212',
     *   'https://example.com/number-insights',
     *   { cname: true },
     * );
     * console.log(`The request ID is ${lookup.request_id}`);
     * ```
     */ async asyncAdvancedLookup(phoneNumber, callback, options) {
        const params = {
            number: phoneNumber,
            callback,
            ...options
        };
        const resp = await this.sendGetRequest(`${this.config.apiHost}/ni/advanced/async/json`, params);
        return resp.data;
    }
    /**
     * Perform a basic number lookup operation.
     *
     * @param {string} phoneNumber - The phone number to perform the lookup for.
     * @param {BasicLookupOptions} options - Additional options for the lookup.
     * @return {Promise<BasicResponse>} A promise that resolves to the basic lookup response.
     *
     * @example
     * ```ts
     * const lookup = await numberInsightsClient.basicLookup(
     *   '15555551212',
     * );
     * console.log(`The request ID is ${lookup.request_id}`);
     * ```
     *
     * @example
     * Lookup with the country option:
     * ```ts
     * const lookup = await numberInsightsClient.basicLookup(
     *   '15555551212',
     *   { country: 'US' },
     * );
     * console.log(`The request ID is ${lookup.request_id}`);
     * ```
     */ async basicLookup(phoneNumber, options) {
        const params = {
            number: phoneNumber,
            ...options
        };
        const resp = await this.sendGetRequest(`${this.config.apiHost}/ni/basic/json`, params);
        return resp.data;
    }
    /**
     * Perform a standard number lookup operation.
     *
     * @param {string} phoneNumber - The phone number to perform the lookup for.
     * @param {StandardLookupOptions} options - Additional options for the lookup.
     * @return {Promise<StandardResponse>} A promise that resolves to the standard lookup response.
     *
     * @example
     * ```ts
     * const lookup = await numberInsightsClient.standardLookup(
     *   '15555551212',
     * );
     * console.log(`The request ID is ${lookup.request_id}`);
     * ```
     *
     * @example
     * Lookup with the cname option:
     * ```ts
     * const lookup = await numberInsightsClient.standardLookup(
     *   '15555551212',
     *   { cname: true },
     * );
     * console.log(`The request ID is ${lookup.request_id}`);
     * ```
     */ async standardLookup(phoneNumber, options) {
        const params = {
            number: phoneNumber,
            ...options
        };
        const resp = await this.sendGetRequest(`${this.config.apiHost}/ni/standard/json`, params);
        return resp.data;
    }
}
exports.NumberInsights = NumberInsights; //# sourceMappingURL=number-insights.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/enums/CallerType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CallerType = void 0;
/**
 * Enum representing the type of caller for a phone number.
 */ var CallerType;
(function(CallerType) {
    /**
     * The value will be "unknown" if the information about the caller type is not available.
     */ CallerType["UNKNOWN"] = "unknown";
    /**
     * The value will be "business" if the owner of a phone number is a business.
     */ CallerType["BUSINESS"] = "business";
    /**
     * The value will be "consumer" if the owner of a phone number is an individual.
     */ CallerType["CONSUMER"] = "consumer";
})(CallerType || (exports.CallerType = CallerType = {})); //# sourceMappingURL=CallerType.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/enums/LookupOutcome.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LookupOutcome = void 0;
/**
 * Enum representing the outcomes of a lookup operation.
 */ var LookupOutcome;
(function(LookupOutcome) {
    /**
     * The lookup operation was successful.
     */ LookupOutcome[LookupOutcome["SUCCESS"] = 0] = "SUCCESS";
    /**
     * The lookup operation partially succeeded.
     */ LookupOutcome[LookupOutcome["PARTIAL_SUCCESS"] = 1] = "PARTIAL_SUCCESS";
    /**
     * The lookup operation failed.
     */ LookupOutcome[LookupOutcome["FAILED"] = 2] = "FAILED";
})(LookupOutcome || (exports.LookupOutcome = LookupOutcome = {})); //# sourceMappingURL=LookupOutcome.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/enums/NetworkType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NetworkType = void 0;
/**
 * Enum representing the type of network associated with a phone number.
 */ var NetworkType;
(function(NetworkType) {
    /**
     * The phone number is associated with a mobile network.
     */ NetworkType["MOBILE"] = "mobile";
    /**
     * The phone number is associated with a landline network.
     */ NetworkType["LANDLINE"] = "landline";
    /**
     * The phone number is associated with a premium landline network.
     */ NetworkType["LANDLINE_PREMIUM"] = "landline_premium";
    /**
     * The phone number is associated with a toll-free landline network.
     */ NetworkType["LANDLINE_TOLLFREE"] = "landline_tollfree";
    /**
     * The phone number is associated with a virtual network.
     */ NetworkType["VIRTUAL"] = "virtual";
    /**
     * The type of network associated with the phone number is unknown.
     */ NetworkType["UNKNOWN"] = "unknown";
    /**
     * The phone number is associated with a pager network.
     */ NetworkType["PAGER"] = "pager";
})(NetworkType || (exports.NetworkType = NetworkType = {})); //# sourceMappingURL=NetworkType.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/enums/Reachable.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Reachable = void 0;
/**
 * Enum representing the reachability status of a phone number.
 */ var Reachable;
(function(Reachable) {
    /**
     * The reachability status is unknown.
     */ Reachable["UNKNOWN"] = "unknown";
    /**
     * The phone number is reachable.
     */ Reachable["REACHABLE"] = "reachable";
    /**
     * The phone number is undeliverable.
     */ Reachable["UNDELIVERABLE"] = "undeliverable";
    /**
     * The phone number's owner is absent.
     */ Reachable["ABSENT"] = "absent";
    /**
     * The phone number is invalid or a bad number.
     */ Reachable["BAD_NUMBER"] = "bad_number";
    /**
     * The phone number is blacklisted.
     */ Reachable["BLACKLISTED"] = "blacklisted";
})(Reachable || (exports.Reachable = Reachable = {})); //# sourceMappingURL=Reachable.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/enums/ValidNumber.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ValidNumber = void 0;
/**
 * Enum representing the validity status of a phone number.
 */ var ValidNumber;
(function(ValidNumber) {
    /**
     * The validity status is unknown.
     */ ValidNumber["UNKNOWN"] = "unknown";
    /**
     * The phone number is valid.
     */ ValidNumber["VALID"] = "valid";
    /**
     * The phone number is not valid.
     */ ValidNumber["NOT_VALID"] = "not_valid";
    /**
     * The validity of the phone number is inferred.
     */ ValidNumber["INFERRED"] = "inferred";
    /**
     * The inferred validity of the phone number is not valid.
     */ ValidNumber["INFERRED_NOT_VALID"] = "inferred_not_valid";
})(ValidNumber || (exports.ValidNumber = ValidNumber = {})); //# sourceMappingURL=ValidNumber.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/enums/CallerType.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/enums/LookupOutcome.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/enums/NetworkType.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/enums/Reachable.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/enums/ValidNumber.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/AdvancedResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AdvancedResponse.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/AsyncAdvancedResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AsyncAdvancedResponse.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/BasicResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=BasicResponse.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/CallerIdentityResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallerIdentityResponse.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/CarrierInforResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CarrierInforResponse.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/RealTimeDataResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=RealTimeDataResponse.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/RoamingDataResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=RoamingDataResponse.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/StandardResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=StandardResponse.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/AdvancedResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/AsyncAdvancedResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/BasicResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/CallerIdentityResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/CarrierInforResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/RealTimeDataResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/RoamingDataResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/StandardResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/AdvancedLookupOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AdvancedLookupOptions.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/AsyncAdvancedLookupOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AsyncAdvancedLookupOptions.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/BasicLookupOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=BasicLookupOptions.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/NumberInsightsResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumberInsightsResponse.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/StandardLookupOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=StandardLookupOptions.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/Responses/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/AdvancedLookupOptions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/AsyncAdvancedLookupOptions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/BasicLookupOptions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/NumberInsightsResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/StandardLookupOptions.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/number-insights/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/number-insights.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/enums/Feature.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Feature = void 0;
/**
 * Enumeration of features for a virtual number.
 */ var Feature;
(function(Feature) {
    /**
     * Supports Multimedia Messaging Service (MMS).
     */ Feature["MMS"] = "MMS";
    /**
     * Supports Short Message Service (SMS).
     */ Feature["SMS"] = "SMS";
    /**
     * Supports Voice calling.
     */ Feature["VOICE"] = "VOICE";
})(Feature || (exports.Feature = Feature = {})); //# sourceMappingURL=Feature.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/enums/LineType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LineType = void 0;
/**
 * Enumeration of line types for virtual numbers.
 */ var LineType;
(function(LineType) {
    /**
     * Landline type.
     */ LineType["LANDLINE"] = "landline";
    /**
     * Mobile LVN (Local Virtual Number) type.
     */ LineType["MOBILE_LVN"] = "mobile-lvn";
    /**
     * Landline toll-free type.
     */ LineType["LANDLINE_TOLL_FREE"] = "landline-toll-free";
})(LineType || (exports.LineType = LineType = {})); //# sourceMappingURL=LineType.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/enums/MessagesCallbackTypeEnum.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MessagesCallbackTypeEnum = void 0;
/**
 * Enumeration of messages callback types.
 */ var MessagesCallbackTypeEnum;
(function(MessagesCallbackTypeEnum) {
    /**
     * Callback type for an application.
     */ MessagesCallbackTypeEnum["App"] = "app";
})(MessagesCallbackTypeEnum || (exports.MessagesCallbackTypeEnum = MessagesCallbackTypeEnum = {})); //# sourceMappingURL=MessagesCallbackTypeEnum.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/enums/SearchPattern.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SearchPattern = void 0;
/**
 * Enumeration of search patterns.
 */ var SearchPattern;
(function(SearchPattern) {
    /**
     * Indicates a search for values that start with the given pattern.
     */ SearchPattern[SearchPattern["START_WITH"] = 0] = "START_WITH";
    /**
     * Indicates a search for values that contain the given pattern.
     */ SearchPattern[SearchPattern["CONTAINS"] = 1] = "CONTAINS";
    /**
     * Indicates a search for values that end with the given pattern.
     */ SearchPattern[SearchPattern["ENDS_WITH"] = 2] = "ENDS_WITH";
})(SearchPattern || (exports.SearchPattern = SearchPattern = {})); //# sourceMappingURL=SearchPattern.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/enums/VoiceCallbackTypeEnum.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VoiceCallbackTypeEnum = void 0;
/**
 * Enumeration of voice callback types.
 */ var VoiceCallbackTypeEnum;
(function(VoiceCallbackTypeEnum) {
    /**
     * Callback type for SIP.
     */ VoiceCallbackTypeEnum["Sip"] = "sip";
    /**
     * Callback type for telephone (tel).
     */ VoiceCallbackTypeEnum["Tel"] = "tel";
    /**
     * Callback type for an application.
     */ VoiceCallbackTypeEnum["App"] = "app";
})(VoiceCallbackTypeEnum || (exports.VoiceCallbackTypeEnum = VoiceCallbackTypeEnum = {})); //# sourceMappingURL=VoiceCallbackTypeEnum.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/enums/Feature.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/enums/LineType.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/enums/MessagesCallbackTypeEnum.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/enums/SearchPattern.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/enums/VoiceCallbackTypeEnum.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/Country.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=Country.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersAvailableList.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersAvailableList.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersAvailableNumber.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersAvailableNumber.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersClassParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersClassParameters.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersEmptyResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersEmptyResponse.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersOwnedFilter.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersOwnedFilter.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersOwnedList.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersOwnedList.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersOwnedNumber.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersOwnedNumber.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersParams.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersQueryOwnedFilter.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersQueryOwnedFilter.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersQueryParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersQueryParams.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersQuerySearchFilter.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersQuerySearchFilter.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersQueryUpdateParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersQueryUpdateParams.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersResponse.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersSearchFilter.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersSearchFilter.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersSearchSimple.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersSearchSimple.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersUpdateParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NumbersUpdateParams.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/Country.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersAvailableList.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersAvailableNumber.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersClassParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersEmptyResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersOwnedFilter.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersOwnedList.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersOwnedNumber.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersQueryOwnedFilter.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersQueryParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersQuerySearchFilter.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersQueryUpdateParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersSearchFilter.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersSearchSimple.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/NumbersUpdateParams.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/numbers.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Numbers = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/enums/index.js [app-rsc] (ecmascript)");
const lodash_omit_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/lodash.omit/index.js [app-rsc] (ecmascript)"));
const buildSearch = ({ endsWith, startsWith, contains, searchPattern, pattern, country })=>{
    searchPattern = searchPattern ?? enums_1.SearchPattern.CONTAINS;
    if (pattern) {
        return {
            search_pattern: searchPattern,
            pattern: pattern,
            country: country
        };
    }
    // order of precedent contains, endsWith, startsWith
    if (contains) {
        return {
            search_pattern: enums_1.SearchPattern.CONTAINS,
            pattern: contains,
            country: country
        };
    }
    if (endsWith) {
        return {
            search_pattern: enums_1.SearchPattern.ENDS_WITH,
            pattern: endsWith,
            country: country
        };
    }
    if (startsWith) {
        return {
            search_pattern: enums_1.SearchPattern.START_WITH,
            pattern: startsWith,
            country: country
        };
    }
    return {};
};
const sortFeatures = (features)=>{
    // API expects these as a CSV in a specific order
    if (features.length > 4) {
        throw new Error('Invalid number of features request');
    }
    if (features.length === 1) {
        return features.join();
    }
    if (features.length === 3) {
        return [
            enums_1.Feature.SMS,
            enums_1.Feature.MMS,
            enums_1.Feature.VOICE
        ].join(',');
    }
    const newOrder = [];
    if (features.includes(enums_1.Feature.SMS)) {
        newOrder.push(enums_1.Feature.SMS);
    }
    if (features.includes(enums_1.Feature.VOICE)) {
        newOrder.push(enums_1.Feature.VOICE);
    }
    if (features.includes(enums_1.Feature.MMS)) {
        newOrder.push(enums_1.Feature.MMS);
    }
    return newOrder.join(',');
};
/**
 * Client for buying, canceling, and searching for phone numbers.
 *
 * @example
 * Create a standalone Numbers client
 *
 * ```ts
 * import { Numbers } from '@vonage/numbers';
 *
 * const numbersClient = new Numbers({
 *  apiKey: VONAGE_API_KEY,
 *  apiSecret: VONAGE_API_SECRET
 * });
 * ```
 *
 * @example
 * Create an Numbers client from the Vonage client
 *
 * ```ts
 * import { Vonage } from '@vonage/server-client';
 *
 * const vonage = new Vonage({
 *   apiKey: VONAGE_API_KEY,
 *   apiSecret: VONAGE_API_SECRET
 * });
 *
 * const numbersClient = vonage.numbers;
 * ```
 */ class Numbers extends server_client_1.Client {
    /**
     * @see {@link Client.authType}
     */ authType = server_client_1.AuthenticationType.BASIC;
    /**
     * Buy a phone number.
     *
     * @param {NumbersParams} params - The parameters for buying a number.
     * @return {Promise<NumbersEmptyResponse>} A promise that resolves to an empty response or an error response.
     *
     * @example
     * Buy a phone number
     * ```ts
     * import { Country } from '@vonage/numbers';
     * const resp = await numbersClient.buyNumber({
     *   country: Country.US,
     *   msisdn: '15555555555'
     * });
     *
     * if (resp.errorCode) {
     *   console.log(`Error: ${resp.errorCodeLabel}`);
     * } else {
     *   console.log('Number bought successfully');
     * }
     * ```
     */ async buyNumber(params) {
        const resp = await this.sendFormSubmitRequest(`${this.config.restHost}/number/buy`, server_client_1.Client.transformers.snakeCaseObjectKeys(params));
        return {
            errorCode: `${resp.data['error-code']}`,
            errorCodeLabel: resp.data['error-code-label']
        };
    }
    /**
     * Cancel a phone number.
     *
     * @param {NumbersParams} params - The parameters for canceling a number.
     * @return {Promise<NumbersEmptyResponse>} A promise that resolves to an empty response or an error response.
     *
     * @example
     * Cancel a phone number
     *
     * ```ts
     *
     * const resp = await numbersClient.cancelNumber({
     *  msisdn: '15555555555'
     * });
     *
     * if (resp.errorCode) {
     *   console.log(`Error: ${resp.errorCodeLabel}`);
     * } else {
     *   console.log('Number cancled successfully');
     * }
     * ```
     */ async cancelNumber(params) {
        const resp = await this.sendFormSubmitRequest(`${this.config.restHost}/number/cancel`, server_client_1.Client.transformers.snakeCaseObjectKeys(params));
        return {
            errorCode: `${resp.data['error-code']}`,
            errorCodeLabel: resp.data['error-code-label']
        };
    }
    /**
     * Retrieves a list of available phone numbers based on the provided filter criteria.
     *
     * @param {NumbersSearchFilter} filter - The filter criteria for searching available numbers.
     * @return {Promise<NumbersAvailableList>} A promise that resolves to a list of available phone numbers or an error response.
     *
     * @example
     * Search for available numbers that can send SMS and make voice calls
     * ```ts
     * import { Country, Feature } from '@vonage/numbers';
     *
     * const resp = await numbersClient.getAvailableNumbers({
     *   country: Country.US,
     *   features: [Feature.SMS, Feature.VOICE],
     * });
     *
     * console.log(`There are ${resp.count} numbers available`);
     *
     * for (const number of resp.numbers) {
     *   console.log(number.msisdn);
     *   console.log(number.cost);
     *   console.log(number.type);
     * }
     * ```
     */ async getAvailableNumbers(filter) {
        (0, lodash_omit_1.default)(server_client_1.Client.transformers.snakeCaseObjectKeys({
            ...filter,
            ...buildSearch(filter),
            country: filter.country
        }), [
            'starts_with',
            'contains',
            'ends_with',
            'search_pattern'
        ]);
        const resp = await this.sendGetRequest(`${this.config.restHost}/number/search`, {
            ...filter.country ? {
                country: filter.country
            } : {},
            ...filter.type ? {
                type: filter.type
            } : {},
            ...filter.size ? {
                size: filter.size
            } : {},
            ...filter.index ? {
                index: filter.index
            } : {},
            ...buildSearch(filter),
            ...filter.features ? {
                features: sortFeatures(filter.features)
            } : {}
        });
        return resp.data;
    }
    /**
     * Retrieves a list of owned phone numbers based on the provided filter criteria.
     *
     * @param {NumbersOwnedFilter} [filter] - The filter criteria for searching owned numbers.
     * @return {Promise<NumbersOwnedList>} A promise that resolves to a list of owned phone numbers or an error response.
     * @example
     * Search for owned numbers
     * ```ts
     * const resp = await numbersClient.getOwnedNumbers();
     * console.log(`There are ${resp.count} numbers owned`);
     * for (const number of resp.numbers) {
     *   console.log(number.msisdn);
     *   console.log(number.type);
     * }
     * ```
     */ async getOwnedNumbers(filter) {
        if (!filter) {
            filter = {};
        }
        const resp = await this.sendGetRequest(`${this.config.restHost}/account/numbers`, server_client_1.Client.transformers.snakeCaseObjectKeys(filter));
        return resp.data;
    }
    /**
     * Updates the settings of a phone number.
     *
     * @param {NumbersUpdateParams} [params] - The parameters for updating a phone number.
     * @return {Promise<NumbersEmptyResponse>} A promise that resolves to an empty response or an error response.
     *
     * @example
     *
     * ```ts
     * const resp = await numbersClient.updateNumber({
     *   msisdn: '15555555555',
     *   voiceCallbackType: 'app',
     *   voiceCallbackValue: 'APPLICATION_ID',
     *   voiceStatusCallback: 'https://example.com/webhooks/voice',
     * });
     *
     * if (resp.errorCode) {
     *   console.log(`Error: ${resp.errorCodeLabel}`);
     * } else {
     *   console.log('Number bought successfully');
     * }
     * ```
     */ async updateNumber(params) {
        const appId = params.applicationId || params.appId;
        delete params.applicationId;
        delete params.appId;
        const resp = await this.sendFormSubmitRequest(`${this.config.restHost}/number/update`, {
            country: params.country,
            msisdn: params.msisdn,
            ...appId ? {
                app_id: appId
            } : {},
            moHttpUrl: params.moHttpUrl,
            moSmppSysType: params.moSmppSysType,
            voiceCallbackType: params.voiceCallbackType,
            voiceCallbackValue: params.voiceCallbackValue,
            voiceStatusCallback: params.voiceStatusCallback
        });
        return {
            errorCode: `${resp.data['error-code']}`,
            errorCodeLabel: resp.data['error-code-label']
        };
    }
}
exports.Numbers = Numbers; //# sourceMappingURL=numbers.js.map
}}),
"[project]/node_modules/@vonage/numbers/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/numbers.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/lodash.omit/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', symbolTag = '[object Symbol]';
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */ function apply(func, thisArg, args) {
    switch(args.length){
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
}
/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */ function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
}
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */ function arrayIncludesWith(array, value, comparator) {
    var index = -1, length = array ? array.length : 0;
    while(++index < length){
        if (comparator(value, array[index])) {
            return true;
        }
    }
    return false;
}
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function arrayMap(array, iteratee) {
    var index = -1, length = array ? array.length : 0, result = Array(length);
    while(++index < length){
        result[index] = iteratee(array[index], index, array);
    }
    return result;
}
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while(++index < length){
        array[offset + index] = values[index];
    }
    return array;
}
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while(fromRight ? index-- : ++index < length){
        if (predicate(array[index], index, array)) {
            return index;
        }
    }
    return -1;
}
/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
    }
    var index = fromIndex - 1, length = array.length;
    while(++index < length){
        if (array[index] === value) {
            return index;
        }
    }
    return -1;
}
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */ function baseIsNaN(value) {
    return value !== value;
}
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n){
        result[index] = iteratee(index);
    }
    return result;
}
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
/**
 * Checks if a cache value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function cacheHas(cache, key) {
    return cache.has(key);
}
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */ function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
        try {
            result = !!(value + '');
        } catch (e) {}
    }
    return result;
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
/** Used for built-in method references. */ var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to detect overreaching core-js shims. */ var coreJsData = root['__core-js_shared__'];
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
}();
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/** Built-in value references. */ var Symbol = root.Symbol, getPrototype = overArg(Object.getPrototypeOf, Object), propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols, nativeMax = Math.max;
/* Built-in method references that are verified to be native. */ var Map = getNative(root, 'Map'), nativeCreate = getNative(Object, 'create');
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
}
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
}
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
}
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
        data.pop();
    } else {
        splice.call(data, index, 1);
    }
    return true;
}
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        data.push([
            key,
            value
        ]);
    } else {
        data[index][1] = value;
    }
    return this;
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
    };
}
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
}
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */ function SetCache(values) {
    var index = -1, length = values ? values.length : 0;
    this.__data__ = new MapCache;
    while(++index < length){
        this.add(values[index]);
    }
}
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */ function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
}
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */ function setCacheHas(value) {
    return this.__data__.has(value);
}
// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    // Safari 9 makes `arguments.length` enumerable in strict mode.
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for(var key in value){
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
            result.push(key);
        }
    }
    return result;
}
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) {
            return length;
        }
    }
    return -1;
}
/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */ function baseDifference(array, values, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
    if (!length) {
        return result;
    }
    if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
    }
    if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
    }
    outer: while(++index < length){
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while(valuesIndex--){
                if (values[valuesIndex] === computed) {
                    continue outer;
                }
            }
            result.push(value);
        } else if (!includes(values, computed, comparator)) {
            result.push(value);
        }
    }
    return result;
}
/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */ function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while(++index < length){
        var value = array[index];
        if (depth > 0 && predicate(value)) {
            if (depth > 1) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
                arrayPush(result, value);
            }
        } else if (!isStrict) {
            result[result.length] = value;
        }
    }
    return result;
}
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
        return false;
    }
    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeysIn(object) {
    if (!isObject(object)) {
        return nativeKeysIn(object);
    }
    var isProto = isPrototype(object), result = [];
    for(var key in object){
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
        }
    }
    return result;
}
/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} props The property identifiers to pick.
 * @returns {Object} Returns the new object.
 */ function basePick(object, props) {
    object = Object(object);
    return basePickBy(object, props, function(value, key) {
        return key in object;
    });
}
/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} props The property identifiers to pick from.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */ function basePickBy(object, props, predicate) {
    var index = -1, length = props.length, result = {};
    while(++index < length){
        var key = props[index], value = object[key];
        if (predicate(value, key)) {
            result[key] = value;
        }
    }
    return result;
}
/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */ function baseRest(func, start) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while(++index < length){
            array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while(++index < start){
            otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
    };
}
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
}
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
/**
 * Creates an array of the own and inherited enumerable symbol properties
 * of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while(object){
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
    }
    return result;
};
/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */ function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
        for(var key in Object(object)){
            result.push(key);
        }
    }
    return result;
}
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */ function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
        return value;
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {}
        try {
            return func + '';
        } catch (e) {}
    }
    return '';
}
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ function isArguments(value) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */ function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
}
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
}
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */ function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable string keyed properties of `object` that are
 * not omitted.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [props] The property identifiers to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */ var omit = baseRest(function(object, props) {
    if (object == null) {
        return {};
    }
    props = arrayMap(baseFlatten(props, 1), toKey);
    return basePick(object, baseDifference(getAllKeysIn(object), props));
});
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function stubArray() {
    return [];
}
module.exports = omit;
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/pricing.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Pricing = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
/**
 * The Pricing API allows you to retrieve pricing information for all countries
 * and a specific service type, for a specific country and service type, or for
 * a specific prefix and service type.
 *
 * @example
 * Create a standalone Pricing client
 *
 * ```ts
 * import { Pricing } from '@vonage/pricing';
 *
 * const pricingClient = new Pricing({
 *  apiKey: VONAGE_API_KEY,
 *  apiSecret: VONAGE_API_SECRET
 * });
 * ```
 *
 * @example
 * Create an Pricing client from the Vonage client
 *
 * ```ts
 * import { Vonage } from '@vonage/server-client';
 *
 * const vonage = new Vonage({
 *   apiKey: VONAGE_API_KEY,
 *   apiSecret: VONAGE_API_SECRET
 * });
 *
 * const pricingClient = vonage.pricing;
 * ```
 */ class Pricing extends server_client_1.Client {
    /**
     * @see {@link Client.authType}
     */ authType = server_client_1.AuthenticationType.BASIC;
    /**
     * Retrieves pricing information for a specific country and service type.
     *
     * @param {ServiceType} type - The service type.
     * @param {string} country - The country for which pricing information is requested.
     * @return {Promise<OutboundCountryPricingResponse>} - Pricing information for the specified country.
     * @example
     *
     * ```ts
     * import { ServiceType } from '@vonage/pricing';
     *
     * const pricing = await pricingClient.listCountryPricing(ServiceType.SMS, 'GB');
     * console.log(`The current price for Great Britian is ${pricing.defaultPrice}`);
     * ```
     */ async listCountryPricing(type, country) {
        const resp = await this.sendGetRequest(`${this.config.restHost}/account/get-pricing/outbound/${type}`, {
            country
        });
        return resp.data;
    }
    /**
     * Retrieves pricing information for all countries and a specific service type.
     * @param {ServiceType} type - The service type.
     * @return {Promise<OutboundAllCountriesPricingResponse>} - Pricing information for all countries.
     * @example
     * ```ts
     * import { ServiceType } from '@vonage/pricing';
     *
     * const pricing = await pricingClient.listAllCountriesPricing(ServiceType.SMS);
     * for (const country in pricing.countries) {
     *  console.log(`The current price for ${country.countryName} is ${country.defaultPrice}`);
     * }
     * ```
     */ async listAllCountriesPricing(type) {
        const resp = await this.sendGetRequest(`${this.config.restHost}/account/get-full-pricing/outbound/${type}`);
        return resp.data;
    }
    /**
     * Retrieves pricing information for a specific prefix and service type.
     * @param {ServiceType} type - The service type.
     * @param {string} prefix - The prefix for which pricing information is requested.
     * @return {Promise<OutboundAllCountriesPricingResponse>} - Pricing information for the specified prefix.
     *
     * @example
     * ```ts
     * import { ServiceType } from '@vonage/pricing';
     *
     * const pricing = await pricingClient.listPrefixPricing(ServiceType.SMS, '44');
     * console.log(`The current price for Great Britian is ${pricing.defaultPrice}`);
     * ```
     */ async listPrefixPricing(type, prefix) {
        const resp = await this.sendGetRequest(`${this.config.restHost}/account/get-prefix-pricing/outbound/${type}`, {
            prefix
        });
        return resp.data;
    }
}
exports.Pricing = Pricing; //# sourceMappingURL=pricing.js.map
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/types/Response/OutboundAllCountriesPricingResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=OutboundAllCountriesPricingResponse.js.map
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/types/Response/OutboundCountryPricingResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=OutboundCountryPricingResponse.js.map
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/types/Response/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/types/Response/OutboundAllCountriesPricingResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/types/Response/OutboundCountryPricingResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/types/Network.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=Network.js.map
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/types/PricingClassParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=PricingClassParameters.js.map
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/types/PricingResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=PricingResponse.js.map
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/types/Response/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/types/Network.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/types/PricingClassParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/types/PricingResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/enums/ServiceType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServiceType = void 0;
/**
 * Enum representing different service types for pricing information.
 */ var ServiceType;
(function(ServiceType) {
    /**
     * SMS service.
     */ ServiceType["SMS"] = "sms";
    /**
     * SMS Transit service.
     */ ServiceType["SMS_TRANSIT"] = "sms-transit";
    /**
     * Voice service.
     */ ServiceType["VOICE"] = "voice";
})(ServiceType || (exports.ServiceType = ServiceType = {})); //# sourceMappingURL=ServiceType.js.map
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/enums/ServiceType.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/pricing/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/pricing.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/enums/product.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ProductType = void 0;
/**
 * Enum representing different product types for redaction requests.
 */ var ProductType;
(function(ProductType) {
    /**
     * Represents the SMS product.
     */ ProductType["SMS"] = "SMS";
    /**
     * Represents the Voice product.
     */ ProductType["Voice"] = "Voice";
    /**
     * Represents the Number Insight product.
     */ ProductType["NumberInsight"] = "NumberInsight";
    /**
     * Represents the Verify product.
     */ ProductType["Verify"] = "Verify";
    /**
     * Represents the Verify SDK product.
     */ ProductType["VerifySDK"] = "VerifySDK";
})(ProductType || (exports.ProductType = ProductType = {})); //# sourceMappingURL=product.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/enums/type.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Type = void 0;
/**
 * Enum representing different message types for redaction requests.
 */ var Type;
(function(Type) {
    /**
     * Represents an inbound message type.
     */ Type["INBOUND"] = "Inbound";
    /**
     * Represents an outbound message type.
     */ Type["OUTBOUND"] = "Outbound";
})(Type || (exports.Type = Type = {})); //# sourceMappingURL=type.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/enums/product.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/enums/type.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/interfaces/request/transactionRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=transactionRequest.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/interfaces/request/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/interfaces/request/transactionRequest.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/interfaces/response/errorResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=errorResponse.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/interfaces/response/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/interfaces/response/errorResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/interfaces/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/interfaces/request/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/interfaces/response/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/types/transactionParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=transactionParams.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/types/transactionParams.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/redact.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Redact = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
/**
 * Represents a client for the Redact API that extends the Vonage Client.
 */ class Redact extends server_client_1.Client {
    /**
       * The authentication type used for Redact API requests.
       */ authType = server_client_1.AuthenticationType.BASIC;
    /**
       * Redacts a specific message using the provided parameters.
       *
       * @param {TransactionParams} params - Parameters for redacting a message.
       * @return {Promise<void>} A Promise that resolves when the redaction is successful.
       *
       * @throws {Error} If there is an error in processing the redaction request.
       */ async redactMessage(params) {
        await this.sendPostRequest(`${this.config.apiHost}/v1/redact/transaction`, params);
    }
}
exports.Redact = Redact; //# sourceMappingURL=redact.js.map
}}),
"[project]/node_modules/@vonage/redact/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/interfaces/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/redact.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/enums/CollectionFormats.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.COLLECTION_FORMATS = void 0;
/**
 * Collection Formats for API Parameter Serialization.
 *
 * Defines various collection formats used for serializing API parameters.
 */ exports.COLLECTION_FORMATS = {
    /**
     * Comma-separated values collection format.
     */ csv: ',',
    /**
     * Space-separated values collection format.
     */ ssv: ' ',
    /**
     * Tab-separated values collection format.
     */ tsv: '\t',
    /**
     * Pipe-separated values collection format.
     */ pipes: '|'
}; //# sourceMappingURL=CollectionFormats.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/enums/MessageClassEnum.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MessageClassEnum = void 0;
/**
 * Enumeration representing the possible message classes.
 *
 * Defines different message classes that can be associated with SMS messages.
 */ var MessageClassEnum;
(function(MessageClassEnum) {
    /**
     * Class 0: Flash SMS.
     */ MessageClassEnum[MessageClassEnum["NUMBER_0"] = 0] = "NUMBER_0";
    /**
     * Class 1: Immediate display (user should be able to read the message instantly).
     */ MessageClassEnum[MessageClassEnum["NUMBER_1"] = 1] = "NUMBER_1";
    /**
     * Class 2: Mobile equipment-to-mobile equipment (ME-to-ME) communication.
     */ MessageClassEnum[MessageClassEnum["NUMBER_2"] = 2] = "NUMBER_2";
    /**
     * Class 3: SIM card-based storage.
     */ MessageClassEnum[MessageClassEnum["NUMBER_3"] = 3] = "NUMBER_3";
})(MessageClassEnum || (exports.MessageClassEnum = MessageClassEnum = {})); //# sourceMappingURL=MessageClassEnum.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/enums/SMSStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SMSStatus = void 0;
/**
 * Enumeration representing possible SMS status codes.
 *
 * Defines different status codes that can be associated with SMS messages.
 *
 * @remarks This matches SMSErrors. Since Enums can't be joined, this is here
 * to help check valid statuses
 */ var SMSStatus;
(function(SMSStatus) {
    /**
     * Success: The message was sent successfully.
     */ SMSStatus["SUCCESS"] = "0";
    /**
     * Throttled: Sending SMS faster than the account limit.
     */ SMSStatus["THROTTLED"] = "1";
    /**
     * Missing Required Parameter: One or more required parameters are missing.
     */ SMSStatus["MISSING_REQUIRED_PARAM"] = "2";
    /**
     * Invalid Parameter: The value of one or more parameters is invalid.
     */ SMSStatus["INVALID_PARAM"] = "3";
    /**
     * Invalid Credentials: API key and/or secret are incorrect, invalid, or disabled.
     */ SMSStatus["INVALID_CREDENTIALS"] = "4";
    /**
     * Internal Error: An error occurred while processing the message.
     */ SMSStatus["INTERNAL_ERROR"] = "5";
    /**
     * Invalid Message: The platform was unable to process the message.
     */ SMSStatus["INVALID_MESSAGE"] = "6";
    /**
     * Barred Number: The number you're trying to send messages to is blocklisted.
     */ SMSStatus["BARRED_NUMBER"] = "7";
    /**
     * Partner Account Barred: Your Vonage account has been suspended.
     */ SMSStatus["PARTNER_ACCOUNT_BARRED"] = "8";
    /**
     * Partner Quota Violation: Insufficient credit to send the message.
     */ SMSStatus["PARTNER_QUOTA_VIOLATION"] = "9";
    /**
     * Too Many Existing Binds: Number of simultaneous connections exceeds account allocation.
     */ SMSStatus["TOO_MANY_EXISTING_BINDS"] = "10";
    /**
     * Account Not Enabled For HTTP: Account is not provisioned for the SMS API.
     */ SMSStatus["ACCOUNT_NOT_ENABLED"] = "11";
    /**
     * Message Too Long: Message length exceeds the maximum allowed.
     */ SMSStatus["MESSAGE_TOO_LONG"] = "12";
    /**
     * Invalid Signature: The supplied signature could not be verified.
     */ SMSStatus["INVALID_SIGNATURE"] = "14";
    /**
     * Invalid Sender Address: Using a non-authorized sender ID in the 'from' field.
     */ SMSStatus["INVALID_SENDER_ADDRESS"] = "15";
    /**
     * Invalid Network Code: Network code is unrecognized or doesn't match the destination.
     */ SMSStatus["INVALID_NETWORK_CODE"] = "22";
    /**
     * Invalid Callback URL: Callback URL is too long or contains illegal characters.
     */ SMSStatus["INVALID_CALLBACK_URL"] = "23";
    /**
     * Non-Whitelisted Destination: Vonage account is in demo mode and requires whitelisted numbers.
     * This error is returned if you attempt to send a message to a number that isn't in your
     * pre-approved destination list.
     */ SMSStatus["NON_WHITELISTED_DESTINATION"] = "29";
    /**
     * Signature And API Secret Disallowed: A signed request may not present an API secret.
     */ SMSStatus["SIGNATURE_AND_API_SECRET_DISALLOWED"] = "32";
    /**
     * Number Deactivated: The number you're trying to send messages to is deactivated.
     */ SMSStatus["NUMBER_DEACTIVATED"] = "33";
})(SMSStatus || (exports.SMSStatus = SMSStatus = {})); //# sourceMappingURL=SMSStatus.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/enums/TypeEnum.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TypeEnum = void 0;
/**
 * Enumeration representing possible message types for SMS.
 *
 * Defines different message types that can be associated with SMS messages.
 */ var TypeEnum;
(function(TypeEnum) {
    /**
     * Text: The message body contains standard text.
     */ TypeEnum["TEXT"] = "text";
    /**
     * Binary: The message body is in binary format.
     */ TypeEnum["BINARY"] = "binary";
    /**
     * Unicode: The message body is URL-encoded Unicode, valid for various character sets.
     */ TypeEnum["UNICODE"] = "unicode";
})(TypeEnum || (exports.TypeEnum = TypeEnum = {})); //# sourceMappingURL=TypeEnum.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/enums/CollectionFormats.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/enums/MessageClassEnum.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/enums/SMSStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/enums/TypeEnum.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/classes/Error/SMSFailure.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SMSFailure = void 0;
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/enums/index.js [app-rsc] (ecmascript)");
/* istanbul ignore next */ /**
 * Class representing a failure response when sending SMS messages.
 *
 * Extends the built-in Error class and provides methods for accessing and handling failed SMS messages.
 */ class SMSFailure extends Error {
    /**
     * The response containing details about the SMS messages.
     */ response;
    /**
     * Creates an instance of SMSFailure.
     *
     * @param {string} message - The error message.
     * @param {SMSMessages} response - The response containing details about the SMS messages.
     */ constructor(message, response){
        super(message);
        this.response = response;
    }
    /**
     * Retrieves an array of all messages in the response.
     *
     * @return {Array<ErrorMessage | Message>} An array of all messages in the response.
     */ getMessages() {
        return this.response.messages || [];
    }
    /**
     * Retrieves an array of failed messages in the response.
     *
     * @return {Array<ErrorMessage>} An array of failed messages in the response.
     */ getFailedMessages() {
        return this.getMessages().filter(({ status })=>status !== enums_1.SMSStatus.SUCCESS);
    }
    /**
     * Retrieves the original response containing details about the SMS messages.
     *
     * @return {SMSMessages} The original response containing details about the SMS messages.
     */ getResponse() {
        return this.response;
    }
    /**
     * Retrieves an array of successfully sent messages in the response.
     *
     * @return {Array<Message>} An array of successfully sent messages in the response.
     */ getSuccessfulMessages() {
        return this.getMessages().filter(({ status })=>status === enums_1.SMSStatus.SUCCESS);
    }
}
exports.SMSFailure = SMSFailure; //# sourceMappingURL=SMSFailure.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/classes/Error/MessageSendAllFailure.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MessageSendAllFailure = void 0;
const SMSFailure_1 = __turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/classes/Error/SMSFailure.js [app-rsc] (ecmascript)");
/**
 * Class representing a failure when sending all SMS messages.
 *
 * Extends the SMSFailure class and is used to indicate that all SMS messages failed to send.
 */ class MessageSendAllFailure extends SMSFailure_1.SMSFailure {
    /**
     * Creates an instance of MessageSendAllFailure.
     *
     * @param {SMSMessages} response - The response containing details about the failed SMS messages.
     */ constructor(response){
        super('All SMS messages failed to send', response);
    }
}
exports.MessageSendAllFailure = MessageSendAllFailure; //# sourceMappingURL=MessageSendAllFailure.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/classes/Error/MessageSendPartialFailure.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MessageSendPartialFailure = void 0;
const SMSFailure_1 = __turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/classes/Error/SMSFailure.js [app-rsc] (ecmascript)");
/**
 * Class representing a partial failure when sending SMS messages.
 *
 * Extends the SMSFailure class and is used to indicate that some SMS messages failed to send.
 */ class MessageSendPartialFailure extends SMSFailure_1.SMSFailure {
    /**
     * Creates an instance of MessageSendPartialFailure.
     *
     * @param {SMSMessages} response - The response containing details about the partially failed SMS messages.
     */ constructor(response){
        super('Some SMS messages failed to send', response);
    }
}
exports.MessageSendPartialFailure = MessageSendPartialFailure; //# sourceMappingURL=MessageSendPartialFailure.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/classes/Error/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/classes/Error/MessageSendAllFailure.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/classes/Error/MessageSendPartialFailure.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/classes/Error/SMSFailure.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/classes/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/classes/Error/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/sms.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SMS = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
const classes_1 = __turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/classes/index.js [app-rsc] (ecmascript)");
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/enums/index.js [app-rsc] (ecmascript)");
const crypto_1 = __importDefault(__turbopack_context__.r("[externals]/crypto [external] (crypto, cjs)"));
const auth_1 = __turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/index.js [app-rsc] (ecmascript)");
/**
 * Client for sending legacy SMS messages using the Vonage API.
 *
 * @example
 * Create a standalone SMS client
 *
 * ```ts
 * import { AlgorithmTypes } from '@vonage/auth';
 * import { SMS } from '@vonage/sms';
 *
 * const smsClient = new SMS({
 *  apiKey: VONAGE_API_KEY,
 *  apiSecret: VONAGE_API_SECRET
 *  secret: {
 *    secret: VONAGE_SIGNATURE_SECRET
 *    algorithm: AlgorithmTypes.sha512hmac
 *  },
 * });
 * ```
 *
 * @example
 * Create an SMS client from the Vonage client
 *
 * ```ts
 * import { AlgorithmTypes } from '@vonage/auth';
 * import { Vonage } from '@vonage/server-client';
 *
 * const vonage = new Vonage({
 *   apiKey: VONAGE_API_KEY,
 *   apiSecret: VONAGE_API_SECRET
 *   secret: {
 *     secret: VONAGE_SIGNATURE_SECRET
 *     algorithm: AlgorithmTypes.sha512hmac
 *   },
 * });
 *
 * const smsClient = vonage.sms;
 * ```
 */ class SMS extends server_client_1.Client {
    /**
     * @see {@link Client.authType}
     */ authType = server_client_1.AuthenticationType.BASIC;
    /**
     * Sends an SMS message using the legacy Vonage SMS API.
     *
     * @param {SMSParams} [params] - The parameters for the SMS message.
     * @return {Promise<SMSMessages>} A Promise that resolves to the response containing details about the sent SMS messages.
     * @throws {MessageSendAllFailure} If all SMS messages fail to send.
     * @throws {MessageSendPartialFailure} If some SMS messages fail to send.
     * @example
     *
     * ```ts
     * const response = await smsClient.send({
     *   to: TO_NUMBER,
     *   from: FROM_NUMBER,
     *   text: 'Hello from Vonage SMS API',
     * });
     * console.log(`Number of messages sent: ${response.messageCount}`););
     * ```
     */ async send(params) {
        const resp = await this.sendPostRequest(`${this.config.restHost}/sms/json`, server_client_1.Client.transformers.kebabCaseObjectKeys(params || {}));
        const messageData = server_client_1.Client.transformers.camelCaseObjectKeys(resp.data, true, true);
        const totalMessages = messageData.messageCount || 0;
        const messages = messageData.messages || [];
        const failures = messages.reduce((failures, { status })=>status !== enums_1.SMSStatus.SUCCESS ? failures + 1 : failures, 0);
        if (failures < 1) {
            return messageData;
        }
        if (failures === totalMessages) {
            throw new classes_1.MessageSendAllFailure(messageData);
        }
        throw new classes_1.MessageSendPartialFailure(messageData);
    }
    /**
     * Verifies the signature of a request using the specified algorithm and signature secret.
     *
     * @remarks
     * This will not parse the request parameters from the request object, so you will need to do that yourself.
     *
     * @param {string} signature - The signature to be verified.
     * @param {Record<string, string>} params - The request parameters used to generate the signature.
     * @param {string} signatureSecret - The secret key used for generating the signature.
     * @param {AlgorithmTypes} algorithm - The algorithm used for generating the signature.
     * @return {boolean} `true` if the signature is valid, `false` otherwise.
     * @throws {Error} If the provided signature algorithm is not supported.
     *
     * @example
     * ```ts
     * const params = Object.assign(request.query, request.body);
     * const { sig } = params;
     *
     * sms.verifySignature(
     *   sig,
     *   {}, // request parameters
     *   VONAGE_API_SIGNATURE_SECRET,
     *   AlgorithmTypes.md5hash,
     * ) === params.sig) {
     *   console.log("Valid signature");
     * } else {
     *   console.log("Invalid signature");
     * }
     * ```
     */ verifySignature(signature, params, signatureSecret, algorithm) {
        params = params || {};
        let signedQuery = '';
        params = JSON.parse(JSON.stringify(params));
        if (params.sig) {
            delete params.sig;
        }
        Object.keys(params).sort().forEach((key)=>{
            // replace & and = with _
            signedQuery += '&' + key + '=' + params[key].replace(/[&=]/g, '_');
        });
        const hashMap = {};
        hashMap[auth_1.AlgorithmTypes.md5hmac] = 'md5';
        hashMap[auth_1.AlgorithmTypes.sha1hmac] = 'sha1';
        hashMap[auth_1.AlgorithmTypes.sha256hmac] = 'sha256';
        hashMap[auth_1.AlgorithmTypes.sha512hmac] = 'sha512';
        let hash = '';
        switch(algorithm){
            case auth_1.AlgorithmTypes.md5hash:
                signedQuery += signatureSecret;
                hash = crypto_1.default.createHash('md5').update(signedQuery).digest('hex');
                break;
            case auth_1.AlgorithmTypes.md5hmac:
            case auth_1.AlgorithmTypes.sha1hmac:
            case auth_1.AlgorithmTypes.sha256hmac:
            case auth_1.AlgorithmTypes.sha512hmac:
                hash = crypto_1.default.createHmac(hashMap[algorithm], signatureSecret).update(signedQuery).digest('hex');
                break;
            default:
                throw new Error(`Unknown signature algorithm: ${algorithm}. Expected: md5hash, md5, sha1, sha256, or sha512`);
        }
        return signature.toUpperCase() === hash.toUpperCase();
    }
}
exports.SMS = SMS; //# sourceMappingURL=sms.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/SMSParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SMSParams.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/ErrorMessage.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ErrorMessage.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/InboundMessage.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=InboundMessage.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/Message.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=Message.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/Responses/DeliveryReceipt.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=DeliveryReceipt.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/Responses/SMSEmptyResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SMSEmptyResponse.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/Responses/SMSGeneralResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SMSGeneralResponse.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/Responses/SMSMessageResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SMSMessageResponse.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/Responses/SMSResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SMSResponse.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/Responses/SendSMSResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SendSMSResponse.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/Responses/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/Responses/DeliveryReceipt.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/Responses/SMSEmptyResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/Responses/SMSGeneralResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/Responses/SMSMessageResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/Responses/SMSResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/Responses/SendSMSResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/Requests/SMSRequestBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SMSRequestBody.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/Requests/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/Requests/SMSRequestBody.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/SMSMessages.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SMSMessages.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/SMSParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/ErrorMessage.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/InboundMessage.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/Message.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/Responses/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/Requests/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/SMSMessages.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/sms/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/classes/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/sms.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/messengerChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messengerChannel.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/mmsChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=mmsChannel.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/parameters/userListParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=userListParameters.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/parameters/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/parameters/userListParameters.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/pstnChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=pstnChannel.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/requests/userRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=userRequest.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/requests/websocketChannelRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=websocketChannelRequest.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/requests/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/requests/userRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/requests/websocketChannelRequest.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/responses/userPageResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=userPageResponse.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/responses/userResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=userResponse.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/responses/websocketChannelResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=websocketChannelResponse.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/responses/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/responses/userPageResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/responses/userResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/responses/websocketChannelResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/sipChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=sipChannel.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/smsChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=smsChannel.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/userType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=userType.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/vbcChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=vbcChannel.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/viberChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=viberChannel.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/websocketChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=websocketChannel.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/whatsappChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=whatsappChannel.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/messengerChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/mmsChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/parameters/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/pstnChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/requests/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/responses/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/sipChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/smsChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/userType.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/vbcChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/viberChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/websocketChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/whatsappChannel.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/enums/userSort.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SortOrder = void 0;
/**
 * Enum representing the sorting order.
 */ var SortOrder;
(function(SortOrder) {
    /**
     * Ascending order.
     */ SortOrder["ASC"] = "ASC";
    /**
     * Descending order.
     */ SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {})); //# sourceMappingURL=userSort.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/enums/userSort.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/user.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Users = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
const apiUserToUser = (apiUser)=>{
    delete apiUser._links;
    const user = server_client_1.Client.transformers.camelCaseObjectKeys(apiUser, true);
    if (user.properties) {
        user.properties.customData = apiUser.properties.custom_data;
    }
    if (user.channels?.websocket) {
        user.channels.websocket = apiUser.channels.websocket.map((apiSocket)=>{
            const socket = {
                uri: apiSocket.uri
            };
            if (apiSocket['content-type']) {
                socket.contentType = apiSocket['content-type'];
            }
            if (apiSocket.headers) {
                socket.headers = apiSocket.headers;
            }
            return socket;
        });
    }
    return user;
};
const userToAPI = (user)=>{
    const apiUser = server_client_1.Client.transformers.snakeCaseObjectKeys(user, true);
    // preserve user properties
    if (user.properties?.customData) {
        apiUser.properties.custom_data = user.properties.customData;
    }
    // Websockets will change when transformed
    if (user.channels?.websocket) {
        apiUser.channels.websocket = user.channels.websocket?.map((socket)=>{
            const apiSocket = {
                uri: socket.uri
            };
            // restore content type
            if (socket.contentType) {
                apiSocket['content-type'] = socket.contentType;
            }
            // preserve headers
            if (socket.headers) {
                apiSocket.headers = socket.headers;
            }
            return apiSocket;
        });
    }
    delete apiUser.id;
    return apiUser;
};
/**
 * The `Users` class provides methods for managing user data through API requests.
 *
 * Vonage API responses and requests use `snake_case` for property names, but
 * this class performs the necessary key transformations to work with
 * `camelCase` property names in your application.
 */ class Users extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.JWT;
    /**
     * Retrieves a list of users, optionally paginated, based on the provided parameters.
     *
     * @param {UserListParameters} params - Optional parameters to filter and paginate the list of users.
     * @return {AsyncGenerator<UserType, void, undefined>} An async generator that yields user objects.
     */ async *listAllUsers(params = {}) {
        let cursor = params.cursor;
        do {
            if (cursor) {
                params.cursor = cursor;
            }
            const resp = await this.getUserPage(params);
            yield* resp._embedded?.users.map(apiUserToUser);
            const next = resp._links?.next?.href ? new URL(resp._links.next.href) : null;
            cursor = next ? `${next.searchParams.get('cursor')}` : undefined;
        }while (cursor)
    }
    /**
     * Retrieves a page of users based on the provided parameters, such as pagination and filtering.
     *
     * @param {UserListParameters} [params={}] - Optional parameters to filter and paginate the list of users.
     * @param {number} [params.pageSize] - The number of users to include per page.
     * @param {SortOrder} [params.order] - The sorting order for the list (ASC or DESC).
     * @param {string} [params.cursor] - A cursor for paginating through the user list.
     * @param {string} [params.name] - A name to filter users by.
     *
     * @return {Promise<UserPageResponse>} A Promise that resolves to a UserPageResponse object containing the user page data.
     *
     * @throws {Error} If there is an issue with the request or response.
     */ async getUserPage(params = {}) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/users`, server_client_1.Client.transformers.snakeCaseObjectKeys(params, true));
        return resp.data;
    }
    /**
     * Creates a new user with the provided user data.
     *
     * @param {UserType} user - The user data to create a new user.
     * @return {Promise<UserType>} A Promise that resolves to the newly created user.
     * @throws {Error} If there is an issue with the request or response.
     */ async createUser(user) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v1/users`, userToAPI(user));
        return apiUserToUser(resp.data);
    }
    /**
     * Retrieves user information for the specified user ID.
     *
     * @param {string} userId - The unique identifier of the user to retrieve.
     * @return {Promise<UserType>} A Promise that resolves to the user information for the specified user ID.
     * @throws {Error} If there is an issue with the request or response, or if the user with the specified ID is not found.
     */ async getUser(userId) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/users/${userId}`);
        return apiUserToUser(resp.data);
    }
    /**
     * Updates the user information for the specified user.
     *
     * @param {UserType} user - The user object containing the updated information.
     * @return {Promise<UserType>} A Promise that resolves to the updated user information.
     * @throws {Error} If there is an issue with the request or response, or if the user with the specified ID is not found.
     */ async updateUser(user) {
        const resp = await this.sendPatchRequest(`${this.config.apiHost}/v1/users/${user.id}`, userToAPI(user));
        return apiUserToUser(resp.data);
    }
    /**
     * Deletes the user with the specified user ID.
     *
     * @param {string} userId - The unique ID of the user to be deleted.
     * @return {Promise<void>} A Promise that resolves once the user is successfully deleted.
     * @throws {Error} If there is an issue with the request or response, or if the user with the specified ID is not found.
     */ async deleteUser(userId) {
        await this.sendDeleteRequest(`${this.config.apiHost}/v1/users/${userId}`);
    }
}
exports.Users = Users; //# sourceMappingURL=user.js.map
}}),
"[project]/node_modules/@vonage/users/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/user.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/enums/CheckStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CheckStatus = void 0;
/**
 * Enum representing the status of a verification check.
 */ var CheckStatus;
(function(CheckStatus) {
    /**
     * The verification check was successful.
     */ CheckStatus["SUCCESS"] = "0";
    /**
     * The verification request was throttled.
     */ CheckStatus["THROTTLED"] = "1";
    /**
     * A required parameter was missing in the verification request.
     */ CheckStatus["MISSING_REQUIRED_PARAM"] = "2";
    /**
     * An invalid parameter was provided in the verification request.
     */ CheckStatus["INVALID_PARAM"] = "3";
    /**
     * Invalid credentials were used in the verification request.
     */ CheckStatus["INVALID_CREDENTIALS"] = "4";
    /**
     * An internal error occurred during the verification process.
     */ CheckStatus["INTERNAL_ERROR"] = "5";
    /**
     * Failed to process the verification request.
     */ CheckStatus["FAILED_TO_PROCESS"] = "6";
    /**
     * The API key used in the verification request is barred.
     */ CheckStatus["BARRED_API_KEY"] = "8";
    /**
     * Partner quota for verifications exceeded.
     */ CheckStatus["PARTNER_QUOTA_EXCEEDED"] = "9";
    /**
     * Concurrent verifications not allowed.
     */ CheckStatus["CONCURRENT_VERIFICATIONS"] = "10";
    /**
     * The network is not supported for verification.
     */ CheckStatus["UNSUPPORTED_NETWORK"] = "15";
    /**
     * Code mismatch in the verification request.
     */ CheckStatus["CODE_MISMATCH"] = "16";
    /**
     * Invalid verification code provided.
     */ CheckStatus["INVALID_CODE"] = "17";
    /**
     * Delivery of the verification failed.
     */ CheckStatus["DELIVERY_FAILED"] = "19";
    /**
     * PIN not supported for verification.
     */ CheckStatus["PIN_NOT_SUPPORTED"] = "20";
    /**
     * Destination not permitted for verification.
     */ CheckStatus["NON_PERMITTED_DESTINATION"] = "29";
})(CheckStatus || (exports.CheckStatus = CheckStatus = {})); //# sourceMappingURL=CheckStatus.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/enums/Command.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Command = void 0;
/**
 * Enum representing commands for controlling Verify requests.
 */ var Command;
(function(Command) {
    /**
     * Command to request cancellation of the verification process.
     */ Command["CANCEL"] = "cancel";
    /**
     * Command to trigger the next verification event (if any).
     */ Command["TRIGGER_NEXT_EVENT"] = "trigger_next_event";
})(Command || (exports.Command = Command = {})); //# sourceMappingURL=Command.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/enums/SearchCheckStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SearchCheckStatus = void 0;
/**
 * Enum representing the status of a verification check during Verify search.
 */ var SearchCheckStatus;
(function(SearchCheckStatus) {
    /**
     * The verification check is invalid.
     */ SearchCheckStatus["INVALID"] = "INVALID";
    /**
     * The verification check is valid.
     */ SearchCheckStatus["VALID"] = "VALID";
})(SearchCheckStatus || (exports.SearchCheckStatus = SearchCheckStatus = {})); //# sourceMappingURL=SearchCheckStatus.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/enums/SearchEventTypes.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SearchEventTypes = void 0;
/**
 * Enum representing the types of events that can occur during Verify search.
 */ var SearchEventTypes;
(function(SearchEventTypes) {
    /**
     * Text-to-Speech event.
     */ SearchEventTypes["TTS"] = "TTS";
    /**
     * Short Message Service (SMS) event.
     */ SearchEventTypes["SMS"] = "SMS";
})(SearchEventTypes || (exports.SearchEventTypes = SearchEventTypes = {})); //# sourceMappingURL=SearchEventTypes.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/enums/SearchStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SearchStatus = void 0;
/**
 * Enum representing the status of a Verify search request.
 */ var SearchStatus;
(function(SearchStatus) {
    /**
     * The search is still in progress.
     */ SearchStatus["IN_PROGRESS"] = "IN PROGRESS";
    /**
     * Your user entered a correct verification code.
     */ SearchStatus["SUCCESS"] = "SUCCESS";
    /**
     * Your user entered an incorrect code more than three times.
     */ SearchStatus["FAILED"] = "FAILED";
    /**
     * Your user did not enter a code before the pin_expiry time elapsed.
     */ SearchStatus["EXPIRED"] = "EXPIRED";
    /**
     * The verification process was canceled by a Verify control request.
     */ SearchStatus["CANCELLED"] = "CANCELLED";
})(SearchStatus || (exports.SearchStatus = SearchStatus = {})); //# sourceMappingURL=SearchStatus.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/enums/VerifyLanguages.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VerifyLanguages = void 0;
/**
 * Enum representing supported languages for Verify requests.
 */ var VerifyLanguages;
(function(VerifyLanguages) {
    /**
     * Arabic language (ar-xa).
     */ VerifyLanguages["ARABIC"] = "ar-xa";
    /**
     * Czech language (cs-cz).
     */ VerifyLanguages["CZECH"] = "cs-cz";
    /**
     * Welsh language (cy-cy).
     */ VerifyLanguages["WELSH"] = "cy-cy";
    /**
     * Welsh language, United Kingdom (cy-gb).
     */ VerifyLanguages["WELSH_UK"] = "cy-gb";
    /**
     * Danish language (da-dk).
     */ VerifyLanguages["DANISH"] = "da-dk";
    /**
     * German language (de-de).
     */ VerifyLanguages["GERMAN"] = "de-de";
    /**
     * Greek language (el-gr).
     */ VerifyLanguages["GREEK"] = "el-gr";
    /**
     * English language, Australia (en-au).
     */ VerifyLanguages["ENGLISH_AUSTRALIA"] = "en-au";
    /**
     * English language, United Kingdom (en-gb).
     */ VerifyLanguages["ENGLISH_UK"] = "en-gb";
    /**
     * English language, India (en-in).
     */ VerifyLanguages["ENGLISH_INDIA"] = "en-in";
    /**
     * English language, United States (en-us).
     */ VerifyLanguages["ENGLISH_US"] = "en-us";
    /**
     * Spanish language, Spain (es-es).
     */ VerifyLanguages["SPANISH_SPAIN"] = "es-es";
    /**
     * Spanish language, Mexico (es-mx).
     */ VerifyLanguages["SPANISH_MEXICO"] = "es-mx";
    /**
     * Spanish language, United States (es-us).
     */ VerifyLanguages["SPANISH_US"] = "es-us";
    /**
     * Finnish language (fi-fi).
     */ VerifyLanguages["FINNISH"] = "fi-fi";
    /**
     * Filipino language (fil-ph).
     */ VerifyLanguages["FILIPINO"] = "fil-ph";
    /**
     * French language, Canada (fr-ca).
     */ VerifyLanguages["FRENCH_CANADA"] = "fr-ca";
    /**
     * French language, France (fr-fr).
     */ VerifyLanguages["FRENCH_FRANCE"] = "fr-fr";
    /**
     * Hindi language (hi-in).
     */ VerifyLanguages["HINDI"] = "hi-in";
    /**
     * Hungarian language (hu-hu).
     */ VerifyLanguages["HUNGARIAN"] = "hu-hu";
    /**
     * Indonesian language (id-id).
     */ VerifyLanguages["INDONESIAN"] = "id-id";
    /**
     * Icelandic language (is-is).
     */ VerifyLanguages["ICELANDIC"] = "is-is";
    /**
     * Italian language (it-it).
     */ VerifyLanguages["ITALIAN"] = "it-it";
    /**
     * Japanese language (ja-jp).
     */ VerifyLanguages["JAPANESE"] = "ja-jp";
    /**
     * Korean language (ko-kr).
     */ VerifyLanguages["KOREAN"] = "ko-kr";
    /**
     * Norwegian language (nb-no).
     */ VerifyLanguages["NORWEGIAN"] = "nb-no";
    /**
     * Dutch language (nl-nl).
     */ VerifyLanguages["DUTCH"] = "nl-nl";
    /**
     * Polish language (pl-pl).
     */ VerifyLanguages["POLISH"] = "pl-pl";
    /**
     * Portuguese language, Brazil (pt-br).
     */ VerifyLanguages["PORTUGUESE_BRAZIL"] = "pt-br";
    /**
     * Portuguese language, Portugal (pt-pt).
     */ VerifyLanguages["PORTUGUESE_PORTUGAL"] = "pt-pt";
    /**
     * Romanian language (ro-ro).
     */ VerifyLanguages["ROMANIAN"] = "ro-ro";
    /**
     * Russian language (ru-ru).
     */ VerifyLanguages["RUSSIAN"] = "ru-ru";
    /**
     * Swedish language (sv-se).
     */ VerifyLanguages["SWEDISH"] = "sv-se";
    /**
     * Thai language (th-th).
     */ VerifyLanguages["THAI"] = "th-th";
    /**
     * Turkish language (tr-tr).
     */ VerifyLanguages["TURKISH"] = "tr-tr";
    /**
     * Vietnamese language (vi-vn).
     */ VerifyLanguages["VIETNAMESE"] = "vi-vn";
    /**
     * Yue Chinese Cantonese language (yue-cn).
     */ VerifyLanguages["YUE_CHINESE_CANTONESE"] = "yue-cn";
    /**
     * Chinese language, Mainland (zh-cn).
     */ VerifyLanguages["CHINESE_MAINLAND"] = "zh-cn";
    /**
     * Chinese language, Taiwan (zh-tw).
     */ VerifyLanguages["CHINESE_TAIWAN"] = "zh-tw";
})(VerifyLanguages || (exports.VerifyLanguages = VerifyLanguages = {})); //# sourceMappingURL=VerifyLanguages.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/enums/Workflows.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VerifyWorkflows = void 0;
/**
 * Enum representing predefined Verify workflows.
 */ var VerifyWorkflows;
(function(VerifyWorkflows) {
    /**
     * Workflow: SMS - TTS - TTS
     */ VerifyWorkflows["SMS_TTS_TTS"] = "1";
    /**
     * Workflow: SMS - SMS - TTS
     */ VerifyWorkflows["SMS_SMS_TTS"] = "2";
    /**
     * Workflow: TTS - TTS
     */ VerifyWorkflows["TTS_TTS"] = "3";
    /**
     * Workflow: SMS - SMS
     */ VerifyWorkflows["SMS_SMS"] = "4";
    /**
     * Workflow: SMS - TTS
     */ VerifyWorkflows["SMS_TTS"] = "5";
    /**
     * Workflow: SMS
     */ VerifyWorkflows["SMS"] = "6";
    /**
     * Workflow: TTS
     */ VerifyWorkflows["TTS"] = "7";
})(VerifyWorkflows || (exports.VerifyWorkflows = VerifyWorkflows = {})); //# sourceMappingURL=Workflows.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/enums/CheckStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/enums/Command.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/enums/SearchCheckStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/enums/SearchEventTypes.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/enums/SearchStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/enums/VerifyLanguages.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/enums/Workflows.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/verify.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Verify = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/enums/index.js [app-rsc] (ecmascript)");
const lodash_omit_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/lodash.omit/index.js [app-rsc] (ecmascript)"));
/**
 * The Verify class provides methods for managing and performing verification processes using the Vonage Verify API.
 *
 * It allows you to initiate new verification requests, check verification codes, search for verification request
 * details, and perform control actions like canceling or triggering the next event for a verification process.
 *
 * @example
 * Create a standalone Verify client
 *
 * ```ts
 * import { Verify } from '@vonage/verify';
 *
 * const verifyClient = new Verify({
 *  apiKey: VONAGE_API_KEY,
 *  apiSecret: VONAGE_API_SECRET
 * });
 * ```
 *
 * @example
 * Create an Verify client from the Vonage client
 *
 * ```ts
 * import { Vonage } from '@vonage/server-client';
 *
 * const vonage = new Vonage({
 *   apiKey: VONAGE_API_KEY,
 *   apiSecret: VONAGE_API_SECRET
 * });
 *
 * const verifyClient = vonage.verify;
 * ```
 */ class Verify extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.KEY_SECRET;
    /**
     * Sends a control command for a specific verification request.
     *
     * @param {Command} command - The control command to send, either "cancel" or "trigger_next_event".
     * @param {string} requestId - The request ID of the verification to control.
     * @return {Promise<VerifyControl | VerifyControlError>} A Promise that resolves to a `VerifyControl` object containing the control response on success or a `VerifyControlError` object on error.
     * @throws {VerifyControlError} If an error occurs while sending the control command.
     *
     * @example
     * Cancel a verification request
     * ```ts
     * import { Command, CheckStatus } from '@vonage/verify';
     *
     * const result = await verifyClient.sendControl(Command.CANCEL, 'REQUEST_ID')
     * if (result.status === CheckStatus.SUCCESS) {
     *   console.log('Verification request canceled.');
     *   console.log(result.status);
     * } else {
     *   console.log('Error canceling verification request.');
     *   console.log(result.errorText);
     * }
     * ```
     *
     * @example
     * Trigger the next event for a verification request
     * ```ts
     * import { Command, CheckStatus } from '@vonage/verify';
     *
     * const result = await verifyClient.sendControl(Command.TRIGGER_NEXT_EVENT, 'REQUEST_ID')
     * if (result.status === CheckStatus.SUCCESS) {
     *   console.log('Next event triggered');
     *   console.log(result.status);
     * } else {
     *   console.log('Error triggering next event');
     *   console.log(result.errorText);
     * }
     * ```
     */ async sendControl(command, requestId) {
        const data = {
            request_id: requestId,
            cmd: command
        };
        const resp = await this.sendPostRequest(`${this.config.apiHost}/verify/control/json`, data);
        return server_client_1.Client.transformers.camelCaseObjectKeys(resp.data, true, true);
    }
    /**
     * Cancels a specific verification request.
     *
     * @param {string} requestId - The request ID of the verification to cancel.
     * @return {Promise<VerifyControl | VerifyControlError>} A Promise that resolves to a `VerifyControl` object containing the control response on success or a `VerifyControlError` object on error.
     * @throws {VerifyControlError} If an error occurs while canceling the verification request.
     *
     * @example
     * ```ts
     * import { CheckStatus } from '@vonage/verify';
     *
     * const result = await verifyClient.cancel('REQUEST_ID')
     *
     * if (result.status === CheckStatus.SUCCESS) {
     *   console.log('Verification request canceled.');
     *   console.log(result.status);
     * } else {
     *   console.log('Error canceling verification request.');
     *   console.log(result.errorText);
     * }
     * ```
     *
     */ async cancel(requestId) {
        return this.sendControl(enums_1.Command.CANCEL, requestId);
    }
    /**
     * Triggers the next verification event for a specific verification request.
     *
     * @param {string} requestId - The request ID of the verification to trigger the next event for.
     * @return {Promise<VerifyControl | VerifyControlError>} A Promise that resolves to a `VerifyControl` object containing the control response on success or a `VerifyControlError` object on error.
     * @throws {VerifyControlError} If an error occurs while triggering the next verification event.
     *
     * @example
     * ```ts
     * import { CheckStatus } from '@vonage/verify';
     *
     * const result = await verifyClient.trigger('REQUEST_ID')
     *
     * if (result.status === CheckStatus.SUCCESS) {
     *   console.log('Verification request canceled.');
     *   console.log(result.status);
     * } else {
     *   console.log('Error canceling verification request.');
     *   console.log(result.errorText);
     * }
     * ```
     */ async trigger(requestId) {
        return this.sendControl(enums_1.Command.TRIGGER_NEXT_EVENT, requestId);
    }
    /**
     * Checks the verification code for a specific verification request.
     *
     * @param {string} requestId - The request ID of the verification to check.
     * @param {string} code - The verification code to check against.
     * @return {Promise<VerifyCheck | VerifyCheckError>} A Promise that resolves to a `VerifyCheck` object containing the verification result on success or a `VerifyCheckError` object on error.
     * @throws {VerifyCheckError} If an error occurs during the verification check.
     *
     * @example
     * ```ts
     * import { CheckStatus } from '@vonage/verify';
     *
     * const result = await verifyClient.check('REQUEST_ID', 'CODE')
     * if (result.status === CheckStatus.SUCCESS) {
     *   console.log('Verification code is valid.');
     * } else {
     *   console.log('Verification code is invalid.');
     * }
     * ```
     */ async check(requestId, code) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/verify/check/json`, {
            request_id: requestId,
            code: code
        });
        return server_client_1.Client.transformers.camelCaseObjectKeys(resp.data, true, true);
    }
    /**
     * Searches for the status of a verification request by its request ID.
     *
     * @param {string} requestId - The request ID of the verification to search for.
     * @return {Promise<VerifySearch | VerifySearchError>} A `VerifySearch` object containing the verification details on success or a `VerifySearchError` object on error.
     *
     * @example
     * ```ts
     * const result = await verifyClient.search('REQUEST_ID')
     * if (result.errorText) {
     *   console.log(`Request found with error ${result.errorText}`);
     * } else {
     *   console.log(`Request found and submitted on ${result.dateSubmitted}`);
     * }
     * ```
     */ async search(requestId) {
        this.authType = server_client_1.AuthenticationType.QUERY_KEY_SECRET;
        const resp = await this.sendGetRequest(`${this.config.apiHost}/verify/search/json`, {
            request_id: requestId
        });
        this.authType = server_client_1.AuthenticationType.KEY_SECRET;
        return server_client_1.Client.transformers.camelCaseObjectKeys(resp.data, true, true);
    }
    /**
     * Starts a verification request.
     *
     * @param {VerificationParameters | PSD2Parameters} request - The verification parameters for the request.
     * @return {Promise<VerifyError | VerifyRequest>} A `VerifyError` object on error or a `VerifyRequest` object on success.
     *
     * @example
     * ```ts
     * const result = await verifyClient.start({
     *   number: TO_NUMBER,
     *   brand: BRAND_NAME
     * });
     *
     * if (result.requestId) {
     *   console.log(`Request started with id ${result.requestId}`);
     * } else {
     *   console.log(`Request failed with error: ${result.errorText}`);
     * }
     * ```
     *
     * @example
     * Start a request with PSD2 parameters
     * ```ts
     * const result = await verifyClient.start({
     *   number: TO_NUMBER,
     *   payee: PAYEE,
     *   amount: AMOUNT,
     * })
     * if (result.requestId) {
     *   console.log(`Request started with id ${result.requestId}`);
     * } else {
     *   console.log(`Request failed with error: ${result.errorText}`);
     * }
     * ```
     */ async start(request) {
        const url = 'brand' in request ? `${this.config.apiHost}/verify/json` : `${this.config.apiHost}/verify/psd2/json`;
        const resp = await this.sendPostRequest(url, server_client_1.Client.transformers.snakeCaseObjectKeys((0, lodash_omit_1.default)(request, [
            'language'
        ])));
        return server_client_1.Client.transformers.camelCaseObjectKeys(resp.data, true, true);
    }
}
exports.Verify = Verify; //# sourceMappingURL=verify.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/classes/PSD2.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PSD2 = void 0;
/**
 * Represents parameters for a PSD2 (Payment Services Directive 2) verification
 * request.
 */ class PSD2 {
    /**
     * The phone number to be verified.
     */ number;
    /**
     * The payee's name or identifier for the payment confirmation.
     */ payee;
    /**
     * The decimal amount of the payment to be confirmed, in Euros.
     */ amount;
    /**
     * The country code associated with the phone number (optional).
     */ country;
    /**
     * The desired length of the verification code (optional).
     */ codeLength;
    /**
     * @deprecated This property is deprecated. Use `lg` instead.
     */ language;
    /**
     * The language for sending verification messages (optional).
     */ lg;
    /**
     * The duration in seconds for which the verification code will be valid.
     */ pinExpiry;
    /**
     * The duration in seconds to wait before sending the next verification event.
     */ nextEventWait;
    /**
     * The workflow ID for customizing the verification process (optional).
     */ workflowId;
    constructor(phoneNumber, payee, amount, country, codeLength, language, lg, pinExpiry, nextEventWait, workflowId){
        this.number = phoneNumber;
        this.amount = amount;
        this.payee = payee;
        if (country) {
            this.country = country;
        }
        if (codeLength) {
            this.codeLength = codeLength;
        }
        if (language) {
            this.lg = language;
            this.language = language;
        }
        if (pinExpiry) {
            this.pinExpiry = pinExpiry;
        }
        if (nextEventWait) {
            this.nextEventWait = nextEventWait;
        }
        if (workflowId) {
            this.workflowId = workflowId;
        }
    }
}
exports.PSD2 = PSD2; //# sourceMappingURL=PSD2.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/classes/Verification.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Verification = void 0;
/**
 * Represents parameters for a verification request.
 */ class Verification {
    /**
     * The phone number to be verified.
     */ number;
    /**
     * The brand or application name associated with the verification request.
     */ brand;
    /**
     * The country code associated with the phone number (optional).
     */ country;
    /**
     * The sender ID or phone number that will be used to send verification
     * messages (optional).
     */ senderId;
    /**
     * The desired length of the verification code (optional).
     */ codeLength;
    /**
     * @deprecated This property is deprecated. Use `lg` instead.
     */ language;
    /**
     * The language for sending verification messages (optional).
     */ lg;
    /**
     * The duration in seconds for which the verification code will be valid.
     */ pinExpiry;
    /**
     * The duration in seconds to wait before sending the next verification event.
     */ nextEventWait;
    /**
     * The workflow ID for customizing the verification process (optional).
     */ workflowId;
    constructor(phoneNumber, brand, country, senderId, codeLength, language, lg, pinExpiry, nextEventWait, workflowId){
        this.number = phoneNumber;
        this.brand = brand;
        if (country) {
            this.country = country;
        }
        if (senderId) {
            this.senderId = senderId;
        }
        if (codeLength) {
            this.codeLength = codeLength;
        }
        if (language) {
            this.lg = language;
            this.language = language;
        }
        if (pinExpiry) {
            this.pinExpiry = pinExpiry;
        }
        if (nextEventWait) {
            this.nextEventWait = nextEventWait;
        }
        if (workflowId) {
            this.workflowId = workflowId;
        }
    }
}
exports.Verification = Verification; //# sourceMappingURL=Verification.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/classes/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/classes/PSD2.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/classes/Verification.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/PSD2Parameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=PSD2Parameters.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/PSD2Request.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=PSD2Request.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/CheckInformation.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CheckInformation.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/EventInformation.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=EventInformation.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/PSD2RequestResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=PSD2RequestResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/SearchCheckInformationResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SearchCheckInformationResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/SearchEventInformationResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SearchEventInformationResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/UnblockRequestResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=UnblockRequestResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyCancelResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyCancelResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyCheckError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyCheckError.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyCheckErrorResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyCheckErrorResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyCheckResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyCheckResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyControlError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyControlError.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyControlResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyControlResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyRequestError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyRequestError.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyRequestResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyRequestResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifySearchErrorResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifySearchErrorResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifySearchResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifySearchResponse.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/Response/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/CheckInformation.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/EventInformation.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/PSD2RequestResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/SearchCheckInformationResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/SearchEventInformationResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/UnblockRequestResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyCancelResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyCheckError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyCheckErrorResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyCheckResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyControlError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyControlResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyRequestError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyRequestResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifyResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifySearchErrorResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/VerifySearchResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerificationParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerificationParams.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerificationRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerificationRequest.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerifyCheck.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyCheck.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerifyCheckError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyCheckError.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerifyClassParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyClassParameters.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerifyControl.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyControl.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerifyControlError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyControlError.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerifyError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyError.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerifyRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifyRequest.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerifySearch.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifySearch.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerifySearchCheck.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifySearchCheck.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/VerifySearchError.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VerifySearchError.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/PSD2Parameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/PSD2Request.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/Response/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerificationParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerificationRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerifyCheck.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerifyCheckError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerifyClassParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerifyControl.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerifyControlError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerifyError.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerifyRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerifySearch.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerifySearchCheck.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/VerifySearchError.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Verify = void 0;
var verify_1 = __turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/verify.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Verify", {
    enumerable: true,
    get: function() {
        return verify_1.Verify;
    }
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/classes/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/enums/channels.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SilentAuthChannel = exports.Channels = void 0;
/**
 * Enum representing different communication channels for verification.
 */ var Channels;
(function(Channels) {
    /**
     * SMS channel for verification.
     */ Channels["SMS"] = "sms";
    /**
     * WhatsApp channel for verification.
     */ Channels["WHATSAPP"] = "whatsapp";
    /**
     * Interactive WhatsApp channel for verification.
     */ Channels["WHATSAPP_INTERACTIVE"] = "whatsapp_interactive";
    /**
     * Voice channel for verification.
     */ Channels["VOICE"] = "voice";
    /**
     * Email channel for verification.
     */ Channels["EMAIL"] = "email";
})(Channels || (exports.Channels = Channels = {}));
/**
 * Enum representing the Silent Authentication channel.
 */ var SilentAuthChannel;
(function(SilentAuthChannel) {
    /**
     * Silent Authentication channel for verification.
     */ SilentAuthChannel["SILENT_AUTH"] = "silent_auth";
})(SilentAuthChannel || (exports.SilentAuthChannel = SilentAuthChannel = {})); //# sourceMappingURL=channels.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/enums/eventStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EventStatus = void 0;
/**
 * Enum representing the status of an event in the verification process.
 */ var EventStatus;
(function(EventStatus) {
    /**
     * The event has been completed successfully.
     */ EventStatus["COMPLETED"] = "completed";
    /**
     * The event has failed.
     */ EventStatus["FAILED"] = "failed";
    /**
     * The user has rejected the event.
     */ EventStatus["USER_REJECTED"] = "user_rejected";
    /**
     * The event has been rejected.
     */ EventStatus["REJECTED"] = "rejected";
})(EventStatus || (exports.EventStatus = EventStatus = {})); //# sourceMappingURL=eventStatus.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/enums/requestStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RequestStatus = void 0;
/**
 * Enum representing the status of a verification request.
 */ var RequestStatus;
(function(RequestStatus) {
    /**
     * The verification request has been completed successfully.
     */ RequestStatus["COMPLETED"] = "completed";
    /**
     * The verification request has failed.
     */ RequestStatus["FAILED"] = "failed";
    /**
     * The verification request has expired.
     */ RequestStatus["EXPIRED"] = "expired";
})(RequestStatus || (exports.RequestStatus = RequestStatus = {})); //# sourceMappingURL=requestStatus.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/enums/requestWorkflowsStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RequestWorkflowStatus = void 0;
/**
 * Enum representing the status of a verification request workflow step.
 */ var RequestWorkflowStatus;
(function(RequestWorkflowStatus) {
    /**
     * The workflow step is unused.
     */ RequestWorkflowStatus["UNUSED"] = "unused";
    /**
     * The workflow step has been completed successfully.
     */ RequestWorkflowStatus["COMPLETED"] = "completed";
    /**
     * The workflow step has failed.
     */ RequestWorkflowStatus["FAILED"] = "failed";
    /**
     * The workflow step has expired.
     */ RequestWorkflowStatus["EXPIRED"] = "expired";
    /**
     * The user has rejected the workflow step.
     */ RequestWorkflowStatus["USER_REJECTED"] = "user_rejected";
})(RequestWorkflowStatus || (exports.RequestWorkflowStatus = RequestWorkflowStatus = {})); //# sourceMappingURL=requestWorkflowsStatus.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/enums/silentAuthStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SilentAuthStatus = void 0;
/**
 * Enum representing the status of Silent Authentication.
 */ var SilentAuthStatus;
(function(SilentAuthStatus) {
    /**
     * Silent Authentication has been completed successfully.
     */ SilentAuthStatus["COMPLETED"] = "completed";
    /**
     * Silent Authentication has failed.
     */ SilentAuthStatus["FAILED"] = "failed";
    /**
     * The user has rejected Silent Authentication.
     */ SilentAuthStatus["USER_REJECTED"] = "user_rejected";
    /**
     * Silent Authentication has expired.
     */ SilentAuthStatus["EXPIRED"] = "expired";
    /**
     * An action is pending for Silent Authentication.
     */ SilentAuthStatus["ACTION_PENDING"] = "action_pending";
})(SilentAuthStatus || (exports.SilentAuthStatus = SilentAuthStatus = {})); //# sourceMappingURL=silentAuthStatus.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/enums/verifyErrors.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=verifyErrors.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/enums/verifyLocale.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VerifyLocale = void 0;
/**
 * Enum representing different locales for verification.
 */ var VerifyLocale;
(function(VerifyLocale) {
    /**
     * English (United States) locale.
     */ VerifyLocale["EN_US"] = "en-us";
    /**
     * English (United Kingdom) locale.
     */ VerifyLocale["EN_GB"] = "en-gb";
    /**
     * Spanish (Spain) locale.
     */ VerifyLocale["ES_ES"] = "es-es";
    /**
     * Spanish (Mexico) locale.
     */ VerifyLocale["ES_MX"] = "es-mx";
    /**
     * Spanish (United States) locale.
     */ VerifyLocale["ES_US"] = "es-us";
    /**
     * Italian (Italy) locale.
     */ VerifyLocale["IT_IT"] = "it-it";
    /**
     * French (France) locale.
     */ VerifyLocale["FR_FR"] = "fr-fr";
    /**
     * German (Germany) locale.
     */ VerifyLocale["DE_DE"] = "de-de";
    /**
     * Russian (Russia) locale.
     */ VerifyLocale["RU_RU"] = "ru-ru";
    /**
     * Hindi (India) locale.
     */ VerifyLocale["HI_IN"] = "hi-in";
    /**
     * Portuguese (Brazil) locale.
     */ VerifyLocale["PT_BR"] = "pt-br";
    /**
     * Portuguese (Portugal) locale.
     */ VerifyLocale["PT_PT"] = "pt-pt";
    /**
     * Indonesian (Indonesia) locale.
     */ VerifyLocale["ID_ID"] = "id-id";
})(VerifyLocale || (exports.VerifyLocale = VerifyLocale = {})); //# sourceMappingURL=verifyLocale.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/enums/channels.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/enums/eventStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/enums/requestStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/enums/requestWorkflowsStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/enums/silentAuthStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/enums/verifyErrors.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/enums/verifyLocale.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/params/listAllTemplateFragmentsParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=listAllTemplateFragmentsParams.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/params/listAllTemplateParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=listAllTemplateParams.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/params/verifcationRequestParams.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=verifcationRequestParams.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/params/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/params/listAllTemplateFragmentsParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/params/listAllTemplateParams.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/params/verifcationRequestParams.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/request.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=request.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/requests/checkCodeRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=checkCodeRequest.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/requests/createTemplateFragmentRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=createTemplateFragmentRequest.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/requests/verificationRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=verificationRequest.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/requests/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/requests/checkCodeRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/requests/createTemplateFragmentRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/requests/verificationRequest.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/responses/checkRequestResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=checkRequestResponse.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/responses/listAllTemplatesResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=listAllTemplatesResponse.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/responses/listAllTemplateFragmentsResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=listAllTemplateFragmentsResponse.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/responses/templateFragmentResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=templateFragmentResponse.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/responses/templateResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=templateResponse.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/responses/verificationResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=verificationResponse.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/responses/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/responses/checkRequestResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/responses/listAllTemplatesResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/responses/listAllTemplateFragmentsResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/responses/templateFragmentResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/responses/templateResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/responses/verificationResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/emailWorkflow.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=emailWorkflow.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/requestStatusCallbackWorkflow.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=requestStatusCallbackWorkflow.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/silentAuthWorkflow.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=silentAuthWorkflow.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/smsWorkflow.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=smsWorkflow.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/voiceWorkflow.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=voiceWorkflow.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/whatsAppInteractiveWorkflow.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=whatsAppInteractiveWorkflow.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/whatsAppWorkflow.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=whatsAppWorkflow.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/emailWorkflow.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/requestStatusCallbackWorkflow.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/silentAuthWorkflow.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/smsWorkflow.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/voiceWorkflow.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/whatsAppInteractiveWorkflow.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/whatsAppWorkflow.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/eventCallback.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=eventCallback.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/requestStatusCallback.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=requestStatusCallback.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/silentAuthCallback.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=silentAuthCallback.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/template.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=template.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/templateFragment.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=templateFragment.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/templatePage.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=templatePage.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/templateFragmentPage.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=templateFragmentPage.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/params/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/request.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/requests/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/responses/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/workflows/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/eventCallback.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/requestStatusCallback.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/silentAuthCallback.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/template.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/templateFragment.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/templatePage.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/templateFragmentPage.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/verify2.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Verify2 = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
/**
 * A class for interacting with the Vonage Verify API (Version 2).
 */ class Verify2 extends server_client_1.Client {
    /**
     * The authentication type used for this client (JWT).
     */ authType = server_client_1.AuthenticationType.JWT;
    /**
     * Creates a new verification request.
     *
     * @param {VerificationRequestParams} params - The parameters for the
     *  verification request.
     * @return {Request} A `Request` object containing the request ID.
     */ async newRequest(params) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v2/verify`, server_client_1.Client.transformers.snakeCaseObjectKeys(params, true));
        return {
            requestId: resp.data.request_id,
            checkUrl: resp.data.check_url
        };
    }
    /**
     * Checks a verification code against a verification request.
     * @param {string} requestId - The ID of the verification request.
     * @param {string} code - The verification code to check.
     * @return {string} The status of the verification code check.
     */ async checkCode(requestId, code) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v2/verify/${requestId}`, {
            code: code
        });
        return resp.data.status;
    }
    /**
     * Cancels a verification request.
     * @param {string} requestId - The ID of the verification request to cancel.
     * @return {boolean} `true` if the cancellation was successful.
     */ async cancel(requestId) {
        try {
            await this.sendDeleteRequest(`${this.config.apiHost}/v2/verify/${requestId}`);
            return true;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        } catch (_) {
            return false;
        }
    }
    /**
     * Generator function to list all templates across multiple pages.
     *
     * @remarks
     * This will continue calling the API to retrieve all templates until there are no more pages left.
     * The function yields each template in camelCase format.
     *
     * @param {ListAllTemplatesParams} [params={}] - Optional filter parameters, including pagination.
     * @yields {Template} - Yields each template object in camelCase format.
     *
     * @example
     * List all templates using pagination:
     * ```ts
     * for await (const template of templateClient.listAllTemplates({ pageSize: 5 })) {
     *   console.log(template.name);
     * }
     * ```
     *
     * @example
     * List all templates without pagination:
     * ```ts
     * for await (const template of templateClient.listAllTemplates()) {
     *   console.log(template.name);
     * }
     * ```
     */ async *listAllTemplates(params = {}) {
        let next = null;
        params.page = params?.page || 1;
        do {
            const resp = await this.getTemplatePage(params);
            yield* resp.templates || [];
            next = resp.links?.next;
            params.page++;
        }while (next)
    }
    /**
     * Retrieves a single page of templates based on the provided pagination parameters.
     *
     * @param {ListAllTemplatesParams} params - The filter parameters for pagination (e.g., page number, page size).
     * @return {Promise<ListAllTemplatesResponse>} - A promise resolving to a page of templates.
     *
     * @example
     * Get a single page of templates:
     *
     * ```ts
     * const templatePage = await templateClient.getTemplatePage({
     *   page: 1,
     *   pageSize: 10
     * });
     *
     * templatePage.templates.forEach(template => {
     *   console.log(template.name);
     * });
     * ```
     */ async getTemplatePage(params = {}) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v2/verify/templates`, {
            ...params.page ? {
                page: params.page
            } : {},
            ...params.pageSize ? {
                page_size: params.pageSize
            } : {}
        });
        const templates = (resp.data._embedded?.templates || []).map((template)=>server_client_1.Client.transformers.camelCaseObjectKeys(template));
        return {
            pageSize: resp.data.page_size,
            page: resp.data.page,
            totalPages: resp.data.total_pages,
            totalItems: resp.data.total_items,
            templates: templates,
            links: resp.data._links
        };
    }
    /**
     * Creates a new template with the provided details.
     *
     * @param {Template} template - The template details to be created.
     * @return {Promise<Template>} - A promise resolving to the created template in camelCase format.
     *
     * @example
     * Create a new template:
     * ```ts
     * const newTemplate = await templateClient.createTemplate({
     *   name: 'My New Template',
     * });
     * console.log(newTemplate.name);
     * ```
     */ async createTemplate(template) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v2/verify/templates`, {
            name: template.name
        });
        return server_client_1.Client.transformers.camelCaseObjectKeys(resp.data);
    }
    /**
     * Retrieves a single template by its unique identifier.
     *
     * @param {string} templateId - The unique identifier of the template to retrieve.
     * @return {Promise<Template>} - A promise resolving to the retrieved template in camelCase format.
     *
     * @example
     * Get a template by ID:
     * ```ts
     * const template = await templateClient.getTemplate('22f571c1-f41a-4db2-bba7-f23a069200c1');
     * console.log(template.name);
     * ```
     */ async getTemplate(templateId) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v2/verify/templates/${templateId}`);
        return server_client_1.Client.transformers.camelCaseObjectKeys(resp.data);
    }
    /**
     * Deletes a template by its unique identifier.
     *
     * @param {string} templateId - The unique identifier of the template to delete.
     * @return {Promise<true>} - A promise that resolves when the template is successfully deleted.
     *
     * @example
     * Delete a template by ID:
     * ```ts
     * await templateClient.deleteTemplate('22f571c1-f41a-4db2-bba7-f23a069200c1');
     * console.log('Template deleted successfully');
     * ```
     */ async deleteTemplate(templateId) {
        await this.sendDeleteRequest(`${this.config.apiHost}/v2/verify/templates/${templateId}`);
        return true;
    }
    /**
     * Updates an existing template with the provided details.
     *
     * @param {Template} template - The full template object with updated details. The template must include its ID.
     * @return {Promise<Template>} - A promise resolving to the updated template in camelCase format.
     *
     * @example
     * Update a template:
     * ```ts
     * const updatedTemplate = await templateClient.updateTemplate({
     *   templateId: '22f571c1-f41a-4db2-bba7-f23a069200c1',
     *   name: 'Updated Template Name',
     *   isDefault: false,
     * });
     * console.log(updatedTemplate.name);
     * ```
     */ async updateTemplate(template) {
        if (!template.templateId) {
            throw new Error('Template ID is required for updating a template');
        }
        const resp = await this.sendPatchRequest(`${this.config.apiHost}/v2/verify/templates/${template.templateId}`, {
            name: template.name,
            is_default: template.isDefault || false
        });
        return server_client_1.Client.transformers.camelCaseObjectKeys(resp.data);
    }
    /**
     * Retrieves a page of template fragments based on the provided pagination and filter parameters.
     *
     * @param {ListAllTemplateFragmentsQueryParams} params - The filter parameters for pagination (e.g., page number, page size, template ID).
     * @return {Promise<ListAllTemplateFragmentsResponse>} - A promise resolving to a page of template fragments.
     *
     * @example
     * Get a page of template fragments:
     * ```ts
     * const fragmentPage = await templateClient.getTemplateFragmentPage({
     *   templateId: '22f571c1-f41a-4db2-bba7-f23a069200c1',
     *   page: 1,
     *   pageSize: 10,
     * });
     * fragmentPage._embedded.template_fragments.forEach(fragment => {
     *   console.log(fragment.text);
     * });
     * ```
     */ async getTemplateFragmentPage(params) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v2/verify/templates/${params.templateId}/template_fragments`, {
            ...params.page ? {
                page: params.page
            } : {},
            ...params.pageSize ? {
                page_size: params.pageSize
            } : {}
        });
        const fragments = (resp.data._embedded?.template_fragments || []).map((fragment)=>server_client_1.Client.transformers.camelCaseObjectKeys(fragment));
        return {
            pageSize: resp.data.page_size,
            page: resp.data.page,
            totalPages: resp.data.total_pages,
            totalItems: resp.data.total_items,
            fragments: fragments,
            links: resp.data._links
        };
    }
    /**
     * Generator function to list all templates across multiple pages.
     *
     * @remarks
     * This will continue calling the API to retrieve all templates until there are no more pages left.
     * The function yields each template in camelCase format.
     *
     * @param {ListAllTemplateFragmentsParams} [params={}] - Optional filter parameters, including pagination.
     * @yields {TemplateFragment} - Yields each template object in camelCase format.
     *
     * @example
     * List all templates using pagination:
     * ```ts
     * for await (const template of templateClient.listAllTemplateFragments({ pageSize: 5 })) {
     *   console.log(template.name);
     * }
     * ```
     *
     * @example
     * List all templates without pagination:
     * ```ts
     * for await (const template of templateClient.listAllTemplateFragments()) {
     *   console.log(template.name);
     * }
     * ```
     */ async *listAllTemplateFragments(params) {
        let next = null;
        params.page = params?.page || 1;
        do {
            const resp = await this.getTemplateFragmentPage(params);
            yield* resp.fragments || [];
            next = resp.links?.next;
            params.page++;
        }while (next)
    }
    /**
     * Retrieves a single template fragment by its unique identifier.
     *
     * @param {string} templateId - The unique identifier of the template.
     * @param {string} fragmentId - The unique identifier of the template fragment.
     * @return {Promise<TemplateFragmentResponse>} - A promise resolving to the retrieved template fragment in snake_case format.
     *
     * @example
     * Get a template fragment by ID:
     * ```ts
     * const fragment = await templateClient.getTemplateFragment('22f571c1-f41a-4db2-bba7-f23a069200c1', 'c70f446e-997a-4313-a081-60a02a31dc19');
     * console.log(fragment.text);
     * ```
     */ async getTemplateFragment(templateId, fragmentId) {
        // Send a GET request to retrieve the specified template fragment by its ID
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v2/verify/templates/${templateId}/template_fragments/${fragmentId}`);
        return server_client_1.Client.transformers.camelCaseObjectKeys(resp.data, true);
    }
    /**
     * Creates a new template fragment with the provided details.
     *
     * @param {string} templateId - The unique identifier of the template to which the fragment belongs.
     * @param {TemplateFragment} fragment - The details of the template fragment to be created.
     * @return {Promise<TemplateFragment>} - A promise resolving to the created template fragment in camelCase format.
     *
     * @example
     * Create a new template fragment:
     * ```ts
     * const newFragment = await templateClient.createTemplateFragment(
     *   '22f571c1-f41a-4db2-bba7-f23a069200c1',
     *   {
     *     channel: 'sms',
     *     locale: 'en-us',
     *     text: 'Your verification code is ${code}',
     *   },
     * );
     * console.log(newFragment.text);
     * ```
     */ async createTemplateFragment(templateId, fragment) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v2/verify/templates/${templateId}/template_fragments`, {
            channel: fragment.channel,
            locale: fragment.locale,
            text: fragment.text
        });
        return server_client_1.Client.transformers.camelCaseObjectKeys(resp.data);
    }
    /**
     * Deletes a template fragment by its unique identifier.
     *
     * @param {string} templateId - The unique identifier of the template to delete.
     * @param {string} fragmentId - The unique identifier of the template to delete.
     * @return {Promise<true>} - A promise that resolves when the template is successfully deleted.
     *
     * @example
     * Delete a template by ID:
     * ```ts
     * await templateClient.deleteTemplateFragment(
     *   '22f571c1-f41a-4db2-bba7-f23a069200c1'
     *   'c70f446e-997a-4313-a081-60a02a31dc19',
     * );
     * console.log('Template Fragment deleted successfully');
     * ```
     */ async deleteTemplateFragment(templateId, fragmentId) {
        await this.sendDeleteRequest(`${this.config.apiHost}/v2/verify/templates/${templateId}/template_fragments/${fragmentId}`);
        return true;
    }
    /**
     * Updates an existing template with the provided details.
     *
     * @param {String} templateId - The ID of the template this fragment belongs to.
     * @param {TemplateFragment} fragment - The full template fragment object with updated details.
     * @return {Promise<TemplateFragment>} - A promise resolving to the updated template fragment in camelCase format.
     *
     * @example
     * Update a template:
     * ```ts
     * const updatedTemplateFragment = await templateClient.updateTemplateFragment(
     *  '22f571c1-f41a-4db2-bba7-f23a069200c1',
     *   {
     *     templateId: '22f571c1-f41a-4db2-bba7-f23a069200c1',
     *     name: 'Updated Template Name',
     *     isDefault: false,
     *   }
     * );
     * console.log(updatedTemplateFragment.name);
     * ```
     */ async updateTemplateFragment(templateId, fragment) {
        if (!fragment.templateFragmentId) {
            throw new Error('Template Fragment ID is required for updating a template fragment');
        }
        const resp = await this.sendPatchRequest(`${this.config.apiHost}/v2/verify/templates/${templateId}/template_fragments/${fragment.templateFragmentId}`, {
            text: fragment.text
        });
        return server_client_1.Client.transformers.camelCaseObjectKeys(resp.data);
    }
}
exports.Verify2 = Verify2; //# sourceMappingURL=verify2.js.map
}}),
"[project]/node_modules/@vonage/verify2/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/verify2.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/AdvancedMachineDetection.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AdvancedMachineDetection.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/BasicCallDetail.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=BasicCallDetail.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/CallDetail.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallDetail.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/CallResult.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallResult.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/CallUpdateResult.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallUpdateResult.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/CallWithAnswerURL.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallWithAnswerURL.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/CallWithNCCO.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallWithNCCO.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/CommonCallFields.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CommonCallFields.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/CommonOutboundCall.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CommonOutboundCall.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/OutboundCall.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=OutboundCall.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/CreateCallParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CreateCallParameters.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/CallListFilter.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallListFilter.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/GetCallsDetailsParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=GetCallsDetailsParameters.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/EarmuffCallParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=EarmuffCallParameters.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/HangupCallParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=HangupCallParameters.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/MuteCallParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=MuteCallParameters.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/PlayTTSParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=PlayTTSParameters.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/TransferCallParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=TransferCallParameters.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/UnearmuffCallParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=UnearmuffCallParameters.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/UnmuteCallParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=UnmuteCallParameters.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/CreateCallParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/CallListFilter.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/GetCallsDetailsParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/EarmuffCallParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/HangupCallParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/MuteCallParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/PlayTTSParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/TransferCallParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/UnearmuffCallParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/UnmuteCallParameters.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/Action.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=Action.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/ConnectAction.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ConnectAction.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/ConversationAction.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ConversationAction.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/DTMFSettings.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=DTMFSettings.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/InputAction.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=InputAction.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/NCCOActions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NCCOActions.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/NotifyAction.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=NotifyAction.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/RecordAction.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=RecordAction.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/SpeechSettings.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SpeechSettings.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/StreamAction.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=StreamAction.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/TalkAction.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=TalkAction.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/Action.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/ConnectAction.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/ConversationAction.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/DTMFSettings.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/InputAction.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/NCCOActions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/NotifyAction.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/RecordAction.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/SpeechSettings.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/StreamAction.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/TalkAction.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/CallEndpoint.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallEndpoint.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/PSTNEndpoint.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=PSTNEndpoint.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/PhoneEndpoint.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=PhoneEndpoint.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/SIPEndpoint.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SIPEndpoint.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/VBCEndpoint.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VBCEndpoint.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/WebsocketEndpoint.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=WebsocketEndpoint.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/AppEndpoint.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=AppEndpoint.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/CallEndpoint.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/PSTNEndpoint.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/PhoneEndpoint.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/SIPEndpoint.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/VBCEndpoint.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/WebsocketEndpoint.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/AppEndpoint.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Requests/CreateCallRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CreateCallRequest.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Requests/GetCallsDetailsRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=GetCallsDetailsRequest.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Requests/ModifyCallRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ModifyCallRequest.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Requests/PlayDTMFRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=PlayDTMFRequest.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Requests/PlayTTSRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=PlayTTSRequest.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Requests/StreamAudioRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=StreamAudioRequest.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Requests/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Requests/CreateCallRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Requests/GetCallsDetailsRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Requests/ModifyCallRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Requests/PlayDTMFRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Requests/PlayTTSRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Requests/StreamAudioRequest.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Responses/CallDetailResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallDetailResponse.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Responses/CreateCallResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CreateCallResponse.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Responses/CallEndpointResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallEndpointResponse.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Responses/CallPageResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CallPageResponse.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Responses/CreateOutboundCallResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CreateOutboundCallResponse.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Responses/UpdateCallResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=UpdateCallResponse.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/Responses/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Responses/CallDetailResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Responses/CreateCallResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Responses/CallEndpointResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Responses/CallPageResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Responses/CreateOutboundCallResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Responses/UpdateCallResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/AdvancedMachineDetection.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/BasicCallDetail.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/CallDetail.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/CallResult.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/CallUpdateResult.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/CallWithAnswerURL.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/CallWithNCCO.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/CommonCallFields.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/CommonOutboundCall.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/OutboundCall.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/NCCO/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Endpoint/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Parameters/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Requests/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/Responses/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/AdvancedMachineDetectionMode.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AdvancedMachineDetectionMode = void 0;
/**
 * Enum representing different modes for advanced machine detection in the Connect NCCO action.
 */ var AdvancedMachineDetectionMode;
(function(AdvancedMachineDetectionMode) {
    /**
     * Default mode, used for advanced async machine detection, including beep detection.
     */ AdvancedMachineDetectionMode["DEFAULT"] = "default";
    /**
     * Detect mode, used for advanced sync machine detection without beep detection.
     */ AdvancedMachineDetectionMode["DETECT"] = "detect";
    /**
     * Detect beep mode, used for advanced sync machine detection with beep detection.
     */ AdvancedMachineDetectionMode["DETECTBEEP"] = "detect_beep";
})(AdvancedMachineDetectionMode || (exports.AdvancedMachineDetectionMode = AdvancedMachineDetectionMode = {})); //# sourceMappingURL=AdvancedMachineDetectionMode.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/CallDirection.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CallDirection = void 0;
/**
 * Enum representing the direction of a call, whether it is outbound or inbound.
 */ var CallDirection;
(function(CallDirection) {
    /**
     * Outbound call direction.
     */ CallDirection["OUTBOUND"] = "outbound";
    /**
     * Inbound call direction.
     */ CallDirection["INBOUND"] = "inbound";
})(CallDirection || (exports.CallDirection = CallDirection = {})); //# sourceMappingURL=CallDirection.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/CallStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CallStatus = void 0;
/**
 * Enum representing the status of a call, including its various stages and outcomes.
 */ var CallStatus;
(function(CallStatus) {
    /**
     * The call has started.
     */ CallStatus["STARTED"] = "started";
    /**
     * The call is ringing.
     */ CallStatus["RINGING"] = "ringing";
    /**
     * The call has been answered.
     */ CallStatus["ANSWERED"] = "answered";
    /**
     * The call has been detected as a machine.
     */ CallStatus["MACHINE"] = "machine";
    /**
     * The call has been completed.
     */ CallStatus["COMPLETED"] = "completed";
    /**
     * The call is busy.
     */ CallStatus["BUSY"] = "busy";
    /**
     * The call has been cancelled.
     */ CallStatus["CANCELLED"] = "cancelled";
    /**
     * The call has failed.
     */ CallStatus["FAILED"] = "failed";
    /**
     * The call has been rejected.
     */ CallStatus["REJECTED"] = "rejected";
    /**
     * The call has timed out.
     */ CallStatus["TIMEOUT"] = "timeout";
    /**
     * The call went unanswered.
     */ CallStatus["UNANSWERED"] = "unanswered";
})(CallStatus || (exports.CallStatus = CallStatus = {})); //# sourceMappingURL=CallStatus.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/HttpMethod.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HttpMethod = void 0;
/**
 * Enum representing HTTP methods used for making web requests.
 */ var HttpMethod;
(function(HttpMethod) {
    /**
     * The HTTP GET method, used for retrieving data from a server.
     */ HttpMethod["GET"] = "GET";
    /**
     * The HTTP POST method, used for sending data to a server to create or update resources.
     */ HttpMethod["POST"] = "POST";
})(HttpMethod || (exports.HttpMethod = HttpMethod = {})); //# sourceMappingURL=HttpMethod.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/MachineDetctionBehavior.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MachineDetectionBehavior = void 0;
/**
 * Enum representing the behavior of machine detection in a call.
 */ var MachineDetectionBehavior;
(function(MachineDetectionBehavior) {
    /**
     * Continue the call even if a machine is detected.
     */ MachineDetectionBehavior["CONTINUE"] = "continue";
    /**
     * Hang up the call if a machine is detected.
     */ MachineDetectionBehavior["HANGUP"] = "hangup";
})(MachineDetectionBehavior || (exports.MachineDetectionBehavior = MachineDetectionBehavior = {})); //# sourceMappingURL=MachineDetctionBehavior.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/NCCOActions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NCCOActions = void 0;
/**
 * Enum representing the available actions in a Nexmo Call Control Object (NCCO).
 */ var NCCOActions;
(function(NCCOActions) {
    /**
     * Connect the call to an endpoint or multiple endpoints.
     */ NCCOActions["CONNECT"] = "connect";
    /**
     * Start a conversation that can include multiple participants.
     */ NCCOActions["CONVERSATION"] = "conversation";
    /**
     * Collect input from the caller, including DTMF tones or speech.
     */ NCCOActions["INPUT"] = "input";
    /**
     * Send a notification or message to a specified endpoint.
     */ NCCOActions["NOTIFY"] = "notify";
    /**
     * Record the audio of a call.
     */ NCCOActions["RECORD"] = "record";
    /**
     * Stream audio to a call.
     */ NCCOActions["STREAM"] = "stream";
    /**
     * Play a text-to-speech message to the caller.
     */ NCCOActions["TALK"] = "talk";
})(NCCOActions || (exports.NCCOActions = NCCOActions = {})); //# sourceMappingURL=NCCOActions.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/TTSLanguages.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TTSLanguages = void 0;
/**
 * Enum representing the supported Text-to-Speech (TTS) languages for Nexmo's voice calls.
 */ var TTSLanguages;
(function(TTSLanguages) {
    /**
     * Afrikaans (af-ZA) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["AF_ZA"] = "af-ZA";
    /**
     * Arabic (ar) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["AR"] = "ar";
    /**
     * Bulgarian (bg-BG) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["BG_BG"] = "bg-BG";
    /**
     * Bengali (bn-IN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["BN_IN"] = "bn-IN";
    /**
     * Catalan, Valencian (ca-ES) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["CA_ES"] = "ca-ES";
    /**
     * China Chinese, Mandarin (cmn-CN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["CMN_CN"] = "cmn-CN";
    /**
     * Taiwan Chinese, Mandarin (cmn-TW) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["CMN_TW"] = "cmn-TW";
    /**
     * Czech (cs-CZ) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["CS_CZ"] = "cs-CZ";
    /**
     * Welsh (cy-GB) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["CY_GB"] = "cy-GB";
    /**
     * Danish (da-DK) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["DA_DK"] = "da-DK";
    /**
     * Austria German (de-AT) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["DE_AT"] = "de-AT";
    /**
     * German (de-DE) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["DE_DE"] = "de-DE";
    /**
     * Ethiopia German (de-ET) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["DE_ET"] = "de-ET";
    /**
     * Greek (el-GR) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EL_GR"] = "el-GR";
    /**
     * Australia English (en-AU) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EN_AU"] = "en-AU";
    /**
     * United Kingdom English (en-GB) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EN_GB"] = "en-GB";
    /**
     * Scotland English (en-GB-SCT) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EN_GB_SCT"] = "en-GB-SCT";
    /**
     * Wales English (en-GB-WLS) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EN_GB_WLS"] = "en-GB-WLS";
    /**
     * Ireland English (en-IE) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EN_IE"] = "en-IE";
    /**
     * India English (en-IN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EN_IN"] = "en-IN";
    /**
     * New Zealand English (en-NZ) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EN_NZ"] = "en-NZ";
    /**
     * United States English (en-US) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EN_US"] = "en-US";
    /**
     * South Africa English (en-ZA) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EN_ZA"] = "en-ZA";
    /**
     * Colombia Spanish (es-CO) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["ES_CO"] = "es-CO";
    /**
     * Spain Spanish (es-ES) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["ES_ES"] = "es-ES";
    /**
     * Mexico Spanish (es-MX) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["ES_MX"] = "es-MX";
    /**
     * United States Spanish (es-US) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["ES_US"] = "es-US";
    /**
     * Basque (eu-ES) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["EU_ES"] = "eu-ES";
    /**
     * Finnish (fi-FI) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["FI_FI"] = "fi-FI";
    /**
     * Filipino (fil-PH) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["FIL_PH"] = "fil-PH";
    /**
     * Canada French (fr-CA) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["FR_CA"] = "fr-CA";
    /**
     * France French (fr-FR) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["FR_FR"] = "fr-FR";
    /**
     * Spain Galician (gl-ES) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["GL_ES"] = "gl-ES";
    /**
     * Gujarati (gu-IN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["GU_IN"] = "gu-IN";
    /**
     * Hebrew (he-IL) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["HE_IL"] = "he-IL";
    /**
     * Hindi (hi-IN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["HI_IN"] = "hi-IN";
    /**
     * Hungarian (hu-HU) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["HU_HU"] = "hu-HU";
    /**
     * Indonesian (id-ID) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["ID_ID"] = "id-ID";
    /**
     * Icelandic (is-IS) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["IS_IS"] = "is-IS";
    /**
     * Italian (it-IT) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["IT_IT"] = "it-IT";
    /**
     * Japanese (ja-JP) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["JA_JP"] = "ja-JP";
    /**
     * Kannada (kn-IN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["KN_IN"] = "kn-IN";
    /**
     * Korean (ko-KR) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["KO_KR"] = "ko-KR";
    /**
     * Latvian (lv-LV) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["LV_LV"] = "lv-LV";
    /**
     * Malayalam (ml-IN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["ML_IN"] = "ml-IN";
    /**
     * Malay (ms-MY) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["MS_MY"] = "ms-MY";
    /**
     * Norwegian (nb-NO) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["NB_NO"] = "nb-NO";
    /**
     * Belgium Dutch (nl-BE) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["NL_BE"] = "nl-BE";
    /**
     * Netherlands Dutch (nl-NL) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["NL_NL"] = "nl-NL";
    /**
     * Norwegian (no-NO) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["NO_NO"] = "no-NO";
    /**
     * Punjabi (pa-IN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["PA_IN"] = "pa-IN";
    /**
     * Polish (pl-PL) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["PL_PL"] = "pl-PL";
    /**
     * Brazil Portuguese (pt-BR) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["PT_BR"] = "pt-BR";
    /**
     * Portugal Portuguese (pt-PT) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["PT_PT"] = "pt-PT";
    /**
     * Romanian (ro-RO) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["RO_RO"] = "ro-RO";
    /**
     * Russian (ru-RU) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["RU_RU"] = "ru-RU";
    /**
     * Slovak (sk-SK) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["SK_SK"] = "sk-SK";
    /**
     * Serbian (sr-RS) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["SR_RS"] = "sr-RS";
    /**
     * Swedish (sv-SE) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["SV_SE"] = "sv-SE";
    /**
     * Tamil (ta-IN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["TA_IN"] = "ta-IN";
    /**
     * Telugu (te-IN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["TE_IN"] = "te-IN";
    /**
     * Thai (th-TH) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["TH_TH"] = "th-TH";
    /**
     * Turkish (tr-TR) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["TR_TR"] = "tr-TR";
    /**
     * Ukrainian (uk-UA) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["UK_UA"] = "uk-UA";
    /**
     * Vietnamese (vi-VN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["VI_VN"] = "vi-VN";
    /**
     * China Chinese, Cantonese (yue-CN) - Supported Text-to-Speech (TTS) language.
     */ TTSLanguages["YUE_CN"] = "yue-CN";
})(TTSLanguages || (exports.TTSLanguages = TTSLanguages = {})); //# sourceMappingURL=TTSLanguages.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/TTSVoices.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TTSVoices = void 0;
/**
 * Enum representing supported Text-to-Speech (TTS) voices.
 */ var TTSVoices;
(function(TTSVoices) {
    /**
     * Aditi - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["ADITI"] = "Aditi";
    /**
     * Agnieszka - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["AGNIESZKA"] = "Agnieszka";
    /**
     * Alva - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["ALVA"] = "Alva";
    /**
     * Amy - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["AMY"] = "Amy";
    /**
     * Astrid - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["ASTRID"] = "Astrid";
    /**
     * Bianca - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["BIANCA"] = "Bianca";
    /**
     * Brian - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["BRIAN"] = "Brian";
    /**
     * Carla - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["CARLA"] = "Carla";
    /**
     * Carmen - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["CARMEN"] = "Carmen";
    /**
     * Carmit - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["CARMIT"] = "Carmit";
    /**
     * Catarina - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["CATARINA"] = "Catarina";
    /**
     * Celine - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["CELINE"] = "Celine";
    /**
     * Cem - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["CEM"] = "Cem";
    /**
     * Chantal - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["CHANTAL"] = "Chantal";
    /**
     * Chipmunk - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["CHIPMUNK"] = "Chipmunk";
    /**
     * Conchita - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["CONCHITA"] = "Conchita";
    /**
     * Cristiano - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["CRISTIANO"] = "Cristiano";
    /**
     * Damayanti - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["DAMAYANTI"] = "Damayanti";
    /**
     * Dora - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["DORA"] = "Dora";
    /**
     * Emma - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["EMMA"] = "Emma";
    /**
     * Empar - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["EMPAR"] = "Empar";
    /**
     * Enrique - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["ENRIQUE"] = "Enrique";
    /**
     * Eric - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["ERIC"] = "Eric";
    /**
     * Ewa - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["EWA"] = "Ewa";
    /**
     * Felipe - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["FELIPE"] = "Felipe";
    /**
     * Filiz - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["FILIZ"] = "Filiz";
    /**
     * Geraint - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["GERAINT"] = "Geraint";
    /**
     * Giorgio - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["GIORGIO"] = "Giorgio";
    /**
     * Gwyneth - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["GWYNETH"] = "Gwyneth";
    /**
     * Hans - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["HANS"] = "Hans";
    /**
     * Henrik - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["HENRIK"] = "Henrik";
    /**
     * Ines - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["INES"] = "Ines";
    /**
     * Ioana - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["IOANA"] = "Ioana";
    /**
     * Iveta - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["IVETA"] = "Iveta";
    /**
     * Ivy - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["IVY"] = "Ivy";
    /**
     * Jacek - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["JACEK"] = "Jacek";
    /**
     * Jan - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["JAN"] = "Jan";
    /**
     * Jennifer - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["JENNIFER"] = "Jennifer";
    /**
     * Joana - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["JOANA"] = "Joana";
    /**
     * Joanna - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["JOANNA"] = "Joanna";
    /**
     * Joey - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["JOEY"] = "Joey";
    /**
     * Jordi - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["JORDI"] = "Jordi";
    /**
     * Justin - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["JUSTIN"] = "Justin";
    /**
     * Kanya - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["KANYA"] = "Kanya";
    /**
     * Karl - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["KARL"] = "Karl";
    /**
     * Kendra - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["KENDRA"] = "Kendra";
    /**
     * Kimberly - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["KIMBERLY"] = "Kimberly";
    /**
     * Laila - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["LAILA"] = "Laila";
    /**
     * Laura - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["LAURA"] = "Laura";
    /**
     * Lea - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["LEA"] = "Lea";
    /**
     * Lekha - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["LEKHA"] = "Lekha";
    /**
     * Liv - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["LIV"] = "Liv";
    /**
     * Lotte - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["LOTTE"] = "Lotte";
    /**
     * Lucia - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["LUCIA"] = "Lucia";
    /**
     * Luciana - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["LUCIANA"] = "Luciana";
    /**
     * Mads - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MADS"] = "Mads";
    /**
     * Maged - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MAGED"] = "Maged";
    /**
     * Maja - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MAJA"] = "Maja";
    /**
     * Mariska - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MARISKA"] = "Mariska";
    /**
     * Marlene - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MARLENE"] = "Marlene";
    /**
     * Mathieu - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MATHIEU"] = "Mathieu";
    /**
     * Matthew - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MATTHEW"] = "Matthew";
    /**
     * Maxim - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MAXIM"] = "Maxim";
    /**
     * Mei-Jia - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MEI_JIA"] = "Mei-Jia";
    /**
     * Melina - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MELINA"] = "Melina";
    /**
     * Mia - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MIA"] = "Mia";
    /**
     * Miguel - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MIGUEL"] = "Miguel";
    /**
     * Miren - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MIREN"] = "Miren";
    /**
     * Mizuki - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MIZUKI"] = "Mizuki";
    /**
     * Montserrat - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["MONTSERRAT"] = "Montserrat";
    /**
     * Naja - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["NAJA"] = "Naja";
    /**
     * Nicole - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["NICOLE"] = "Nicole";
    /**
     * Nikos - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["NIKOS"] = "Nikos";
    /**
     * Nora - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["NORA"] = "Nora";
    /**
     * Oskar - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["OSKAR"] = "Oskar";
    /**
     * Penelope - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["PENELOPE"] = "Penelope";
    /**
     * Raveena - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["RAVEENA"] = "Raveena";
    /**
     * Ricardo - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["RICARDO"] = "Ricardo";
    /**
     * Ruben - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["RUBEN"] = "Ruben";
    /**
     * Russell - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["RUSSELL"] = "Russell";
    /**
     * Salli - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["SALLI"] = "Salli";
    /**
     * Satu - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["SATU"] = "Satu";
    /**
     * Seoyeon - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["SEOYEON"] = "Seoyeon";
    /**
     * Sin-Ji - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["SIN_JI"] = "Sin-Ji";
    /**
     * Sora - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["SORA"] = "Sora";
    /**
     * Takumi - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["TAKUMI"] = "Takumi";
    /**
     * Tarik - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["TARIK"] = "Tarik";
    /**
     * Tatyana - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["TATYANA"] = "Tatyana";
    /**
     * Tessa - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["TESSA"] = "Tessa";
    /**
     * Tian-Tian - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["TIAN_TIAN"] = "Tian-Tian";
    /**
     * Vicki - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["VICKI"] = "Vicki";
    /**
     * Vitoria - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["VITORIA"] = "Vitoria";
    /**
     * Yelda - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["YELDA"] = "Yelda";
    /**
     * Zeina - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["ZEINA"] = "Zeina";
    /**
     * Zhiyu - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["ZHIYU"] = "Zhiyu";
    /**
     * Zuzana - Supported Text-to-Speech (TTS) voice.
     */ TTSVoices["ZUZANA"] = "Zuzana";
})(TTSVoices || (exports.TTSVoices = TTSVoices = {})); //# sourceMappingURL=TTSVoices.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/Endpoint/WebsocketBitrate.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebsocketBitrate = void 0;
/**
 * Enum representing different bitrate options for audio in a WebSocket configuration.
 */ var WebsocketBitrate;
(function(WebsocketBitrate) {
    /**
     * Audio bitrate at 8000 samples per second.
     */ WebsocketBitrate["RATE_8000"] = "audio/l16;rate=8000";
    /**
     * Audio bitrate at 16000 samples per second.
     */ WebsocketBitrate["RATE_16000"] = "audio/l16;rate=16000";
})(WebsocketBitrate || (exports.WebsocketBitrate = WebsocketBitrate = {})); //# sourceMappingURL=WebsocketBitrate.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/Endpoint/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/Endpoint/WebsocketBitrate.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/NCCO/ConnectEventType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConnectEventType = void 0;
/**
 * Enum representing different event types for the Connect NCCO action.
 */ var ConnectEventType;
(function(ConnectEventType) {
    /**
     * Synchronous event type.
     */ ConnectEventType["SYNCHRONOUS"] = "synchronous";
})(ConnectEventType || (exports.ConnectEventType = ConnectEventType = {})); //# sourceMappingURL=ConnectEventType.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/NCCO/MachineDetection.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MachineDetection = void 0;
/**
 * Enum representing machine detection behavior for the Connect NCCO action.
 */ var MachineDetection;
(function(MachineDetection) {
    /**
     * Continue with the call if machine detection is triggered.
     */ MachineDetection["CONTINUE"] = "continue";
    /**
     * Hang up the call if machine detection is triggered.
     */ MachineDetection["HANGUP"] = "hangup";
})(MachineDetection || (exports.MachineDetection = MachineDetection = {})); //# sourceMappingURL=MachineDetection.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/NCCO/RecordingFormat.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RecordingFormat = void 0;
/**
 * Enum representing different recording formats for the Record NCCO action.
 */ var RecordingFormat;
(function(RecordingFormat) {
    /**
     * MP3 audio format.
     */ RecordingFormat["MP3"] = "mp3";
    /**
     * WAV audio format.
     */ RecordingFormat["WAV"] = "wav";
    /**
     * OGG audio format.
     */ RecordingFormat["OGG"] = "ogg";
})(RecordingFormat || (exports.RecordingFormat = RecordingFormat = {})); //# sourceMappingURL=RecordingFormat.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/NCCO/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/NCCO/ConnectEventType.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/NCCO/MachineDetection.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/NCCO/RecordingFormat.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/AdvancedMachineDetectionMode.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/CallDirection.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/CallStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/HttpMethod.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/MachineDetctionBehavior.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/NCCOActions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/TTSLanguages.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/TTSVoices.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/Endpoint/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/NCCO/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/voice.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Voice = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
const vetch_1 = __turbopack_context__.r("[project]/node_modules/@vonage/vetch/dist/lib/index.js [app-rsc] (ecmascript)");
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/index.js [app-rsc] (ecmascript)");
const apiCallsToCalls = (call)=>{
    delete call._links;
    const transformedCall = server_client_1.Client.transformers.camelCaseObjectKeys(call, true, true);
    delete transformedCall.conversationUuid;
    return {
        ...transformedCall,
        conversationUUID: call.conversation_uuid
    };
};
const NCCOToApiCalls = (ncco)=>ncco.map((action)=>{
        switch(action.action){
            case enums_1.NCCOActions.CONNECT:
                return {
                    ...action,
                    endpoint: action.endpoint?.map((endpoint)=>{
                        switch(endpoint.type){
                            case 'sip':
                                return {
                                    type: 'sip',
                                    uri: endpoint.uri,
                                    headers: endpoint.headers,
                                    standardHeaders: {
                                        'User-to-User': Object.hasOwn(endpoint.standardHeaders || {}, 'User-to-User') ? ({
                                            ...endpoint.standardHeaders
                                        })['User-to-User'] : endpoint.standardHeaders?.userToUser
                                    }
                                };
                            default:
                                return endpoint;
                        }
                    })
                };
            default:
                return action;
        }
    });
/**
 * A Clint to make calls to the Vonage Voice API.
 *
 * @remarks
 * Vonage API's will return information using `snake_case`. This represents the
 * pure response before the client will transform the keys into `camelCase`.
 *
 * @example
 * Create a standalone Voice client
 *
 * ```ts
 * import { Voice } from '@vonage/voice';
 *
 * const voiceClient = new Voice({
 *  apiKey: VONAGE_API_KEY,
 *  apiSecret: VONAGE_API_SECRET
 * });
 * ```
 *
 * @example
 * Create an Voice client from the Vonage client
 *
 * ```ts
 * import { Vonage } from '@vonage/server-client';
 *
 * const vonage = new Vonage({
 *   apiKey: VONAGE_API_KEY,
 *   apiSecret: VONAGE_API_SECRET
 * });
 *
 * const voiceClient = vonage.voice;
 * ```
 */ class Voice extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.JWT;
    /**
     * Retrieves details of all calls using pagination.
     *
     * @param {GetCallDetailsParameters} params - Optional parameters for filtering and pagination.
     * @return {AsyncGenerator<CallDetail, void, undefined>} An async generator that yields call details or void when there are no more results.
     *
     * @example
     * ```ts
     * for await (const call of voiceClient.getAllCalls()) {
     *   console.log(call.startTime);
     * }
     * ```
     */ async *getAllCalls(params = {}) {
        let next = null;
        params.recordIndex = params?.recordIndex || 0;
        do {
            const resp = await this.getCallsPage(params);
            yield* resp?._embedded?.calls.map(apiCallsToCalls);
            next = resp?._links?.next ? new URL(resp._links.next.href) : null;
            if (next) {
                params.recordIndex = parseInt(next.searchParams.get('record_index'));
            }
        }while (next)
    }
    /**
     * Retrieves a page of call details based on the specified parameters.
     *
     * @param {GetCallDetailsParameters} params - Optional parameters for filtering and pagination.
     * @return {Promise<CallPageResponse>} A promise that resolves to a page of call details.
     *
     * @example
     * ```ts
     * const page = await voiceClient.getCallsPage();
     * for (const call of page._embedded.calls) {
     *   console.log(call.startTime);
     * }
     * ```
     *
     * @example
     * Get the next page of call details
     * ```ts
     * const page = await voiceClient.getCallsPage({
     *   pageSize: 4,
     *   recordIndex: 10,
     * });
     * for (const call of page._embedded.calls) {
     *   console.log(call.startTime);
     * }
     * ```
     *
     * @example
     * Get all started calls
     * ```ts
     * import { CallStatus } from '@vonage/voice';
     *
     * const page = await voiceClient.getCallsPage({
     *   pageSize: 4,
     *   recordIndex: 10,
     *   status: CallStatus.STARTED,
     * });
     * for (const call of page._embedded.calls) {
     *   console.log(call.startTime);
     * }
     * ```
     */ async getCallsPage(params) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/calls`, server_client_1.Client.transformers.snakeCaseObjectKeys(params));
        return {
            ...resp.data
        };
    }
    /**
     * Searches for call details based on the provided filter.
     *
     * @param {GetCallDetailsParameters} [filter] - Optional filter criteria to narrow down the search.
     * @return {Promise<CallPageResponse>} A promise that resolves to a page of call details matching the filter.
     *
     * @example
     * ```ts
     * const page = await voiceClient.search({
     *   pageSize: 4,
     * });
     *
     * for (const call of page._embedded.calls) {
     *   console.log(call.startTime);
     *   console.log(call.status);
     *   console.log(call.direction);
     *   console.log(call.duration);
     * };
     * ```
     */ async search(filter) {
        return this.getCallsPage(filter);
    }
    /**
     * Retrieves detailed information about a specific call using its UUID.
     *
     * @param {string} uuid - The UUID of the call to retrieve details for.
     * @return {Promise<CallDetail>} A promise that resolves to detailed information about the call.
     *
     * @example
     * ```ts
     * const call = await voiceClient.getCall('CALL_UUID');
     * console.log(call.startTime);
     * ```
     */ async getCall(uuid) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/calls/${uuid}`);
        return apiCallsToCalls(resp.data);
    }
    /**
     * Initiates an outbound call with the specified configuration.
     *
     * @param {OutboundCall} call - The configuration for the outbound call.
     * @return {Promise<CallResult>} A promise that resolves to the result of the outbound call initiation.
     *
     * @example
     * Create a call with answer NCCO
     * ```ts
     * const call = await voiceClient.createOutboundCall({
     *   to: [{
     *     type: 'phone',
     *     number: TO_NUMBER
     *   }],
     *   asnwer_url: ['https://example.com/answer'],
     * });
     *
     * console.log(call.uuid);
     *
     * ```
     * @example
     * Create a call with answer URL
     * ```ts
     * const call = await voiceClient.createOutboundCall({
     *   to: [{
     *     type: 'phone',
     *     number: TO_NUMBER
     *   }],
     *   ncco: [{
     *     action: 'talk',
     *     text: 'This is a text to speech call from Vonage'
     *   }]
     * });
     *
     * console.log(call.uuid);
     * ```
     */ async createOutboundCall(call) {
        const callRequest = server_client_1.Client.transformers.snakeCaseObjectKeys(call, true);
        if (call.ncco) {
            callRequest.ncco = call.ncco;
        }
        const to = call.to.map((endpoint)=>{
            switch(endpoint.type){
                case 'sip':
                    return {
                        type: 'sip',
                        uri: endpoint.uri,
                        headers: endpoint.headers,
                        standard_headers: {
                            'User-to-User': endpoint.standardHeaders?.userToUser
                        }
                    };
            }
            return endpoint;
        });
        callRequest.to = to;
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v1/calls`, callRequest);
        const result = server_client_1.Client.transformers.camelCaseObjectKeys(resp.data, true, true);
        delete result.conversationUuid;
        result.conversationUUID = resp.data.conversation_uuid;
        return result;
    }
    /**
     * Plays DTMF (Dual-Tone Multi-Frequency) tones on an active call.
     *
     * @param {string} uuid - The UUID of the call on which to play DTMF tones.
     * @param {string} digits - The DTMF tones to play.
     * @return {Promise<CallUpdateResult>} A promise that resolves to the result of playing DTMF tones on the call.
     *
     * @example
     * ```ts
     * const result = await voiceClient.playDTMF('CALL_UUID', '1234');
     * console.log(result.status);
     * ```
     */ async playDTMF(uuid, digits) {
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/dtmf`, {
            digits: digits
        });
        return server_client_1.Client.transformers.snakeCaseObjectKeys(resp.data, true, true);
    }
    /**
     * Register a listener to receive asynchronous DTMF inputs from a call
     *
     * This is only applicable to Input NCCO events with the mode set to
     * asynchronous. The payload delivered to this URL will be an Input webhook
     * event with a single DTMF digit every time the callee enters DTMF into the
     * call.
     *
     * @param {string} uuid - The UUID of the call leg
     * @param {string} eventUrl - The The URL to send DTMF events to, as a POST request.
     * @return {Promise<void>} A promise that resolves to the result
     *
     * @example
     * ```ts
     * const result = await voiceClient.subscribeDTMF('CALL_UUID', 'https://example.com/dtmf');
     * console.log(result.status);
     * ```
     */ async subscribeDTMF(uuid, eventUrl) {
        await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/input/dtmf`, {
            event_url: [
                eventUrl
            ]
        });
    }
    /**
     * Removes the registered DTMF listener
     * @param {string} uuid - The UUID of the call leg
     * @return {Promise<void>} A promise that resolves to the result
     *
     * @example
     * ```ts
     * const result = await voiceClient.subscribeDTMF('CALL_UUID', 'https://example.com/dtmf');
     * console.log(result.status);
     * ```
     */ async unsubscribeDTMF(uuid) {
        await this.sendDeleteRequest(`${this.config.apiHost}/v1/calls/${uuid}/input/dtmf`);
    }
    /**
     * Plays text-to-speech (TTS) audio on an active call.
     *
     * @param {string} uuid - The UUID of the call on which to play TTS audio.
     * @param {TalkAction} action - The TTS action configuration.
     * @return {Promise<CallUpdateResult>} A promise that resolves to the result of playing TTS audio on the call.
     *
     * @example
     * ```ts
     * const result = await voiceClient.playTTS(
     *   CALL_UUID,
     *   {
     *     text: 'This is a text to speech call from Vonage',
     *   },
     * );
     *
     * console.log(result.status);
     * ```
     */ async playTTS(uuid, action) {
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/talk`, {
            text: action.text,
            loop: action.loop,
            level: action.level,
            language: action.language,
            style: action.style,
            premium: action.premium
        });
        return server_client_1.Client.transformers.snakeCaseObjectKeys(resp.data, true, true);
    }
    /**
     * Stops any ongoing text-to-speech (TTS) audio playback on an active call.
     *
     * @param {string} uuid - The UUID of the call on which to stop TTS audio playback.
     * @return {Promise<CallUpdateResult>} A promise that resolves to the result of stopping TTS audio playback on the call.
     *
     * @example
     *
     * ```ts
     * const result = await voiceClient.stopTTS(CALL_UUID);
     * console.log(result.status);
     * ```
     */ async stopTTS(uuid) {
        const resp = await this.sendDeleteRequest(`${this.config.apiHost}/v1/calls/${uuid}/talk`);
        return server_client_1.Client.transformers.snakeCaseObjectKeys(resp.data, true, true);
    }
    /**
     * Stream audio to an active call, allowing you to play audio files or live audio streams.
     *
     * @param {string} uuid - The UUID of the call to which to stream audio.
     * @param {string} url - The URL of the audio stream to play.
     * @param {number} [loop=1] - The number of times to loop the audio stream (default is 1).
     * @param {number} [volumeLevel=0.0] - The volume level of the audio stream (0.0 to 1.0, default is 0.0).
     * @return {Promise<UpdateCallResponse>} A promise that resolves to the result of streaming audio to the call.
     *
     *
     * @example
     * ```ts
     * const result = await voiceClient.streamAudio(CALL_UUID, 'https://example.com/audio.mp3');
     * console.log(result.message);
     * ```
     */ async streamAudio(uuid, url, loop = 1, volumeLevel = 0.0) {
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/stream`, {
            stream_url: [
                url
            ],
            loop,
            level: String(volumeLevel)
        });
        return server_client_1.Client.transformers.snakeCaseObjectKeys(resp.data, true, true);
    }
    /**
     * Stop streaming audio to an active call.
     *
     * @param {string} uuid - The UUID of the call from which to stop streaming audio.
     * @return {Promise<CallUpdateResult>} A promise that resolves to the result of stopping audio streaming to the call.
     *
     * @example
     * ```ts
     * const result = await voiceClient.stopStreamAudio(CALL_UUID);
     * console.log(result.message);
     * ```
     */ async stopStreamAudio(uuid) {
        const resp = await this.sendDeleteRequest(`${this.config.apiHost}/v1/calls/${uuid}/stream`);
        return server_client_1.Client.transformers.snakeCaseObjectKeys(resp.data, true, true);
    }
    /**
     * Transfer an active call to a new destination using a Nexmo Call Control Object (NCCO).
     *
     * @param {string} uuid - The UUID of the call to transfer.
     * @param {Action[]} ncco - The NCCO actions defining the transfer destination.
     * @return {Promise<void>} A promise that resolves when the call has been successfully transferred.
     *
     * @example
     * ```ts
     * await voiceClient.transferCallWithNCCO(
     *   CALL_UUID,
     *   [{
     *     action: 'talk',
     *     text: 'You will now be transferred to a new destination''
     *   }],
     * )
     * ```
     */ async transferCallWithNCCO(uuid, ncco) {
        return this.callAction(uuid, 'transfer', {
            type: 'ncco',
            ncco: NCCOToApiCalls(ncco)
        });
    }
    /**
     * Transfer an active call to a new destination using a URL.
     *
     * @param {string} uuid - The UUID of the call to transfer.
     * @param {string} url - The URL of the transfer destination.
     * @return {Promise<void>} A promise that resolves when the call has been successfully transferred.
     *
     * @example
     * ```ts
     * await voiceClient.transferCallWithURL(
     *   CALL_UUID,
     *   'https://example.com/transfer',
     * );
     * ```
     */ async transferCallWithURL(uuid, url) {
        return this.callAction(uuid, 'transfer', {
            type: 'ncco',
            url: [
                url
            ]
        });
    }
    /**
     * Hang up an active call.
     *
     * @param {string} uuid - The UUID of the call to hang up.
     * @return {Promise<void>} A promise that resolves when the call has been successfully hung up.
     * @example
     * ```ts
     * await voiceClient.hangupCall(CALL_UUID);
     * ```
     */ async hangupCall(uuid) {
        return this.callAction(uuid, 'hangup');
    }
    /**
     * Mute an active call.
     *
     * @param {string} uuid - The UUID of the call to mute.
     * @return {Promise<void>} A promise that resolves when the call has been successfully muted.
     *
     * @example
     * ```ts
     * await voiceClient.muteCall(CALL_UUID);
     * ```
     */ async muteCall(uuid) {
        return this.callAction(uuid, 'mute');
    }
    /**
     * Unmute a muted call, allowing audio to be transmitted again.
     *
     * @param {string} uuid - The UUID of the call to unmute.
     * @return {Promise<void>} A promise that resolves when the call has been successfully unmuted.
     *
     * @example
     * ```ts
     * await voiceClient.unmuteCall(CALL_UUID);
     * ```
     */ async unmuteCall(uuid) {
        return this.callAction(uuid, 'unmute');
    }
    /**
     * Places a call on earmuff, muting the audio for all participants except the user.
     *
     * @param {string} uuid - The UUID of the call to earmuff.
     * @return {Promise<void>} A promise that resolves when the call has been successfully earmuffed.
     *
     * @example
     * ```ts
     * await voiceClient.earmuffCall(CALL_UUID);
     * ```
     */ async earmuffCall(uuid) {
        return this.callAction(uuid, 'earmuff');
    }
    /**
     * Remove an earmuff from a call, allowing all participants to hear each other again.
     *
     * @param {string} uuid - The UUID of the call to unearmuff.
     * @return {Promise<void>} A promise that resolves when the call has been successfully unearmuffed.
     *
     * @example
     * ```ts
     * await voiceClient.unearmuffCall(CALL_UUID);
     * ```
     */ async unearmuffCall(uuid) {
        return this.callAction(uuid, 'unearmuff');
    }
    /**
     * Download the recording of a call to the specified file path.
     *
     * @param {string} file - The name or recording id of the recording file to download.
     * @param {string} path - The local file path where the recording will be saved.
     * @return {Promise<void>} A promise that resolves when the recording has been successfully downloaded.
     *
     * @example
     * ```ts
     * await voiceClient.downloadRecording(RECORDING_UUID, './recording.mp3');
     * ```
     */ async downloadRecording(file, path) {
        const config = this.config;
        config.responseType = vetch_1.ResponseTypes.stream;
        const client = new server_client_1.FileClient(this.auth, config);
        return await client.downloadFile(file, path);
    }
    /**
     * Download the transcription of a call to the specified file path.
     *
     * @param {string} file - The name or transcription id of the recording file to download.
     * @param {string} path - The local file path where the transcription will be saved.
     * @return {Promise<void>} A promise that resolves when the transcription has been successfully downloaded.
     *
     * @example
     * ```ts
     * await voiceClient.downloadTranscription(TRANSCRIPTION_UUID, './transcription.txt');
     * ```
     */ async downloadTranscription(file, path) {
        const config = this.config;
        config.responseType = vetch_1.ResponseTypes.text;
        const client = new server_client_1.FileClient(this.auth, config);
        return await client.downloadFile(file, path);
    }
    /**
     * Send a call action to a specific call identified by its UUID.
     *
     * @param {string} uuid - The UUID of the call to which the action should be applied.
     * @param {string} action - The action to perform on the call (e.g., 'hangup', 'mute', 'unmute').
     * @param {NCCODestination} [destination] - The destination details for transfer actions.
     * @return {Promise<void>} A promise that resolves when the call action has been successfully executed.
     *
     * @example
     * ```ts
     * await voiceClient.callAction(CALL_UUID, 'mute');
     * ```
     */ async callAction(uuid, action, destination) {
        await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, {
            action: action,
            ...destination ? {
                destination: destination
            } : {}
        });
    }
}
exports.Voice = Voice; //# sourceMappingURL=voice.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/OutboundCall.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OutboundCall = void 0;
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-rsc] (ecmascript)"));
(0, debug_1.default)('@vonage/voice')('This class is deprecated. Please update to use the CommonOutboundCall type');
/* istanbul ignore next */ /**
 * Represents an outbound call.
 *
 * @deprecated This class is deprecated. Please update to use the CommonOutboundCall type
 */ class OutboundCall {
    /**
     * The list of call endpoints to which the outbound call will be made.
     */ to;
    /**
     * The phone endpoint object representing the caller's information.
     */ from;
    /**
     * Indicates whether to use a random from number (optional).
     */ randomFromNumber;
    /**
     * The list of event URLs (optional).
     */ eventUrl;
    /**
     * The HTTP method to use for event notifications (optional).
     */ eventMethod;
    /**
     * The machine detection behavior (optional).
     */ machineDetection;
    /**
     * The length timer for the call (optional).
     */ lengthTimer;
    /**
     * The ringing timer for the call (optional).
     */ ringingTimer;
    /**
     * Creates a new outbound call.
     *
     * @param {CallEndpoint} to - The call endpoint to which the outbound call will be made.
     * @param {PhoneEndpointObject} [from] - The phone endpoint object representing the caller's information.
     */ constructor(to, from){
        this.to = [
            to
        ];
        this.from = from;
    }
}
exports.OutboundCall = OutboundCall; //# sourceMappingURL=OutboundCall.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/OutboundCallWithNCCO.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OutboundCallWithNCCO = void 0;
const OutboundCall_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/OutboundCall.js [app-rsc] (ecmascript)");
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-rsc] (ecmascript)"));
(0, debug_1.default)('@vonage/voice')('This class is deprecated. Please update to use the CallWithNCCO type');
/* istanbul ignore next */ /**
 * Represents an outbound call with NCCO (Nexmo Call Control Object).
 *
 * @deprecated This class is deprecated. Please update to use the CallWithNCCO type
 */ class OutboundCallWithNCCO extends OutboundCall_1.OutboundCall {
    /**
     * The list of NCCO actions.
     */ ncco;
    /**
     * Creates a new outbound call with NCCO.
     *
     * @param {Array<NCCOAction>} ncco - The NCCO actions for the call.
     * @param {CallEndpoint} to - The call endpoint to which the outbound call will be made.
     * @param {PhoneEndpointObject} [from] - The phone endpoint object representing the caller's information.
     */ constructor(ncco, to, from){
        super(to, from);
        this.ncco = ncco;
    }
}
exports.OutboundCallWithNCCO = OutboundCallWithNCCO; //# sourceMappingURL=OutboundCallWithNCCO.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/OutboundCallWithAnswerURL.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OutboundCallWithAnswerURL = void 0;
const OutboundCall_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/OutboundCall.js [app-rsc] (ecmascript)");
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-rsc] (ecmascript)"));
(0, debug_1.default)('@vonage/voice')('This class is deprecated. Please update to use the CallWithAnswerURL type');
/* istanbul ignore next */ /**
 * Represents an outbound call with an answer URL.
 *
 * @deprecated This class is deprecated. Please update to use the CallWithAnswerURL type
 */ class OutboundCallWithAnswerURL extends OutboundCall_1.OutboundCall {
    /**
     * The list of answer URLs.
     */ /* tslint:disable-next-line */ answer_url;
    /**
     * The list of answer URLs.
     *
     * @deprecated Use `answer_url` instead.
     */ answerUrl;
    /**
     * Creates a new outbound call with an answer URL.
     *
     * @param {string} answerUrl - The answer URL for the call.
     * @param {CallEndpoint} to - The call endpoint to which the outbound call will be made.
     * @param {PhoneEndpointObject} [from] - The phone endpoint object representing the caller's information.
     */ constructor(answerUrl, to, from){
        super(to, from);
        this.answer_url = [
            answerUrl
        ];
        this.answerUrl = [
            answerUrl
        ];
    }
}
exports.OutboundCallWithAnswerURL = OutboundCallWithAnswerURL; //# sourceMappingURL=OutboundCallWithAnswerURL.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Connect.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Connect = void 0;
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/index.js [app-rsc] (ecmascript)");
/**
 * Represents a Connect action in the Nexmo Call Control Object (NCCO) for making voice calls.
 */ class Connect {
    /**
     * The action type, which is always 'connect'.
     */ action = enums_1.NCCOActions.CONNECT;
    /**
     * An array of CallEndpoint objects representing the endpoints to connect to in the call.
     *
     * @param {CallEndpoint} endpoint - An array of CallEndpoint objects
     * representing the endpoints to connect to in the call.
     */ endpoint;
    /**
     * The caller's phone number to display as the caller ID.
     *
     * @param {string} from - The caller's phone number to display as the caller ID.
     */ from;
    /**
     * Set to true to use a random phone number as the caller ID from the list of
     * numbers assigned to the current application.
     *
     * @param {boolean} randomFromNumber - Set to true to use a random phone number as the caller ID.
     */ randomFromNumber;
    /**
     * The event type for call progress events sent to the specified event URL.
     *
     * @param {ConnectEventType} eventType - The event type for call progress events.
     */ eventType;
    /**
     * The time in seconds that Vonage waits for the call to be answered before timing out.
     *
     * @param {number} timeout - The timeout value in seconds.
     */ timeout;
    /**
     * The maximum number of concurrent calls that can be handled by your application.
     *
     * @param {number} limit - The maximum number of concurrent calls.
     */ limit;
    /**
     * Configure the behavior when Vonage detects that the call is answered by voicemail.
     *
     * @param {MachineDetection} machineDetection - The behavior when voicemail is detected.
     */ machineDetection;
    /**
     * An array of event URLs where call progress events are sent to. Multiple URLs can be specified.
     *
     * @param {string} eventUrl - An array of event URLs.
     */ eventUrl;
    /**
     * The HTTP method used to send event information to the event URL(s).
     *
     * @param {string} eventMethod - The HTTP method used for event callbacks.
     */ eventMethod;
    /**
     * The URL of a ringback tone to play to the caller while waiting for the call to be answered.
     *
     * @param {string} ringbackTone - The URL of the ringback tone audio file.
     */ ringbackTone;
    /**
     * Create a new Connect instance.
     *
     * @param {CallEndpoint} endpoint - An array of CallEndpoint objects representing the endpoints to connect to in the call.
     * @param {string} from - The caller's phone number to display as the caller ID.
     * @param {boolean} randomFromNumber - Set to true to use a random phone number as the caller ID.
     * @param {ConnectEventType} eventType - The event type for call progress events.
     * @param {number} timeout - The timeout value in seconds.
     * @param {number} limit - The maximum number of concurrent calls.
     * @param {MachineDetection} machineDetection - The behavior when voicemail is detected.
     * @param {string} eventUrl - An array of event URLs.
     * @param {string} eventMethod - The HTTP method used for event callbacks.
     * @param {string} ringbackTone - The URL of the ringback tone audio file.
     */ constructor(endpoint, from, randomFromNumber, eventType, timeout, limit, machineDetection, eventUrl, eventMethod, ringbackTone){
        this.endpoint = [
            endpoint
        ];
        if (from) {
            this.from = from;
        }
        if (randomFromNumber) {
            this.randomFromNumber = randomFromNumber;
        }
        if (eventType) {
            this.eventType = eventType;
        }
        if (timeout) {
            this.timeout = timeout;
        }
        if (limit) {
            this.limit = limit;
        }
        if (machineDetection) {
            this.machineDetection = machineDetection;
        }
        if (eventUrl) {
            this.eventUrl = [
                eventUrl
            ];
        }
        if (eventMethod) {
            this.eventMethod = eventMethod;
        }
        if (ringbackTone) {
            this.ringbackTone = ringbackTone;
        }
    }
    /**
     * Serialize the Connect action to a Nexmo Call Control Object (NCCO) format.
     *
     * @return {ConnectAction} - The serialized Connect action.
     */ serializeToNCCO() {
        const data = {
            action: enums_1.NCCOActions.CONNECT,
            endpoint: this.endpoint
        };
        if (this.from) {
            data.from = this.from;
        }
        if (this.randomFromNumber) {
            data.randomFromNumber = this.randomFromNumber;
        }
        if (this.eventType) {
            data.eventType = this.eventType;
        }
        if (this.timeout) {
            data.timeout = this.timeout;
        }
        if (this.limit) {
            data.limit = this.limit;
        }
        if (this.machineDetection) {
            data.machineDetection = this.machineDetection;
        }
        if (this.eventUrl) {
            data.eventUrl = this.eventUrl;
        }
        if (this.eventMethod) {
            data.eventMethod = this.eventMethod;
        }
        if (this.ringbackTone) {
            data.ringbackTone = this.ringbackTone;
        }
        return data;
    }
}
exports.Connect = Connect; //# sourceMappingURL=Connect.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Conversation.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Conversation = void 0;
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/index.js [app-rsc] (ecmascript)");
/**
 * Represents a Conversation action in the Nexmo Call Control Object (NCCO) for managing audio conferences.
 */ class Conversation {
    /**
     * The action type, which is always 'conversation'.
     */ action = enums_1.NCCOActions.CONVERSATION;
    /**
     * The name of the conversation.
     *
     * @param {string} name - The name of the conversation.
     */ name;
    /**
     * An array of URLs for music to be played while participants are on hold.
     *
     * @param {string[]} musicOnHoldUrl - An array of music on hold URLs.
     */ musicOnHoldUrl;
    /**
     * Set to true to start the conversation when a participant enters.
     *
     * @param {boolean} startOnEnter - Set to true to start the conversation on participant enter.
     */ startOnEnter;
    /**
     * Set to true to end the conversation when the last participant exits.
     *
     * @param {boolean} endOnExit - Set to true to end the conversation on last participant exit.
     */ endOnExit;
    /**
     * Set to true to record the conversation.
     *
     * @param {boolean} record - Set to true to record the conversation.
     */ record;
    /**
     * An array of participant IDs (e.g., phone numbers) who can speak in the conversation.
     *
     * @param {string[]} canSpeak - An array of participant IDs who can speak in the conversation.
     */ canSpeak;
    /**
     * An array of participant IDs (e.g., phone numbers) who can hear in the conversation.
     *
     * @param {string[]} canHear - An array of participant IDs who can hear in the conversation.
     */ canHear;
    /**
     * Set to true to mute all participants in the conversation.
     *
     * @param {boolean} mute - Set to true to mute all participants in the conversation.
     */ mute;
    /**
     * Create a new Conversation instance.
     *
     * @param {string} name - The name of the conversation.
     * @param {string} musicOnHoldUrl - An array of music on hold URLs.
     * @param {boolean} startOnEnter - Set to true to start the conversation on participant enter.
     * @param {boolean} endOnExit - Set to true to end the conversation on last participant exit.
     * @param {boolean} record - Set to true to record the conversation.
     * @param {string[]} canSpeak - An array of participant IDs who can speak in the conversation.
     * @param {string[]} canHear - An array of participant IDs who can hear in the conversation.
     * @param {boolean} mute - Set to true to mute all participants in the conversation.
     */ constructor(name, musicOnHoldUrl, startOnEnter, endOnExit, record, canSpeak, canHear, mute){
        this.name = name;
        if (musicOnHoldUrl) {
            this.musicOnHoldUrl = [
                musicOnHoldUrl
            ];
        }
        if (startOnEnter) {
            this.startOnEnter = startOnEnter;
        }
        if (endOnExit) {
            this.endOnExit = endOnExit;
        }
        if (record) {
            this.record = record;
        }
        if (canSpeak) {
            this.canSpeak = canSpeak;
        }
        if (canHear) {
            this.canHear = canHear;
        }
        if (mute) {
            this.mute = mute;
        }
    }
    /**
     * Serialize the Conversation action to a Nexmo Call Control Object (NCCO) format.
     *
     * @return {ConversationAction} - The serialized Conversation action.
     */ serializeToNCCO() {
        const data = {
            action: enums_1.NCCOActions.CONVERSATION,
            name: this.name
        };
        if (this.musicOnHoldUrl) {
            data.musicOnHoldUrl = this.musicOnHoldUrl;
        }
        if (this.startOnEnter) {
            data.startOnEnter = this.startOnEnter;
        }
        if (this.endOnExit) {
            data.endOnExit = this.endOnExit;
        }
        if (this.record) {
            data.record = this.record;
        }
        if (this.canSpeak) {
            data.canSpeak = this.canSpeak;
        }
        if (this.canHear) {
            data.canHear = this.canHear;
        }
        if (this.mute) {
            data.mute = this.mute;
        }
        return data;
    }
}
exports.Conversation = Conversation; //# sourceMappingURL=Conversation.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Input.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Input = void 0;
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/index.js [app-rsc] (ecmascript)");
/**
 * Represents an Input action in the Nexmo Call Control Object (NCCO) for gathering user input.
 */ class Input {
    /**
     * The action type, which is always 'input'.
     */ action = enums_1.NCCOActions.INPUT;
    /**
     * An array of input types ('dtmf' and/or 'speech').
     */ type = [];
    /**
     * DTMF input settings.
     */ dtmf;
    /**
     * Speech input settings.
     */ speech;
    /**
     * An array of URLs to send events to asynchronously.
     */ eventUrl = [];
    /**
     * The HTTP method used to send events (e.g., 'POST' or 'GET').
     */ eventMethod;
    /**
     * Input processing mode, currently only applicable to DTMF. Valid values are
     * synchronous (the default) and asynchronous. If set to asynchronous, all
     * DTMF settings must be left blank. In asynchronous mode, digits are sent one
     * at a time to the event webhook in real time. In the default synchronous
     * mode, this is controlled by the DTMF settings instead and the inputs are
     * sent in batch.
     */ mode;
    /**
     * Create a new Input instance.
     *
     * @param {DTMFSettings} dtmf - DTMF input settings.
     * @param {SpeechSettings} speech - Speech input settings.
     * @param {string} eventUrl - URL to send events to asynchronously.
     * @param {string} eventMethod - The HTTP method used to send events.
     */ constructor(dtmf, speech, eventUrl, eventMethod, mode){
        if (dtmf) {
            this.type.push('dtmf');
            this.dtmf = dtmf;
        }
        if (speech) {
            this.type.push('speech');
            this.speech = speech;
        }
        if (eventUrl) {
            this.eventUrl = [
                eventUrl
            ];
        }
        if (eventMethod) {
            this.eventMethod = eventMethod;
        }
        if (mode) {
            this.mode = mode;
        }
        if (this.type.length === 0) {
            throw new TypeError('Input action must have at least either DTMF or Speech settings');
        }
    }
    /**
     * Serialize the Input action to a Nexmo Call Control Object (NCCO) format.
     *
     * @return {InputAction} - The serialized Input action.
     */ serializeToNCCO() {
        const data = {
            action: enums_1.NCCOActions.INPUT,
            type: this.type
        };
        if (this.dtmf) {
            data.dtmf = this.dtmf;
        }
        if (this.speech) {
            data.speech = this.speech;
        }
        if (this.eventUrl) {
            data.eventUrl = this.eventUrl;
        }
        if (this.eventMethod) {
            data.eventMethod = this.eventMethod;
        }
        return data;
    }
}
exports.Input = Input; //# sourceMappingURL=Input.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/NCCOBuilder.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NCCOBuilder = void 0;
/**
 * A builder class for creating Nexmo Call Control Objects (NCCOs).
 */ class NCCOBuilder {
    actions = [];
    /**
     * Add an action to the NCCO builder.
     *
     * @param {Action} action - The action to add to the NCCO.
     * @return {NCCOBuilder} - The NCCO builder instance (for method chaining).
     */ addAction(action) {
        this.actions.push('serializeToNCCO' in action ? action.serializeToNCCO() : action);
        return this;
    }
    /**
     * Build the NCCO by serializing the added actions.
     *
     * @return {Array<Action | Serializable>} - The built NCCO, which is an array of actions.
     */ build() {
        return this.actions;
    }
}
exports.NCCOBuilder = NCCOBuilder; //# sourceMappingURL=NCCOBuilder.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Notify.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Notify = void 0;
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/index.js [app-rsc] (ecmascript)");
/**
 * Represents a Notify action in an NCCO.
 */ class Notify {
    action = enums_1.NCCOActions.NOTIFY;
    payload;
    eventUrl;
    eventMethod;
    /**
     * Creates a new Notify action.
     *
     * @param {Object} payload - The payload data to send with the notification.
     * @param {string} eventUrl - The URL where the notification events will be sent.
     * @param {string} [eventMethod] - The HTTP method for sending notification events (e.g., "POST").
     */ constructor(payload, eventUrl, eventMethod){
        this.payload = payload;
        this.eventUrl = [
            eventUrl
        ];
        if (eventMethod) {
            this.eventMethod = eventMethod;
        }
    }
    /**
     * Serialize the Notify action to an NCCO-compatible format.
     *
     * @return {NotifyAction} - The serialized Notify action.
     */ serializeToNCCO() {
        const data = {
            action: enums_1.NCCOActions.NOTIFY,
            payload: this.payload,
            eventUrl: this.eventUrl
        };
        if (this.eventMethod) {
            data.eventMethod = this.eventMethod;
        }
        return data;
    }
}
exports.Notify = Notify; //# sourceMappingURL=Notify.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Record.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Record = void 0;
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/index.js [app-rsc] (ecmascript)");
/**
 * Represents a Record action in an NCCO.
 */ class Record {
    /**
     * The action type for the Record action.
     */ action = enums_1.NCCOActions.RECORD;
    /**
     * The recording format (e.g., "mp3", "wav").
     */ format;
    /**
     * The split type for recording (always "conversation").
     */ wrappedSplit;
    /**
     * The number of audio channels (1 to 32).
     */ wrappedChannels;
    /**
     * The duration of silence (in seconds) to end the recording (3 to 10 seconds).
     */ wrappedEndOnSilence;
    /**
     * The DTMF key that ends the recording (e.g., "0", "*", "#").
     */ wrappedEndOnKey;
    /**
     * The maximum recording duration in seconds (3 to 7200 seconds).
     */ wrappedTimeOut;
    /**
     * Whether to play a beep before recording starts.
     */ beepStart;
    /**
     * The URL where recording events will be sent.
     */ eventUrl;
    /**
     * The HTTP method for sending recording events (e.g., "POST").
     */ eventMethod;
    /**
     * Creates a new Record action.
     *
     * @param {RecordingFormat} format - The recording format (e.g., "mp3", "wav").
     * @param {string} split - The split type for recording (should be "conversation").
     * @param {number} channels - The number of audio channels (1 to 32).
     * @param {number} endOnSilence - The duration of silence (in seconds) to end the recording (3 to 10 seconds).
     * @param {string} endOnKey - The DTMF key that ends the recording (e.g., "0", "*", "#").
     * @param {number} timeout - The maximum recording duration in seconds (3 to 7200 seconds).
     * @param {boolean} beepStart - Whether to play a beep before recording starts.
     * @param {string} eventUrl - The URL where recording events will be sent.
     * @param {string} eventMethod - The HTTP method for sending recording events (e.g., "POST").
     */ constructor(format, split, channels, endOnSilence, endOnKey, timeout, beepStart, eventUrl, eventMethod){
        if (format) {
            this.format = format;
        }
        if (split) {
            this.split = split;
        }
        if (channels) {
            this.channels = channels;
        }
        if (endOnSilence) {
            this.endOnSilence = endOnSilence;
        }
        if (endOnKey) {
            this.endOnKey = endOnKey;
        }
        if (timeout) {
            this.timeout = timeout;
        }
        if (beepStart) {
            this.beepStart = beepStart;
        }
        if (eventUrl) {
            this.eventUrl = [
                eventUrl
            ];
        }
        if (eventMethod) {
            this.eventMethod = eventMethod;
        }
    }
    /**
     * Getter for the number of audio channels.
     *
     * @return {number | undefined} - The current number of audio channels.
     */ get channels() {
        return this.wrappedChannels;
    }
    /**
     * Setter for the number of audio channels.
     *
     * @param {number} channels - The number of audio channels (1 to 32).
     * @throws {Error} - If the channel value is invalid or split is not set to "conversation."
     */ set channels(channels) {
        if (channels < 1 || channels > 32) {
            throw new Error('Channels must be between 1 and 32, inclusive');
        }
        if (this.wrappedSplit !== 'conversation') {
            throw new Error('Channels must have split set to \'conversation\' before changing channel numbers');
        }
        this.wrappedChannels = channels;
    }
    /**
     * Getter for the character that signals the end of recording.
     *
     * @return {string | undefined} - The character that signals the end of recording.
     */ get endOnKey() {
        return this.wrappedEndOnKey;
    }
    /**
     * Setter for the DTMF key that ends the recording.
     *
     * @param {string} character - The DTMF key that ends the recording (e.g., "0", "*", "#").
     * @throws {Error} - If the character is not a valid DTMF key.
     */ set endOnKey(character) {
        const re = /^[0-9*#]$/;
        if (!re.test(character)) {
            throw new Error('Valid characters are 0-9, *, and # only');
        }
        this.wrappedEndOnKey = character;
    }
    /**
     * Getter for the duration of silence (in seconds) that signals the end of recording.
     *
     * @return {number | undefined} - The duration of silence (in seconds) that signals the end of recording.
     */ get endOnSilence() {
        return this.wrappedEndOnSilence;
    }
    /**
     * Setter for the duration of silence to end the recording.
     *
     * @param {number} numSeconds - The duration of silence in seconds (3 to 10 seconds).
     * @throws {Error} - If the duration value is out of the valid range.
     */ set endOnSilence(numSeconds) {
        if (numSeconds < 3 || numSeconds > 10) {
            throw new Error('End on Silence must be between 3 and 10 seconds, inclusive');
        }
        this.wrappedEndOnSilence = numSeconds;
    }
    /**
     * Getter for the recording split type.
     *
     * @return {string} - The recording split type, which is always 'conversation'.
     */ get split() {
        return 'conversation';
    }
    /**
     * Setter for the recording split type.
     *
     * @param {string} splitType - The recording split type. Must be set to 'conversation'.
     * @throws {Error} - Throws an error if the splitType is not 'conversation'.
     */ set split(splitType) {
        if (splitType !== 'conversation') {
            throw new Error('Recording can only be split to \'conversation\'');
        }
        this.wrappedSplit = splitType;
    }
    /**
     * Getter for the recording timeout duration in seconds.
     *
     * @return {number | undefined } - The recording timeout duration in seconds.
     */ get timeout() {
        return this.wrappedTimeOut;
    }
    /**
     * Setter for the recording timeout.
     *
     * @param {number} seconds - The maximum recording duration in seconds (3 to 7200 seconds).
     * @throws {Error} - If the timeout value is out of the valid range.
     */ set timeout(seconds) {
        if (seconds < 3 || seconds > 7200) {
            throw new Error('Recording timeout must be between 3 and 7200 seconds, inclusive');
        }
        this.wrappedTimeOut = seconds;
    }
    /**
     * Serializes the Record action to NCCO format.
     *
     * @return {RecordAction} - The serialized Record action.
     */ serializeToNCCO() {
        const data = {
            action: enums_1.NCCOActions.RECORD
        };
        if (this.format) {
            data.format = this.format;
        }
        if (this.wrappedSplit) {
            data.split = this.split;
        }
        if (this.wrappedChannels) {
            data.channels = this.wrappedChannels;
        }
        if (this.wrappedEndOnKey) {
            data.endOnKey = this.endOnKey;
        }
        if (this.wrappedEndOnSilence) {
            data.endOnSilence = this.endOnSilence;
        }
        if (this.wrappedTimeOut) {
            data.timeOut = this.wrappedTimeOut;
        }
        if (this.beepStart) {
            data.beepStart = this.beepStart;
        }
        if (this.eventUrl) {
            data.eventUrl = this.eventUrl;
        }
        if (this.eventMethod) {
            data.eventMethod = this.eventMethod;
        }
        return data;
    }
}
exports.Record = Record; //# sourceMappingURL=Record.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Stream.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Stream = void 0;
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/index.js [app-rsc] (ecmascript)");
/**
 * Represents a Stream action in a Nexmo Call Control Object (NCCO).
 *
 * This action allows streaming audio into the call.
 */ class Stream {
    /**
     * The action type for this NCCO action.
     */ action = enums_1.NCCOActions.STREAM;
    /**
     * An array of stream URLs to play audio from.
     */ streamUrl;
    /**
     * The audio level at which to play the stream (optional).
     */ level;
    /**
     * Indicates whether the stream should allow barge-in (optional).
     */ bargeIn;
    /**
     * The number of times to loop the audio (optional).
     */ loop;
    /**
     * Creates a new Stream action.
     *
     * @param {string} streamUrl - The URL of the audio stream.
     * @param {number} [level] - The audio level at which to play the stream (optional).
     * @param {boolean} [bargeIn] - Indicates whether the stream should allow barge-in (optional).
     * @param {number} [loop] - The number of times to loop the audio (optional).
     */ constructor(streamUrl, level, bargeIn, loop){
        this.streamUrl = [
            streamUrl
        ];
        if (level) {
            this.level = level;
        }
        if (bargeIn) {
            this.bargeIn = bargeIn;
        }
        if (loop) {
            this.loop = loop;
        }
    }
    /**
     * Serializes the Stream action to a Nexmo Call Control Object (NCCO).
     *
     * @return {StreamAction} - The serialized Stream action.
     */ serializeToNCCO() {
        const data = {
            action: enums_1.NCCOActions.STREAM,
            streamUrl: this.streamUrl
        };
        if (this.level) {
            data.level = this.level;
        }
        if (this.bargeIn) {
            data.bargeIn = this.bargeIn;
        }
        if (this.loop) {
            data.loop = this.loop;
        }
        return data;
    }
}
exports.Stream = Stream; //# sourceMappingURL=Stream.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Talk.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Talk = void 0;
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/index.js [app-rsc] (ecmascript)");
/**
 * Represents a Talk action in a Nexmo Call Control Object (NCCO).
 *
 * This action allows the text-to-speech (TTS) synthesis of spoken words in the call.
 */ class Talk {
    /**
     * The action type for this NCCO action.
     */ action = enums_1.NCCOActions.TALK;
    /**
     * The text to be spoken during the call.
     */ text;
    /**
     * Indicates whether the talk action allows barge-in (optional).
     */ bargeIn;
    /**
     * The number of times to loop the speech (optional).
     */ loop;
    /**
     * The audio level at which to play the speech (optional).
     */ level;
    /**
     * The language for the text-to-speech synthesis (optional).
     */ language;
    /**
     * The speech style (optional).
     */ style;
    /**
     * Indicates whether to use premium text-to-speech (optional).
     */ premium;
    /**
     * Creates a new Talk action.
     *
     * @param {string} text - The text to be spoken during the call.
     * @param {boolean} [bargeIn] - Indicates whether the talk action allows barge-in (optional).
     * @param {number} [loop] - The number of times to loop the speech (optional).
     * @param {string} [level] - The audio level at which to play the speech (optional).
     * @param {TTSLanguages | string} [language] - The language for the text-to-speech synthesis (optional).
     * @param {string} [style] - The speech style (optional).
     * @param {boolean} [premium] - Indicates whether to use premium text-to-speech (optional).
     */ constructor(text, bargeIn, loop, level, language, style, premium){
        this.text = text;
        if (bargeIn) {
            this.bargeIn = bargeIn;
        }
        if (loop) {
            this.loop = loop;
        }
        if (level) {
            this.level = level;
        }
        if (language) {
            this.language = language;
        }
        if (style) {
            this.style = style;
        }
        if (premium) {
            this.premium = premium;
        }
    }
    /**
     * Serializes the Talk action to a Nexmo Call Control Object (NCCO).
     *
     * @return {TalkAction} - The serialized Talk action.
     */ serializeToNCCO() {
        const data = {
            action: enums_1.NCCOActions.TALK,
            text: this.text
        };
        if (this.loop) {
            data.loop = this.loop;
        }
        if (this.bargeIn) {
            data.bargeIn = this.bargeIn;
        }
        if (this.level) {
            data.level = this.level;
        }
        if (this.language) {
            data.language = this.language;
        }
        if (this.style) {
            data.style = this.style;
        }
        if (this.premium) {
            data.premium = this.premium;
        }
        return data;
    }
}
exports.Talk = Talk; //# sourceMappingURL=Talk.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/ncco.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Talk = exports.Stream = exports.Record = exports.Notify = exports.NCCOBuilder = exports.Input = exports.Conversation = exports.Connect = void 0;
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-rsc] (ecmascript)"));
(0, debug_1.default)('@vonage/voice')('This file is deprecated please update to use the core package');
var Connect_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Connect.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Connect", {
    enumerable: true,
    get: function() {
        return Connect_1.Connect;
    }
});
var Conversation_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Conversation.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Conversation", {
    enumerable: true,
    get: function() {
        return Conversation_1.Conversation;
    }
});
var Input_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Input.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Input", {
    enumerable: true,
    get: function() {
        return Input_1.Input;
    }
});
var NCCOBuilder_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/NCCOBuilder.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "NCCOBuilder", {
    enumerable: true,
    get: function() {
        return NCCOBuilder_1.NCCOBuilder;
    }
});
var Notify_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Notify.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Notify", {
    enumerable: true,
    get: function() {
        return Notify_1.Notify;
    }
});
var Record_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Record.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Record", {
    enumerable: true,
    get: function() {
        return Record_1.Record;
    }
});
var Stream_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Stream.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Stream", {
    enumerable: true,
    get: function() {
        return Stream_1.Stream;
    }
});
var Talk_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/NCCO/Talk.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Talk", {
    enumerable: true,
    get: function() {
        return Talk_1.Talk;
    }
}); //# sourceMappingURL=ncco.js.map
}}),
"[project]/node_modules/@vonage/voice/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Talk = exports.Stream = exports.Record = exports.Notify = exports.NCCOBuilder = exports.Input = exports.Conversation = exports.Connect = exports.OutboundCallWithAnswerURL = exports.OutboundCallWithNCCO = void 0;
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/voice.js [app-rsc] (ecmascript)"), exports);
var OutboundCallWithNCCO_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/OutboundCallWithNCCO.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "OutboundCallWithNCCO", {
    enumerable: true,
    get: function() {
        return OutboundCallWithNCCO_1.OutboundCallWithNCCO;
    }
});
var OutboundCallWithAnswerURL_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/classes/OutboundCallWithAnswerURL.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "OutboundCallWithAnswerURL", {
    enumerable: true,
    get: function() {
        return OutboundCallWithAnswerURL_1.OutboundCallWithAnswerURL;
    }
});
var ncco_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/ncco.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Connect", {
    enumerable: true,
    get: function() {
        return ncco_1.Connect;
    }
});
Object.defineProperty(exports, "Conversation", {
    enumerable: true,
    get: function() {
        return ncco_1.Conversation;
    }
});
Object.defineProperty(exports, "Input", {
    enumerable: true,
    get: function() {
        return ncco_1.Input;
    }
});
Object.defineProperty(exports, "NCCOBuilder", {
    enumerable: true,
    get: function() {
        return ncco_1.NCCOBuilder;
    }
});
Object.defineProperty(exports, "Notify", {
    enumerable: true,
    get: function() {
        return ncco_1.Notify;
    }
});
Object.defineProperty(exports, "Record", {
    enumerable: true,
    get: function() {
        return ncco_1.Record;
    }
});
Object.defineProperty(exports, "Stream", {
    enumerable: true,
    get: function() {
        return ncco_1.Stream;
    }
});
Object.defineProperty(exports, "Talk", {
    enumerable: true,
    get: function() {
        return ncco_1.Talk;
    }
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/enums/ArchiveOutputMode.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ArchiveOutputMode = void 0;
/**
 * Enum representing different output modes for video archives.
 */ var ArchiveOutputMode;
(function(ArchiveOutputMode) {
    /**
     * Represents the composed output mode where all streams are mixed into one.
     */ ArchiveOutputMode["COMPOSED"] = "composed";
    /**
     * Represents the individual output mode where each stream is recorded separately.
     */ ArchiveOutputMode["INDIVIDUAL"] = "individual";
})(ArchiveOutputMode || (exports.ArchiveOutputMode = ArchiveOutputMode = {})); //# sourceMappingURL=ArchiveOutputMode.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/enums/AudioRate.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AudioRate = void 0;
/**
 * Enum representing different audio sample rates.
 */ var AudioRate;
(function(AudioRate) {
    /**
     * Represents an audio sample rate of 16 kHz.
     */ AudioRate[AudioRate["16KHZ"] = 16000] = "16KHZ";
    /**
     * Represents an audio sample rate of 8 kHz.
     */ AudioRate[AudioRate["8KHZ"] = 8000] = "8KHZ";
})(AudioRate || (exports.AudioRate = AudioRate = {})); //# sourceMappingURL=AudioRate.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/enums/CaptionStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CaptionStatus = void 0;
/**
 * Enum representing different captioning status.
 */ var CaptionStatus;
(function(CaptionStatus) {
    /**
     * Indicates that captioning has started.
     */ CaptionStatus["STARTED"] = "started";
    /**
     * Indicates that captioning has stopped.
     */ CaptionStatus["STOPPED"] = "stopped";
    /**
     * Indicates that captioning has been paused.
     */ CaptionStatus["PAUSED"] = "paused";
    /**
     * Indicates that captioning has failed.
     */ CaptionStatus["FAILED"] = "failed";
})(CaptionStatus || (exports.CaptionStatus = CaptionStatus = {})); //# sourceMappingURL=CaptionStatus.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/enums/ExperienceComposerResolution.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExperienceComposerResolution = void 0;
/**
 * Enum representing different resolutions for an experience composer.
 */ var ExperienceComposerResolution;
(function(ExperienceComposerResolution) {
    /**
     * Standard definition landscape resolution.
     */ ExperienceComposerResolution["SD_LANDSCAPE"] = "640x480";
    /**
     * Standard definition portrait resolution.
     */ ExperienceComposerResolution["SD_PORTRAIT"] = "480x640";
    /**
     * High definition landscape resolution.
     */ ExperienceComposerResolution["HD_LANDSCAPE"] = "1280x720";
    /**
     * High definition portrait resolution.
     */ ExperienceComposerResolution["HD_PORTRAIT"] = "720x1280";
})(ExperienceComposerResolution || (exports.ExperienceComposerResolution = ExperienceComposerResolution = {})); //# sourceMappingURL=ExperienceComposerResolution.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/enums/LayoutType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LayoutType = void 0;
/**
 * Enum representing different layout types for live streaming broadcasts.
 */ var LayoutType;
(function(LayoutType) {
    /**
     * Automatically determine the best fit layout.
     */ LayoutType["BEST_FIT"] = "bestFit";
    /**
     * Use a custom layout for the broadcast.
     */ LayoutType["CUSTOM"] = "custom";
    /**
     * Horizontal presentation layout.
     */ LayoutType["HORIZONTAL_PRESENTATION"] = "horizontalPresentation";
    /**
     * Picture-in-picture (PIP) layout.
     */ LayoutType["PIP"] = "pip";
    /**
     * Vertical presentation layout.
     */ LayoutType["VERTICAL_PRESENTATION"] = "verticalPresentation";
})(LayoutType || (exports.LayoutType = LayoutType = {})); //# sourceMappingURL=LayoutType.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/enums/Resolution.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Resolution = void 0;
/**
 * Enum representing different video resolutions for live streaming broadcasts.
 */ var Resolution;
(function(Resolution) {
    /**
     * Full HD landscape resolution (1920x1080 pixels).
     */ Resolution["FHD_LANDSCAPE"] = "1920x1080";
    /**
     * Full HD portrait resolution (1080x1920 pixels).
     */ Resolution["FHD_PORTRAIT"] = "1080x1920";
    /**
     * HD landscape resolution (1280x720 pixels).
     */ Resolution["HD_LANDSCAPE"] = "1280x720";
    /**
     * HD portrait resolution (720x1280 pixels).
     */ Resolution["HD_PORTRAIT"] = "720x1280";
    /**
     * Standard definition landscape resolution (640x480 pixels).
     */ Resolution["SD_LANDSCAPE"] = "640x480";
    /**
     * Standard definition portrait resolution (480x640 pixels).
     */ Resolution["SD_PORTRAIT"] = "480x640";
})(Resolution || (exports.Resolution = Resolution = {})); //# sourceMappingURL=Resolution.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/enums/StreamMode.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StreamMode = void 0;
/**
 * Enum representing different stream modes for live streaming broadcasts.
 */ var StreamMode;
(function(StreamMode) {
    /**
     * Streams are selected automatically based on session rules.
     */ StreamMode["AUTO"] = "auto";
    /**
     * Streams are manually selected for inclusion in the broadcast.
     */ StreamMode["MANUAL"] = "manual";
})(StreamMode || (exports.StreamMode = StreamMode = {})); //# sourceMappingURL=StreamMode.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/enums/MediaMode.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MediaMode = void 0;
/**
 * Enum representing media modes for a session.
 */ var MediaMode;
(function(MediaMode) {
    /**
     * Routed mode where media is disabled.
     */ MediaMode["ROUTED"] = "disabled";
    /**
     * Relayed mode where media is enabled.
     */ MediaMode["RELAYED"] = "enabled";
})(MediaMode || (exports.MediaMode = MediaMode = {})); //# sourceMappingURL=MediaMode.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/enums/ArchiveOutputMode.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/enums/AudioRate.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/enums/CaptionStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/enums/ExperienceComposerResolution.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/enums/LayoutType.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/enums/Resolution.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/enums/StreamMode.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/enums/MediaMode.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/ArchiveLayout.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ArchiveLayout.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/ArchiveMode.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ArchiveMode = void 0;
/**
 * Enum representing different archive modes.
 */ var ArchiveMode;
(function(ArchiveMode) {
    /**
     * Archive mode set to 'manual', where archives are started and stopped manually.
     */ ArchiveMode["MANUAL"] = "manual";
    /**
     * Archive mode set to 'always', where archives are continuously recorded.
     */ ArchiveMode["ALWAYS"] = "always";
})(ArchiveMode || (exports.ArchiveMode = ArchiveMode = {})); //# sourceMappingURL=ArchiveMode.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/ArchiveOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ArchiveOptions.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/ArchiveSearchFilter.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ArchiveSearchFilter.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/BroadcastConfig.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=BroadcastConfig.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/BroadcastSearchFilter.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=BroadcastSearchFilter.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/BroadcastUpdateConfig.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=BroadcastUpdateConfig.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/CaptionOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CaptionOptions.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/ClientTokenClaims.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ClientTokenClaims.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/ClientTokenOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ClientTokenOptions.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/ExperienceComposerListFilter.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ExperienceComposerListFilter.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/ExperienceComposerOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ExperienceComposerOptions.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/BroadcastDetailsResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=BroadcastDetailsResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/CaptionStatusResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CaptionStatusResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/CreateSessionResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=CreateSessionResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/EnableCaptionResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=EnableCaptionResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/ExperienceComposerResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ExperienceComposerResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/MultiArchiveResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=MultiArchiveResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/MultiBroadcastResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=MultiBroadcastResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/MultiExperienceComposerResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=MultiExperienceComposerResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/MultiStreamLayoutResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=MultiStreamLayoutResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/ProjectDetailsResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=ProjectDetailsResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/SingleArchiveResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SingleArchiveResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/SingleStreamLayoutResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SingleStreamLayoutResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/SIPCallResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SIPCallResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/WebSocketConnectResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=WebSocketConnectResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Response/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/BroadcastDetailsResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/CaptionStatusResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/CreateSessionResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/EnableCaptionResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/ExperienceComposerResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/MultiArchiveResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/MultiBroadcastResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/MultiExperienceComposerResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/MultiStreamLayoutResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/ProjectDetailsResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/SingleArchiveResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/SingleStreamLayoutResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/SIPCallResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/WebSocketConnectResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Request/InitiateSIPCallRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=InitiateSIPCallRequest.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/RTMPStream.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=RTMPStream.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Session.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=Session.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/Singal.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=Singal.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/SIPCallOptions.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=SIPCallOptions.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/StreamClassList.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=StreamClassList.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/VideoResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VideoResponse.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/WebSocketConfig.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=WebSocketConfig.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/ArchiveLayout.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/ArchiveMode.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/ArchiveOptions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/ArchiveSearchFilter.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/BroadcastConfig.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/BroadcastSearchFilter.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/BroadcastUpdateConfig.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/CaptionOptions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/ClientTokenClaims.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/ClientTokenOptions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/ExperienceComposerListFilter.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/ExperienceComposerOptions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Response/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Request/InitiateSIPCallRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/RTMPStream.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Session.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/Singal.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/SIPCallOptions.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/StreamClassList.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/VideoResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/WebSocketConfig.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/parameters/VideoClassParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=VideoClassParameters.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/parameters/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/parameters/VideoClassParameters.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/video.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Video = void 0;
const jwt_1 = __turbopack_context__.r("[project]/node_modules/@vonage/jwt/dist/lib/index.js [app-rsc] (ecmascript)");
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
const enums_1 = __turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/enums/index.js [app-rsc] (ecmascript)");
const types_1 = __turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/index.js [app-rsc] (ecmascript)");
/**
 * Video Client for managing and interacting with video-related operations in your application.
 * This client allows you to control sessions, streams, archives, broadcasts, and various video-related features.
 *
 * Usage:
 * - Create and manage video sessions with customizable settings.
 * - Control video streams, including muting, adding, and removing streams.
 * - Initiate SIP calls and establish WebSockets for real-time communication.
 * - Enable and disable captions for improved accessibility.
 * - Start, stop, and manage video archives and broadcasts.
 * - Render experiences and access detailed information about streams and archives.
 * - Generate client tokens for secure session connections.
 * - Perform various video-related operations with ease.
 *
 * @remarks
 * The Video Client is designed to simplify video management tasks within your application.
 * It provides a comprehensive set of methods and options to configure and control video interactions seamlessly.
 *
 * @example
 * Create a standalone Video client
 *
 * ```ts
 * import { Video } from '@vonage/video';
 *
 * const videoClient = new Video({
 *  apiKey: VONAGE_API_KEY,
 *  apiSecret: VONAGE_API_SECRET
 * });
 * ```
 *
 * @example
 * Create an Video client from the Vonage client
 *
 * ```ts
 * import { Vonage } from '@vonage/server-client';
 *
 * const vonage = new Vonage({
 *   apiKey: VONAGE_API_KEY,
 *   apiSecret: VONAGE_API_SECRET
 * });
 *
 * const videoClient = vonage.video;
 * ```
 */ class Video extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.JWT;
    /**
     * Adds a stream to an existing archive, allowing you to include additional streams in the archive recording.
     *
     * @param {string} archiveId - The ID of the archive to which you want to add a stream.
     * @param {string} streamId - The ID of the stream you want to add to the archive.
     * @param {boolean} [audio=true] - Whether to include audio from the added stream (default: true).
     * @param {boolean} [video=true] - Whether to include video from the added stream (default: true).
     * @return {Promise<void>} A promise that resolves when the stream has been successfully added to the archive.
     * @throws {Error} If an error occurs while adding the stream to the archive.
     *
     * @example
     * ```ts
     * await videoClient.addArchiveStream(ARCHIVE_ID, STREAM_ID);
     * ```
     */ async addArchiveStream(archiveId, streamId, audio = true, video = true) {
        const data = {
            addStream: streamId,
            hasAudio: audio,
            hasVideo: video
        };
        await this.sendPatchRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/archive/${archiveId}/streams`, data);
    }
    /**
     * Adds a stream to an existing broadcast, allowing you to include additional streams in the live broadcast.
     *
     * @param {string} broadcastId - The ID of the broadcast to which you want to add a stream.
     * @param {string} streamId - The ID of the stream you want to add to the broadcast.
     * @return {Promise<void>} A promise that resolves when the stream has been successfully added to the broadcast.
     * @throws {Error} If an error occurs while adding the stream to the broadcast.
     *
     * @example
     * ```ts
     * await videoClient.addStreamToBroadcast(BROADCAST_ID, STREAM_ID);
     * ```
     */ async addStreamToBroadcast(broadcastId, streamId) {
        await this.updateBroadcast({
            broadcastId,
            addStream: streamId
        });
    }
    /**
     * Connects to a WebSocket for a specified session using the provided client token and WebSocket configuration.
     *
     * @param {string} sessionId - The ID of the session to which you want to connect via WebSocket.
     * @param {string} clientToken - The client token generated for authentication.
     * @param {WebSocketConfig} config - The WebSocket configuration specifying the URI and optional parameters.
     * @return {Promise<WebSocketConnectResponse>} A promise that resolves with WebSocket connection details upon successful connection.
     * @throws {Error} If an error occurs during the WebSocket connection process.
     *
     * @example
     * ```ts
     * const result = await videoClient.connectToWebsocket(
     *   SESSION_ID,
     *   CLIENT_TOKEN,
     *   {
     *     uri: 'wss://example.com',
     *   },
     * )
     *
     * console.log(result.id);
     * ```
     */ async connectToWebsocket(sessionId, clientToken, config) {
        const data = {
            sessionId,
            token: clientToken,
            websocket: config
        };
        const resp = await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/connect`, data);
        return resp.data;
    }
    /**
     * Creates a new session with the specified options.
     *
     * @param {Object} [sessionOptions] - Optional session configuration options.
     * @param {ArchiveMode} [sessionOptions.archiveMode=ArchiveMode.MANUAL] - The archive mode for the session.
     * @param {MediaMode} [sessionOptions.mediaMode=MediaMode.ROUTED] - The media mode for the session.
     * @param {string} [sessionOptions.location] - The location for the session.
     * @return {Promise<Session>} A promise that resolves with details of the newly created session.
     * @throws {Error} If an error occurs during the session creation process.
     *
     * @example
     * Create a session with default options
     * ```ts
     * const session = await videoClient.createSession({});
     * console.log(session.sessionId);
     * ```
     *
     * @example
     * Create a session with archive mode set to manual
     * ```ts
     * import { ArchiveMode } from '@vonage/video';
     *
     * const session = await videoClient.createSession({
     *   archiveMode: ArchiveMode.MANUAL,
     * });
     * console.log(session.sessionId);
     * ```
     *
     * @example
     * Create a session with location set to a specific region
     * ```ts
     * const session = await videoClient.createSession({
     *   location: 'eu',
     * });
     * console.log(session.sessionId);
     * ```
     *
     * @example
     * Create a session with media mode set to routed
     * ```ts
     * import { MediaMode } from '@vonage/video';
     *
     * const session = await videoClient.createSession({
     *   mediaMode: MediaMode.ROUTED,
     * });
     * console.log(session.sessionId);
     * ```
     */ async createSession(sessionOptions) {
        const data = {
            archiveMode: sessionOptions?.archiveMode ?? types_1.ArchiveMode.MANUAL,
            'p2p.preference': sessionOptions?.mediaMode ?? enums_1.MediaMode.ROUTED,
            location: sessionOptions?.location ?? null
        };
        const resp = await this.sendFormSubmitRequest(`${this.config.videoHost}/session/create`, data);
        return {
            sessionId: resp.data[0].session_id,
            archiveMode: data.archiveMode,
            mediaMode: data['p2p.preference'],
            location: data.location
        };
    }
    /**
     * Deletes an archive with the specified archive ID.
     *
     * @param {string} archiveId - The ID of the archive to delete.
     * @return {Promise<void>} A promise that resolves when the archive is successfully deleted.
     * @throws {Error} If an error occurs while deleting the archive or if the archive with the given ID does not exist.
     *
     * @example
     * ```ts
     * await videoClient.deleteArchive(ARCHIVE_ID);
     * ```
     */ async deleteArchive(archiveId) {
        await this.sendDeleteRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/archive/${archiveId}`);
    }
    /**
     * Disables captions for a specific caption ID.
     *
     * @param {string} captionId - The ID of the caption to disable.
     * @return {Promise<void>} A promise that resolves when the captions are successfully disabled.
     * @throws {Error} If an error occurs while disabling captions or if the caption with the given ID does not exist.
     *
     * @example
     * ```ts
     * await videoClient.disableCaptions(CAPTION_ID);
     * ```
     */ async disableCaptions(captionId) {
        await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/captions/${captionId}/stop`);
    }
    /**
     * Disables force mute for a session, allowing audio for all streams.
     *
     * @param {string} sessionId - The ID of the session for which to disable force mute.
     * @param {string[]} excludedStreamIds - An optional array of stream IDs to exclude from the force mute operation.
     * @return {Promise<void>} A promise that resolves when the force mute is successfully disabled for the session.
     * @throws {Error} If an error occurs while disabling force mute or if the session with the given ID does not exist.
     *
     * @example
     * ```ts
     * const forceMute = await videoClient.disableForceMute(SESSION_ID);
     * console.log(forceMute.status);
     * ```
     */ async disableForceMute(sessionId, excludedStreamIds = []) {
        return this.muteAllStreams(sessionId, false, excludedStreamIds);
    }
    /**
     * Disconnects a client from a session.
     *
     * @param {string} sessionId - The ID of the session from which to disconnect the client.
     * @param {string} connectionId - The ID of the client's connection to disconnect.
     * @return {Promise<void>} A promise that resolves when the client is successfully disconnected from the session.
     * @throws {Error} If an error occurs while disconnecting the client or if the session or connection with the given IDs do not exist.
     *
     * @example
     * ```ts
     * await videoClient.disconnectClient(SESSION_ID, CONNECTION_ID);
     * ```
     */ async disconnectClient(sessionId, connectionId) {
        await this.sendDeleteRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/session/${sessionId}/connection/${connectionId}`);
    }
    /**
     * Disconnects a WebSocket connection associated with a call or session.
     *
     * @param {string} callId - The ID of the call or session to which the WebSocket connection is associated.
     * @return {Promise<void>} A promise that resolves when the WebSocket connection is successfully disconnected.
     * @throws {Error} If an error occurs while disconnecting the WebSocket connection or if the call or session with the given ID does not exist.
     *
     * @example
     * ```ts
     * await videoClient.disconnectWebsocket(CALL_ID);
     * ```
     */ async disconnectWebsocket(callId) {
        await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/connect/${callId}/stop`);
    }
    /**
     * Enables captions for a session using the specified client token and caption options.
     *
     * @param {string} sessionId - The ID of the session to enable captions for.
     * @param {string} clientToken - The client token associated with the session, used for authentication.
     * @param {CaptionOptions} [captionOptions] - Optional caption options to configure caption behavior.
     * @return {Promise<EnableCaptionResponse>} A promise that resolves with an `EnableCaptionResponse` containing information about the enabled captions.
     * @throws {Error} If an error occurs while enabling captions or if the session with the given ID does not exist.
     *
     * @example
     * ```ts
     * const result = await videoClient.enableCaptions(SESSION_ID, CLIENT_TOKEN);
     * console.log(result.captionId);
     * ```
     */ async enableCaptions(sessionId, clientToken, captionOptions = {}) {
        const data = Object.assign({}, {
            sessionId,
            token: clientToken
        }, captionOptions);
        const resp = await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/captions`, data);
        return resp.data;
    }
    /**
     * Forces muting of all streams in a session, except those specified in the `excludedStreamIds` array.
     *
     * @param {string} sessionId - The ID of the session in which to force mute streams.
     * @param {string[]} [excludedStreamIds] - An optional array of stream IDs to exclude from muting.
     * @return {Promise<ProjectDetailsResponse>} A promise that resolves with a `ProjectDetailsResponse` containing updated session details after muting.
     * @throws {Error} If an error occurs while muting the streams or if the session with the given ID does not exist.
     *
     * @example
     * ```ts
     * const forceMute = await videoClient.forceMuteAll(SESSION_ID);
     * console.log(forceMute.status);
     * ```
     */ async forceMuteAll(sessionId, excludedStreamIds = []) {
        return this.muteAllStreams(sessionId, true, excludedStreamIds);
    }
    /**
     * Generates a client token for connecting to a session with the specified options.
     *
     * @param {string} sessionId - The ID of the session to generate the client token for.
     * @param {ClientTokenOptions} [tokenOptions] - Optional token options including role, data, and expiration time.
     * @return {string} A client token that can be used for authentication when connecting to a session.
     *
     * @example
     * ```ts
     * const token = videoClient.generateClientToken(SESSION_ID);
     * console.log(`The token is ${token}`);
     * ```
     */ generateClientToken(sessionId, tokenOptions) {
        const now = Math.round(new Date().getTime() / 1000);
        const claims = {
            scope: 'session.connect',
            session_id: sessionId,
            role: 'publisher',
            initial_layout_class_list: '',
            exp: tokenOptions?.expireTime || now + 86400,
            sub: 'video',
            acl: {
                paths: {
                    '/session/**': {}
                }
            }
        };
        if (tokenOptions?.role) {
            claims.role = tokenOptions.role;
        }
        if (tokenOptions?.data) {
            claims.connection_data = tokenOptions.data;
        }
        if (tokenOptions?.initialLayoutClassList) {
            claims.initial_layout_class_list = tokenOptions.initialLayoutClassList.join(' ');
        }
        return (0, jwt_1.tokenGenerate)(this.auth.applicationId, this.auth.privateKey, claims);
    }
    /**
     * Retrieves information about a specific archive by its ID.
     *
     * @param {string} archiveId - The ID of the archive to retrieve.
     * @return {Promise<SingleArchiveResponse>} A promise that resolves to the details of the requested archive.
     *
     * @example
     * ```ts
     * const archive = await videoClient.getArchive(ARCHIVE_ID);
     * console.log(archive.createdAt);
     * ```
     */ async getArchive(archiveId) {
        const resp = await this.sendGetRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/archive/${archiveId}`);
        return resp.data;
    }
    /**
     * Retrieves information about a specific broadcast by its ID.
     *
     * @param {string} broadcastId - The ID of the broadcast to retrieve.
     * @return {Promise<BroadcastDetailsResponse>} A promise that resolves to the details of the requested broadcast.
     *
     * ```ts
     * const broadcast = await videoClient.getBroadcast(BROADCAST_ID);
     * console.log(broadcast.createdAt);
     * ```
     */ async getBroadcast(broadcastId) {
        const resp = await this.sendGetRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/broadcast/${broadcastId}`);
        return resp.data;
    }
    /**
     * Retrieves the status of a caption by its ID.
     *
     * @param {string} captionId - The ID of the caption to retrieve the status for.
     * @return {Promise<CaptionStatusResponse>} A promise that resolves to the status of the requested caption.
     *
     * @example
     * ```ts
     * const captionStatus = await videoClient.getCaptionStatus(CAPTION_ID);
     * console.log(captionStatus.status);
     * ```
     */ async getCaptionStatus(captionId) {
        const resp = await this.sendGetRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/captions/${captionId}`);
        return resp.data;
    }
    /**
     * Retrieves the details of an Experience Composer render by its ID.
     *
     * @param {string} renderId - The ID of the Experience Composer render to retrieve.
     * @return {Promise<ExperienceComposerResponse>} A promise that resolves to the details of the requested Experience Composer render.
     *
     * @example
     * ```ts
     * const render = await videoClient.getExperienceComposerRender(RENDER_ID);
     * console.log(render.createdAt);
     * ```
     */ async getExperienceComposerRender(renderId) {
        const resp = await this.sendGetRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/render/${renderId}`);
        return resp.data;
    }
    /**
     * Retrieves information about one or more streams in a session.
     *
     * @param {string} sessionId - The ID of the session to retrieve stream information from.
     * @param {string | undefined} [streamId] - Optional. The ID of a specific stream to retrieve information for.
     * @return {Promise<MultiStreamLayoutResponse | SingleStreamLayoutResponse>} A promise that resolves to stream information. If a specific `streamId` is provided, it resolves to a single stream's information (SingleStreamLayoutResponse), otherwise, it resolves to multiple streams' information (MultiStreamLayoutResponse).
     *
     * @example
     * ```ts
     * const streamInfo = await videoClient.getStreamInfo(SESSION_ID);
     *
     * if (streamInfo.items) {
     *   streamInfo.items.forEach((item) => {
     *     console.log(item.id);
     *   });
     * } else {
     *  console.log(streamInfo.id);
     * }
     * ```
     */ async getStreamInfo(sessionId, streamId) {
        let url = `${this.config.videoHost}/v2/project/${this.auth.applicationId}/session/${sessionId}/stream`;
        if (streamId) {
            url = url + `/${streamId}`;
        }
        let resp;
        if (streamId) {
            resp = await this.sendGetRequest(url);
        } else {
            resp = await this.sendGetRequest(url);
        }
        return resp.data;
    }
    stripBlankValues(obj) {
        for(const key in obj){
            if (typeof obj[key] === 'object' && obj[key] !== null) {
                this.stripBlankValues(obj[key]);
            } else if (obj[key] === '') {
                delete obj[key];
            }
        }
        return obj;
    }
    /**
     * Initiates a SIP call within a session.
     *
     * @param {string} sessionId - The ID of the session in which to initiate the SIP call.
     * @param {SIPCallOptions} options - The options for initiating the SIP call.
     * @return {Promise<SIPCallResponse>} A promise that resolves to the SIP call response, including the call ID and other details.
     *
     * @example
     * Start a SIP call with default options
     * ```ts
     * const sipCall = await videoClient.intiateSIPCall(SESSION_ID);
     * console.log(sipCall.id);
     * ```
     *
     * @example
     * Start a SIP call with custom options
     * ```ts
     * const sipCall = await videoClient.intiateSIPCall(
     *   SESSION_ID,
     *   {
     *     uri: 'sip://example.com',
     *   }
     * );
     * console.log(sipCall.id);
     * ```
     */ async intiateSIPCall(sessionId, options) {
        let data = Object.assign({}, {
            sessionId
        }, options);
        const url = `${this.config.videoHost}/v2/project/${this.auth.applicationId}/dial`;
        // Fixes a bug found during integration
        // where blank values are treated differently than null values
        data = this.stripBlankValues(data);
        const resp = await this.sendPostRequest(url, data);
        return resp.data;
    }
    /**
     * Lists Experience Composer renders based on the specified filter criteria.
     *
     * @param {ExperienceComposerListFilter} filter - An optional filter to apply when listing Experience Composer renders.
     * @return {Promise<MultiExperienceComposerResponse>} A promise that resolves to a list of Experience Composer renders matching the filter criteria.
     *
     * @example
     * ```ts
     * const renders = await videoClient.listExperienceComposerRenders();
     * for (const render of renders.items) {
     *   console.log(render.id);
     * }
     * ```
     */ async listExperienceComposerRenders(filter) {
        const resp = await this.sendGetRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/render`, filter);
        return resp.data;
    }
    /**
     * Mutes or unmutes all streams in a session, optionally excluding specific stream IDs from muting.
     *
     * @param {string} sessionId - The ID of the session in which to mute or unmute streams.
     * @param {boolean} active - `true` to mute all streams, `false` to unmute all streams.
     * @param {string[]} excludedStreamIds - An optional array of stream IDs to exclude from muting/unmuting.
     * @return {Promise<ProjectDetailsResponse>} A promise that resolves to the updated session details.
     *
     * @example
     * ```ts
     * const forceMute = await videoClient.muteAll(SESSION_ID);
     * console.log(forceMute.status);
     * ```
     */ async muteAllStreams(sessionId, active, excludedStreamIds = []) {
        const resp = await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/session/${sessionId}/mute`, {
            active,
            excludedStreamIds
        });
        return resp.data;
    }
    /**
     * Mutes or unmutes a specific stream in a session.
     *
     * @param {string} sessionId - The ID of the session containing the stream.
     * @param {string} streamId - The ID of the stream to mute or unmute.
     * @return {Promise<ProjectDetailsResponse>} A promise that resolves to the updated session details.
     *
     * @example
     * ```ts
     * const forceMute = await videoClient.muteStream(SESSION_ID, STREAM_ID);
     * console.log(forceMute.status);
     * ```
     */ async muteStream(sessionId, streamId) {
        const resp = await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/session/${sessionId}/stream/${streamId}/mute`);
        return resp.data;
    }
    /**
     * Sends DTMF (Dual-Tone Multi-Frequency) tones to a specific session or connection.
     *
     * @param {string} sessionId - The ID of the session to send DTMF tones to.
     * @param {string} digits - The DTMF tones to play.
     * @param {string} [connectionId] - Optional. The ID of the connection within the session to send DTMF tones to.
     * @return {Promise<void>} A promise that resolves when the DTMF tones have been played.
     *
     * @example
     * ```ts
     * await videoClient.playDTMF(SESSION_ID, '1234');
     * ```
     */ async playDTMF(sessionId, digits, connectionId) {
        let url = `${this.config.videoHost}/v2/project/${this.auth.applicationId}/session/${sessionId}/play-dtmf`;
        if (connectionId) {
            url = `${this.config.videoHost}/v2/project/${this.auth.applicationId}/session/${sessionId}/connection/${connectionId}/play-dtmf`;
        }
        await this.sendPostRequest(url, {
            digits
        });
    }
    /**
     * Removes a stream from an archive.
     *
     * @param {string} archiveId - The ID of the archive from which to remove the stream.
     * @param {string} streamId - The ID of the stream to remove from the archive.
     * @return {Promise<void>} A promise that resolves when the stream has been successfully removed from the archive.
     *
     * @example
     * ```ts
     * await videoClient.removeArchiveStream(ARCHIVE_ID, STREAM_ID);
     * ```
     */ async removeArchiveStream(archiveId, streamId) {
        await this.sendPatchRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/archive/${archiveId}/streams`, {
            removeStream: streamId
        });
    }
    /**
     * Removes a stream from a broadcast.
     *
     * @param {string} broadcastId - The ID of the broadcast from which to remove the stream.
     * @param {string} streamId - The ID of the stream to remove from the broadcast.
     * @return {Promise<void>} A promise that resolves when the stream has been successfully removed from the broadcast.
     *
     * @example
     * ```ts
     * await videoClient.removeStreamFromBroadcast(BROADCAST_ID, STREAM_ID);
     * ```
     */ async removeStreamFromBroadcast(broadcastId, streamId) {
        await this.updateBroadcast({
            broadcastId,
            removeStream: streamId
        });
    }
    /**
     * Searches for archives based on the specified filter criteria.
     *
     * @param {ArchiveSearchFilter} [filter] - Optional filter criteria to narrow down the search.
     * @return {Promise<MultiArchiveResponse>} A promise that resolves with the search results, including multiple archive items.
     *
     * @example
     * ```ts
     * const archives = await videoClient.searchArchives();
     * for (const archive of archives.items) {
     *   console.log(archive.id);
     * }
     * ```
     * @example
     * Search for archives for a session
     * ```ts
     * const archives = await videoClient.searchArchives({
     *   sessionId: SESSION_ID,
     * });
     *
     * for (const archive of archives.items) {
     *   console.log(archive.id);
     * }
     * ```
     */ async searchArchives(filter) {
        const resp = await this.sendGetRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/archive`, filter);
        return resp.data;
    }
    /**
     * Searches for broadcasts based on the specified filter criteria.
     *
     * @param {BroadcastSearchFilter} [filter] - Optional filter criteria to narrow down the search.
     * @return {Promise<MultiBroadcastResponse>} A promise that resolves with the search results, including multiple broadcast items.
     *
     * @example
     * ```ts
     * const broadcasts = await videoClient.searchBroadcasts();
     * for (const broadcast of broadcasts.items) {
     *    console.log(broadcast.id);
     * }
     * ```
     *
     * @example
     * Get braodcasts for a session
     * ```ts
     * const broadcasts = await videoClient.searchBroadcasts({
     *   sessionId: SESSION_ID,
     * })
     * for (const broadcast of broadcasts.items) {
     *   console.log(broadcast.id);
     *  }
     *  ```
     */ async searchBroadcasts(filter) {
        const resp = await this.sendGetRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/broadcast/`, filter);
        return resp.data;
    }
    /**
     * Sends a signal to a session or a specific connection within a session.
     *
     * @param {Signal} signal - The signal to send, including a type and data.
     * @param {string} sessionId - The ID of the session to which the signal will be sent.
     * @param {string} [connectionId] - Optional. The ID of the connection within the session to which the signal will be sent. If not provided, the signal will be sent to the entire session.
     * @return {Promise<void>} A promise that resolves when the signal is successfully sent.
     *
     * @example
     * await videoClient.sendSignal(
     *   {
     *     type: 'text',
     *     data: 'Hello world!',
     *   },
     *   SESSION_ID,
     * );
     * ```
     */ async sendSignal(signal, sessionId, connectionId) {
        let url = `${this.config.videoHost}/v2/project/${this.auth.applicationId}/session/${sessionId}/signal`;
        if (connectionId) {
            url = `${this.config.videoHost}/v2/project/${this.auth.applicationId}/session/${sessionId}/connection/${connectionId}/signal`;
        }
        await this.sendPostRequest(url, signal);
    }
    /**
     * Sets the stream class lists for one or more streams within a session.
     *
     * @param {string} sessionId - The ID of the session for which stream class lists will be set.
     * @param {StreamClassList[]} settings - An array of objects specifying the stream ID and corresponding class lists to be set.
     * @return {Promise<void>} A promise that resolves when the stream class lists are successfully set.
     *
     * @example
     *
     * ```ts
     * await videoClient.setStreamClassLists(
     *   SESSION_ID,
     *   [
     *     {
     *       id: STREAM_ID,
     *       layoutClassList: ['full'],
     *     }
     *   ]
     * )
     * ```
     */ async setStreamClassLists(sessionId, settings) {
        await this.sendPutRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/session/${sessionId}/stream`, {
            items: settings
        });
    }
    /**
     * Starts an archive for a given session with optional configuration.
     *
     * @param {string} sessionId - The ID of the session to archive.
     * @param {ArchiveOptions} [options] - Optional configuration for the archive, such as audio/video settings, layout, and more.
     * @return {Promise<SingleArchiveResponse>} A promise that resolves with information about the started archive.
     *
     * @example
     * ```ts
     * const archive = await videoClient.startArchive(SESSION_ID);
     * console.log(archive.id);
     * ```
     */ async startArchive(sessionId, options) {
        const data = Object.assign({}, {
            sessionId
        }, options);
        const resp = await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/archive`, data);
        return resp.data;
    }
    /**
     * Starts a broadcast for a given session with the specified configuration.
     *
     * @param {string} sessionId - The ID of the session to start broadcasting.
     * @param {BroadcastConfig} config - Configuration for the broadcast, including stream settings, layout, and more.
     * @return {Promise<BroadcastDetailsResponse>} A promise that resolves with information about the started broadcast.
     *
     * @example
     * ```ts
     * const broadcast = await videoClient.startBroadcast(
     *   SESSION_ID,
     *   {
     *     outputs: {
     *       hls: {
     *         lowLatency: true,
     *       }
     *       rtmp: [{
     *         serverUrl: 'rtmp://example.com',
     *       }],
     *     }
     *   }
     * );
     * ```
     */ async startBroadcast(sessionId, config) {
        const data = Object.assign({}, {
            sessionId
        }, config);
        const resp = await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/broadcast/`, data);
        return resp.data;
    }
    /**
     * Starts rendering an experience composer with the provided configuration.
     *
     * @param {string} sessionId - The ID of the session associated with the experience composer.
     * @param {string} token - The client token for authentication.
     * @param {ExperienceComposerOptions} config - Configuration options for the experience composer rendering.
     * @return {Promise<ExperienceComposerResponse>} A promise that resolves with information about the started experience composer rendering.
     *
     * @example
     * ```ts
     *
     * const render = await videoClient.startExperienceComposerRender(
     *   SESSION_ID,
     *   token,
     * )
     *
     * console.log(render.id);
     * ```
     */ async startExperienceComposerRender(sessionId, token, config) {
        const data = Object.assign({}, {
            sessionId,
            token
        }, config);
        const resp = await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/render`, data);
        return resp.data;
    }
    /**
     * Stops an archive with the given archive ID.
     *
     * @param {string} archiveId - The ID of the archive to stop.
     * @return {Promise<SingleArchiveResponse>} A promise that resolves with information about the stopped archive.
     *
     * @example
     * ```ts
     * const archive = await videoClient.stopArchive(ARCHIVE_ID);
     *
     * console.log(archive.status);
     * ```
     */ async stopArchive(archiveId) {
        const resp = await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/archive/${archiveId}/stop`);
        return resp.data;
    }
    /**
     * Stops a broadcast with the given broadcast ID.
     *
     * @param {string} broadcastId - The ID of the broadcast to stop.
     * @return {Promise<BroadcastDetailsResponse>} A promise that resolves with information about the stopped broadcast.
     *
     * @example
     * ```ts
     * const broadcast = await videoClient.stopBroadcast(BROADCAST_ID);
     * console.log(broadcast.status);
     * ```
     */ async stopBroadcast(broadcastId) {
        const resp = await this.sendPostRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/broadcast/${broadcastId}/stop`);
        return resp.data;
    }
    /**
     * Stops an Experience Composer render with the given render ID.
     *
     * @param {string} renderId - The ID of the Experience Composer render to stop.
     * @return {Promise<void>} A promise that resolves when the render is successfully stopped.
     *
     * @example
     * ```ts
     * await videoClient.stopExperienceComposerRender(RENDER_ID);
     * ```
     */ async stopExperienceComposerRender(renderId) {
        await this.sendDeleteRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/render/${renderId}`);
    }
    /**
     * Updates the layout of an archive with the given archive ID.
     *
     * @param {string} archiveId - The ID of the archive to update the layout for.
     * @param {ArchiveLayout} layout - The new layout configuration to set for the archive.
     * @return {Promise<void>} A promise that resolves when the layout is successfully updated.
     *
     * @example
     * ```ts
     * await videoClient.updateArchiveLayout(
     * ```
     */ async updateArchiveLayout(archiveId, layout) {
        await this.sendPutRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/archive/${archiveId}/layout`, layout);
    }
    /**
     * Updates the configuration of a broadcast with the given broadcast ID.
     *
     * @param {BroadcastUpdateConfig} config - The configuration options to update the broadcast.
     * @return {Promise<void>} A promise that resolves when the broadcast is successfully updated.
     *
     * @example
     * ```ts
     *
     * await videoClient.updateBroadcast({
     *   broadcastId: BROADCAST_ID,
     *   hasAudio: true,
     * })
     * ```
     */ async updateBroadcast(config) {
        await this.sendPatchRequest(`${this.config.videoHost}/v2/project/${this.auth.applicationId}/broadcast/${config.broadcastId}/streams`, config);
    }
}
exports.Video = Video; //# sourceMappingURL=video.js.map
}}),
"[project]/node_modules/@vonage/video/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/parameters/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/video.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/conversations.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Conversations = void 0;
const server_client_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-client/dist/lib/index.js [app-rsc] (ecmascript)");
const apiToConversation = (response)=>{
    const customData = response.properties?.custom_data;
    delete response._links;
    const conversation = server_client_1.Client.transformers.camelCaseObjectKeys(response, true);
    if (conversation?.properties?.customData && customData) {
        conversation.properties.customData = customData;
    }
    return conversation;
};
const conversationToApi = (conversation)=>{
    const customData = conversation.properties?.customData;
    const apiConversation = server_client_1.Client.transformers.snakeCaseObjectKeys(server_client_1.Client.transformers.omit([
        'id',
        'sequenceNumber',
        'timestamp',
        'state'
    ], conversation), true);
    if (apiConversation?.properties?.custom_data && customData) {
        apiConversation.properties.custom_data = customData;
    }
    if (conversation?.callback?.params?.applicationId && apiConversation?.callback?.params) {
        apiConversation.callback.params = {
            applicationId: conversation.callback.params.applicationId,
            ncco_url: conversation.callback.params.nccoUrl
        };
    }
    return apiConversation;
};
const apiToSession = (response)=>{
    return {
        id: response.id,
        user: {
            id: response._embedded.user.id,
            name: response._embedded.user.name
        },
        apiKey: response._embedded.api_key,
        properties: {
            ttl: response.properties.ttl
        }
    };
};
const apiToEvent = (response)=>{
    return {
        ...server_client_1.Client.transformers.camelCaseObjectKeys(server_client_1.Client.transformers.omit([
            '_embedded',
            '_links'
        ], response), true),
        fromMember: {
            ...server_client_1.Client.transformers.camelCaseObjectKeys(response._embedded?.from_member, true)
        },
        fromUser: {
            ...server_client_1.Client.transformers.camelCaseObjectKeys(response._embedded?.from_user, true)
        }
    };
};
const apiToMember = (response)=>{
    return {
        ...server_client_1.Client.transformers.camelCaseObjectKeys(server_client_1.Client.transformers.omit([
            '_embedded',
            '_links'
        ], response), true),
        user: {
            ...server_client_1.Client.transformers.camelCaseObjectKeys(server_client_1.Client.transformers.omit([
                '_links'
            ], response._embedded?.user), true)
        }
    };
};
const memberToApi = (member)=>({
        ...server_client_1.Client.transformers.snakeCaseObjectKeys(server_client_1.Client.transformers.omit([
            'id',
            'timestamp',
            'conversationId',
            'initiator',
            'invitedBy'
        ], member), true),
        user: {
            id: member.user.id,
            name: member.user.name
        },
        member_id_inviting: member.invitedBy
    });
/**
 * A client for talking to the Vonage Conversation API.
 *
 * @example
 * Create a standalone Conversation client
 *
 * ```ts
 * import { Conversations } from '@vonage/conversation';
 *
 * const conversationClient = new Conversations({
 *   applicationId: VONAGE_APPLICATION_ID,
 *   privateKey: VONAGE_APPLICATION_PRIVATE_KEY_PATH,
 * });
 * ```
 *
 * @example
 * Create an Conversation client from the Vonage client
 *
 * ```ts
 * import { Vonage } from '@vonage/server-client';
 *
 * const vonage = new Vonage({
 *   applicationId: VONAGE_APPLICATION_ID,
 *   privateKey: VONAGE_APPLICATION_PRIVATE_KEY_PATH,
 * });
 *
 * const conversationClient = vonage.conversations
 * ```
 */ class Conversations extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.JWT;
    /**
     * Retrieves all conversations, iterating over paginated results.
     *
     * @param {ListConversationParams} [params={}] - Optional filter parameters.
     * @yields {Conversation} - Yields conversation items.
     * @return {AsyncGenerator<Conversation, void, undefined>} - An asynchronous generator.
     *
     * @example
     * List conversations with pagination using an iterator
     *
     * ```ts
     * for await (const conversation of conversationClient.listAllConversations()) {
     *   console.log(conversation.name);
     * }
     * ```
     */ async *listAllConversations(params = {}) {
        let next = null;
        do {
            const resp = await this.getConversationPage(params);
            yield* resp.conversations || [];
            next = resp.links?.next ? new URL(resp.links?.next?.href).searchParams.get('cursor') : null;
            params.cursor = next || '';
        }while (next)
    }
    /**
     * Retrieves a page of conversations based on filter parameters.
     *
     * @param {ListConversationParams} filter - The filter parameters for pagination.
     * @return {Promise<ConversationPageList>} - A promise resolving to a page of conversations.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#listConversation}
     *
     * @example
     * Get a single page of conversations
     *
     * ```ts
     * const conversations = await conversationClient.getConversationPage({
     *   page: 1,
     *   size: 10
     * });
     *
     * conversations.conversations.forEach(conversation => {
     *   console.log(conversation.name);
     * });
     * ```
     */ async getConversationPage(filter) {
        const url = filter?.byUser ? `${this.config.apiHost}/v1/users/${filter.byUser}/conversations` : `${this.config.apiHost}/v1/conversations`;
        const resp = await this.sendGetRequest(url, server_client_1.Client.transformers.omit([
            'by_user'
        ], server_client_1.Client.transformers.snakeCaseObjectKeys(filter)));
        return {
            conversations: (resp.data._embedded?.conversations || []).map(apiToConversation),
            pageSize: resp.data.page_size,
            links: resp.data._links
        };
    }
    /**
     * Creates a new conversation with the provided details.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#createConversation}
     *
     * @param {Conversation} conversation - The conversation details to be created.
     * @return {Promise<Conversation>} - A promise resolving to the created conversation.
     *
     * @example
     * Create a new conversation
     *
     * ```ts
     * const conversation = await conversationClient.createConversation({
     *   name: 'My Conversation',
     * });
     *
     * console.log(conversation.id);
     * ```
     */ async createConversation(conversation) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v1/conversations`, conversationToApi(conversation));
        return apiToConversation(resp.data);
    }
    /**
     * Retrieves an conversation by its unique identifier.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#getConversation}
     *
     * @param {string} conversationId - The unique identifier of the conversation to retrieve.
     * @return {Promise<Conversation>} - A promise resolving to the retrieved conversation.
     *
     * @example
     * Retrieve an conversation
     *
     * ```ts
     * const conversation = await conversationClient.getConversation(conversation_ID);
     * console.log(conversation.name);
     * ```
     */ async getConversation(conversationId) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/conversations/${conversationId}`);
        return apiToConversation(resp.data);
    }
    /**
     * Updates an existing conversation with the provided details.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#updateConversation}
     *
     * @param {Conversation} conversation - The conversation details to be updated.
     * @return {Promise<Conversation>} - A promise resolving to the updated conversation.
     *
     * @example
     * Update an conversation
     *
     * ```ts
     * const conversation = await conversationClient.updateConversation({
     *   id: conversation_ID,
     *   name: 'My Conversation',
     * });
     * console.log(conversation.name);
     * ```
     */ async updateConversation(conversation) {
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/conversations/${conversation.id}`, conversationToApi(conversation));
        return apiToConversation(resp.data);
    }
    /**
     * Deletes an conversation by its unique identifier.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#deleteConversation}
     *
     * @param {string} conversationId - The unique identifier of the conversation to delete.
     * @return {Promise<void>} - A promise indicating the successful deletion of the conversation.
     *
     * @example
     * Delete an conversation
     *
     * ```ts
     * await conversationClient.deleteConversation(conversation_ID);
     * ```
     */ async deleteConversation(conversationId) {
        await this.sendDeleteRequest(`${this.config.apiHost}/v1/conversations/${conversationId}`);
    }
    /**
     * Retrieves all conversations, for a user
     *
     * @param {string} userId - The user id to retrieve conversations from.
     * @param {ListConversationParams} [params={}] - Optional filter parameters.
     * @yields {Conversation} - Yields conversation items.
     * @return {AsyncGenerator<Conversation, void, undefined>} - An asynchronous generator.
     *
     * @example
     * List conversations with pagination using an iterator
     *
     * ```ts
     * for await (const conversation of conversationClient.listAllUserConversations(USER_ID)) {
     *   console.log(conversation.name);
     * }
     * ```
     */ async *listAllUserConversations(userId, params = {}) {
        let next = null;
        do {
            const resp = await this.getConversationPage({
                ...params,
                byUser: userId
            });
            yield* resp.conversations || [];
            next = resp.links?.next ? new URL(resp.links?.next?.href).searchParams.get('cursor') : null;
            params.cursor = next || '';
        }while (next)
    }
    /**
     * Retrieves all session, for a user
     *
     * @param {string} userId - The user id to retrieve sessions from.
     * @param {ListSessionParams} [params={}] - Optional filter parameters.
     * @yields {Session} - Yields session items.
     * @return {AsyncGenerator<Session, void, undefined>} - An asynchronous generator.
     *
     * @example
     * List sessions with pagination using an iterator
     *
     * ```ts
     * for await (const session of conversationClient.listAllUserSessions(USER_ID)) {
     *   console.log(session.id);
     * }
     * ```
     */ async *listAllUserSessions(userId, params = {}) {
        let next = null;
        do {
            const resp = await this.getUserSessionsPage(userId, params);
            yield* resp.sessions || [];
            next = resp.links?.next ? new URL(resp.links?.next?.href).searchParams.get('cursor') : null;
            params.cursor = next || '';
        }while (next)
    }
    /**
     * Retrieves a page of sessions based on filter parameters.
     *
     * @param {string} userId - The user id to retrieve sessions from.
     * @param {ListSessionParams} filter - The filter parameters for pagination.
     * @return {Promise<SessionPageResponse>} - A promise resolving to a page of sessions.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/session#listSession}
     *
     * @example
     * Get a single page of sessions
     *
     * ```ts
     * const sessions = await conversationClient.getUserSessionPage(
     *   USER_ID,
     *   {
     *     page: 1,
     *     size: 10
     *   }
     * );
     *
     * sessions.sessions.forEach(session => {
     *   console.log(session.id);
     * });
     * ```
     */ async getUserSessionsPage(userId, filter) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/users/${userId}/sessions`, server_client_1.Client.transformers.snakeCaseObjectKeys(filter));
        return {
            sessions: (resp.data._embedded?.sessions || []).map(apiToSession),
            pageSize: resp.data.page_size,
            links: resp.data._links
        };
    }
    /**
     * Retrieves all members, iterating over paginated results.
     *
     * @param {string} conversationId - The conversation id to retrieve members from.
     * @param {ListMemberParams} [params={}] - Optional filter parameters.
     * @yields {Member} - Yields member items.
     * @return {AsyncGenerator<Member, void, undefined>} - An asynchronous generator.
     *
     * @example
     * List members with pagination using an iterator
     *
     * ```ts
     * for await (const member of memberClient.listAllMembers(CONVERSATION_ID)) {
     *   console.log(member.name);
     * }
     * ```
     */ async *listAllMembers(conversationId, params = {}) {
        let next = null;
        do {
            const resp = await this.getMemberPage(conversationId, params);
            yield* resp.members || [];
            next = resp.links?.next ? new URL(resp.links?.next?.href).searchParams.get('cursor') : null;
            params.cursor = next || '';
        }while (next)
    }
    /**
     * Retrieves a page of members in a conversation based on filter parameters.
     *
     * @param {string} conversationId - The conversation id to retrieve members from.
     * @param {ListMemberParams} filter - The filter parameters for pagination.
     * @return {Promise<MemberPageList>} - A promise resolving to a page of members.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#listMember}
     *
     * @example
     * Get a single page of members
     *
     * ```ts
     * const members = await memberClient.getMemberPage(
     *   CONVERSATION_ID,
     *   {
     *     page: 1,
     *     size: 10
     *   }
     * );
     *
     * members.members.forEach(member => {
     *   console.log(member.name);
     * });
     * ```
     */ async getMemberPage(conversationId, filter = {}) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/conversations/${conversationId}/members`, server_client_1.Client.transformers.snakeCaseObjectKeys(filter));
        return {
            members: (resp.data._embedded?.members || []).map(apiToMember),
            pageSize: resp.data.page_size,
            links: resp.data._links
        };
    }
    /**
     * Creates a new member with the provided details.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#createMember}
     *
     * @param {string} conversationId - The conversation id to create the member in.
     * @param {Member} member - The member details to be created.
     * @return {Promise<Member>} - A promise resolving to the created member.
     *
     * @example
     * Create a new member
     *
     * ```ts
     * const member = await memberClient.createMember(
     *   CONVERSATION_ID,
     *   {
     *     name: 'My Member',
     *   },
     * );
     *
     * console.log(member.id);
     * ```
     */ async createMember(conversationId, member) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v1/conversations/${conversationId}/members`, memberToApi(member));
        return apiToMember(resp.data);
    }
    /**
     * Retrieves an member by its unique identifier.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#getMember}
     *
     * @param {string} conversationId - The conversation id to retrieve the member from.
     * @param {string} memberId - The unique identifier of the member to retrieve.
     * @return {Promise<Member>} - A promise resolving to the retrieved member.
     *
     * @example
     * Retrieve an member
     *
     * ```ts
     * const member = await memberClient.getMember(CONVERSATION_ID, MEMBER_ID);
     * console.log(member.name);
     * ```
     */ async getMember(conversationId, memberId) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/conversations/${conversationId}/members/${memberId}`);
        return apiToMember(resp.data);
    }
    /**
     * This retrieves the member associated with the sub claim on the JWT
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#getMe}
     *
     * @param {string} conversationId - The conversation id to retrieve the member from.
     * @return {Promise<Member>} - A promise resolving to the retrieved member.
     *
     * @example
     * Retrieve an member
     *
     * ```ts
     * const member = await memberClient.getMe(CONVERSATION_ID);
     * console.log(member.name);
     * ```
     */ async getMe(conversationId) {
        return this.getMember(conversationId, 'me');
    }
    /**
     * Updates an existing member with the provided details.
     *
     * Setting the state to left will result in the member leaving the conversation.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#updateMember}
     *
     * @param {string} conversationId - The conversation id to update the member in.
     * @param {string} memberId - The member details to be updated.
     * @param {UpdateMemberParameters} params - The update parameters.
     * @return {Promise<Member>} - A promise resolving to the updated member.
     *
     * @example
     * ```ts
     * import { MemberState } from '@vonage/conversation';
     *
     * const member = await memberClient.updateMember(
     *   CONVERSATION_ID,
     *   MEMBER_ID,
     *   {
     *     state: MemberState.LEFT,
     *     from: USER_ID,
     *   },
     * );
     *
     * console.log(member.name);
     * ```
     */ async updateMember(conversationId, memberId, params) {
        const resp = await this.sendPatchRequest(`${this.config.apiHost}/v1/conversations/${conversationId}/members/${memberId}`, params);
        return apiToMember(resp.data);
    }
    /**
     * Retrieves all events, iterating over paginated results.
     *
     * @param {string} conversationId - The conversation id to retrieve events from.
     * @param {ListEventParams} [params={}] - Optional filter parameters.
     * @yields {Event} - Yields event items.
     * @return {AsyncGenerator<Event, void, undefined>} - An asynchronous generator.
     *
     * @example
     * List events with pagination using an iterator
     *
     * ```ts
     * for await (const event of eventClient.listAllEvents()) {
     *   console.log(event.name);
     * }
     * ```
     */ async *listAllEvents(conversationId, params = {}) {
        let next = null;
        do {
            const resp = await this.getEventPage(conversationId, params);
            yield* resp.events || [];
            next = resp.links?.next ? new URL(resp.links?.next?.href).searchParams.get('cursor') : null;
            params.cursor = next || '';
        }while (next)
    }
    /**
     * Retrieves a page of events based on filter parameters.
     *
     * @param {string} conversationId - The conversation id to retrieve events from.
     * @param {ListEventParams} filter - The filter parameters for pagination.
     * @return {Promise<EventPageList>} - A promise resolving to a page of events.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/event#listEvent}
     *
     * @example
     * Get a single page of events
     *
     * ```ts
     * const events = await eventClient.getEventPage({
     *   page: 1,
     *   size: 10
     * });
     *
     * events.events.forEach(event => {
     *   console.log(event.name);
     * });
     * ```
     */ async getEventPage(conversationId, filter) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/conversations/${conversationId}/events`, server_client_1.Client.transformers.omit([
            'by_user'
        ], server_client_1.Client.transformers.snakeCaseObjectKeys(filter)));
        return {
            pageSize: resp.data.page_size,
            events: (resp.data._embedded || []).map(apiToEvent),
            links: resp.data._links
        };
    }
    /**
     * Retrieves an event by its unique identifier.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/conversation#getEvent}
     *
     * @param {string} conversationId - The conversation id to retrieve the event from.
     * @param {string} eventId - The unique identifier of the event to retrieve.
     * @return {Promise<Event>} - A promise resolving to the retrieved event.
     *
     * @example
     * Retrieve an event
     *
     * ```ts
     * const event = await eventClient.getEvent(CONVERSATION_ID, event_ID);
     * console.log(event.name);
     * ```
     */ async getEvent(conversationId, eventId) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/conversations/${conversationId}/events/${eventId}`);
        return apiToEvent(resp.data);
    }
    /**
     * Creates a new event with the provided details.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/event#createEvent}
     *
     * @param {string} conversationId - The conversation id to create the event in.
     * @param {Event} event - The event details to be created.
     * @return {Promise<Event>} - A promise resolving to the created event.
     *
     * @example
     * Create a new event
     *
     * ```ts
     * const event = await eventClient.createEvent({
     *   name: 'My Event',
     * });
     *
     * console.log(event.id);
     * ```
     */ async createEvent(conversationId, event) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v1/conversations/${conversationId}/events`, {
            type: event.type,
            from: event.from,
            body: server_client_1.Client.transformers.snakeCaseObjectKeys(event.body)
        });
        return apiToEvent(resp.data);
    }
    /**
     * Deletes an event by its unique identifier.
     *
     * @see API Specification {@link https://developer.vonage.com/en/api/event#deleteEvent}
     *
     *
     * @param {string} conversationId - The conversation id to delete the event from.
     * @param {string} eventId - The unique identifier of the conversation to delete.
     * @return {Promise<void>} - A promise indicating the successful deletion of the event.
     *
     * @example
     * Delete an event
     *
     * ```ts
     * await eventClient.deleteEvent(conversation_ID);
     * ```
     */ async deleteEvent(conversationId, eventId) {
        await this.sendDeleteRequest(`${this.config.apiHost}/v1/conversations/${conversationId}/events/${eventId}`);
    }
}
exports.Conversations = Conversations; //# sourceMappingURL=conversations.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/enums/channelType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChannelType = void 0;
/**
 * Enum representing the type of communication channel.
 */ var ChannelType;
(function(ChannelType) {
    /**
     * Represents a phone channel.
     */ ChannelType["PHONE"] = "phone";
    /**
     * Represents a SIP channel.
     */ ChannelType["SIP"] = "sip";
    /**
     * Represents an app channel.
     */ ChannelType["APP"] = "app";
    /**
     * Represents a WebSocket channel.
     */ ChannelType["WEBSOCKET"] = "websocket";
    /**
     * Represents a VBC (Voice Business Cloud) channel.
     */ ChannelType["VBC"] = "vbc";
})(ChannelType || (exports.ChannelType = ChannelType = {})); //# sourceMappingURL=channelType.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/enums/conversationState.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConversationState = void 0;
/**
 * Conversation state
 */ var ConversationState;
(function(ConversationState) {
    /**
     * Conversation is still active
     */ ConversationState["ACTIVE"] = "ACTIVE";
    /**
     * Conversation is inactive
     */ ConversationState["INACTIVE"] = "INACTIVE";
    /**
     * Conversation is deleted
     */ ConversationState["DELETED"] = "DELETED";
})(ConversationState || (exports.ConversationState = ConversationState = {})); //# sourceMappingURL=conversationState.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/enums/eventMessageType.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EventMessageType = void 0;
var EventMessageType;
(function(EventMessageType) {
    EventMessageType["TEXT"] = "text";
    EventMessageType["IMAGE"] = "image";
    EventMessageType["AUDIO"] = "audio";
    EventMessageType["VIDEO"] = "video";
    EventMessageType["FILE"] = "file";
    EventMessageType["TEMPLATE"] = "template";
    EventMessageType["CUSTOM"] = "custom";
    EventMessageType["VCARD"] = "vcard";
    EventMessageType["LOCATION"] = "location";
    EventMessageType["RANDOM"] = "random";
})(EventMessageType || (exports.EventMessageType = EventMessageType = {})); //# sourceMappingURL=eventMessageType.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/enums/eventsTypes.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EventType = void 0;
/**
 * Enum representing various types of events and their descriptions.
 */ var EventType;
(function(EventType) {
    /**
     * Audio: Play audio
     */ EventType["AUDIO_PLAY"] = "audio:play";
    /**
     * Audio: Stop currently playing audio
     */ EventType["AUDIO_PLAY_STOP"] = "audio:play:stop";
    /**
     * Audio: Use TTS to speak the given text
     */ EventType["AUDIO_SAY"] = "audio:say";
    /**
     * Audio: Stop currently playing TTS
     */ EventType["AUDIO_SAY_STOP"] = "audio:say:stop";
    /**
     * Audio: Play DTMF audio
     */ EventType["AUDIO_DTMF"] = "audio:dtmf";
    /**
     * Audio: Record the audio in the conversation
     */ EventType["AUDIO_RECORD"] = "audio:record";
    /**
     * Audio: Stop current recording of audio
     */ EventType["AUDIO_RECORD_STOP"] = "audio:record:stop";
    /**
     * Audio: Mute audio
     */ EventType["AUDIO_MUTE_ON"] = "audio:mute:on";
    /**
     * Audio: Unmute audio
     */ EventType["AUDIO_MUTE_OFF"] = "audio:mute:off";
    /**
     * Audio: Earmuff audio
     */ EventType["AUDIO_EAR_MUFF_ON"] = "audio:earmuff:on";
    /**
     * Audio: Earmuff audio
     */ EventType["AUDIO_EAR_MUFF_OFF"] = "audio:earmuff:off";
    /**
     * Audio: Speaking on
     */ EventType["AUDIO_SPEAKING_ON"] = "audio:speaking:on";
    /**
     * Audio: Speaking on
     */ EventType["AUDIO_SPEAKING_OFF"] = "audio:speaking:off";
    /**
     * Custom: Custom event
     */ EventType["CUSTOM"] = "custom";
    /**
     * Ephemeral: Ephemeral
     */ EventType["EPHEMERAL"] = "ephemeral";
    /**
     * Message: Message (Text, Image, Audio, Video, File, Template, Custom, VCard, Location, Random)
     */ EventType["MESSAGE"] = "message";
    /**
     * Message: Message submitted
     */ EventType["MESSAGE_SUBMITTED"] = "message:submitted";
    /**
     * Message: Message rejected
     */ EventType["MESSAGE_REJECTED"] = "message:rejected";
    /**
     * Message: Message undeliverable
     */ EventType["MESSAGE_UNDELIVERABLE"] = "message:undeliverable";
    /**
     * Message: Message seen
     */ EventType["MESSAGE_SEEN"] = "message:seen";
    /**
     * Message: Message delivered
     */ EventType["MESSAGE_DELIVERED"] = "message:delivered";
})(EventType || (exports.EventType = EventType = {})); //# sourceMappingURL=eventsTypes.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/enums/legStatus.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LegStatus = void 0;
/**
 * The status of a leg
 */ var LegStatus;
(function(LegStatus) {
    /**
     * The leg is started
     */ LegStatus["STARTED"] = "started";
    /**
     * The leg is ringing
     */ LegStatus["RINGING"] = "ringing";
    /**
     * The leg is answered
     */ LegStatus["ANSWERED"] = "answered";
})(LegStatus || (exports.LegStatus = LegStatus = {})); //# sourceMappingURL=legStatus.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/enums/memberState.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MemberState = void 0;
/**
 * Enum representing the state of a member.
 */ var MemberState;
(function(MemberState) {
    /**
     * The member has been invited to join the conversation.
     */ MemberState["INVITED"] = "INVITED";
    /**
     * The member has joined the conversation.
     */ MemberState["JOINED"] = "JOINED";
    /**
     * The member has left the conversation.
     */ MemberState["LEFT"] = "LEFT";
    /**
     * The state of the member is unknown or undefined.
     */ MemberState["UNKNOWN"] = "UNKNOWN";
})(MemberState || (exports.MemberState = MemberState = {})); //# sourceMappingURL=memberState.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/enums/reasonMessages.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReasonCode = void 0;
/**
 * Enum representing various reasons
 */ var ReasonCode;
(function(ReasonCode) {
    /**
     * General failure.
     */ ReasonCode["FAILED"] = "failed";
    /**
     * The recipient is currently busy.
     */ ReasonCode["BUSY"] = "busy";
    /**
     * Operation timed out.
     */ ReasonCode["TIMEOUT"] = "timeout";
    /**
     * The request was cancelled.
     */ ReasonCode["CANCELLED"] = "cancelled";
    /**
     * The request was rejected.
     */ ReasonCode["REJECTED"] = "rejected";
    /**
     * Operation was successful.
     */ ReasonCode["OK"] = "ok";
    /**
     * Resource not found.
     */ ReasonCode["NOT_FOUND"] = "not_found";
    /**
     * Request terminated.
     */ ReasonCode["REQUEST_TERMINATED"] = "request_terminated";
    /**
     * Bad extension.
     */ ReasonCode["BAD_EXTENSION"] = "bad_extension";
    /**
     * Recipient is busy here.
     */ ReasonCode["BUSY_HERE"] = "busy_here";
    /**
     * Request timeout.
     */ ReasonCode["REQUEST_TIMEOUT"] = "request_timeout";
    /**
     * Temporarily unavailable.
     */ ReasonCode["TEMPORARILY_UNAVAILABLE"] = "temporarily_unavailable";
    /**
     * Forbidden access.
     */ ReasonCode["FORBIDDEN"] = "forbidden";
    /**
     * Resource has gone away.
     */ ReasonCode["GONE"] = "gone";
    /**
     * Bad gateway.
     */ ReasonCode["BAD_GATEWAY"] = "bad_gateway";
    /**
     * Address incomplete.
     */ ReasonCode["ADDRESS_INCOMPLETE"] = "address_incomplete";
    /**
     * Internal server error.
     */ ReasonCode["SERVER_INTERNAL_ERROR"] = "server_internal_error";
    /**
     * Not implemented.
     */ ReasonCode["NOT_IMPLEMENTED"] = "not_implemented";
    /**
     * Server timeout.
     */ ReasonCode["SERVER_TIMEOUT"] = "server_timeout";
    /**
     * Version not supported.
     */ ReasonCode["VERSION_NOT_SUPPORTED"] = "version_not_supported";
    /**
     * Service is unavailable.
     */ ReasonCode["SERVICE_UNAVAILABLE"] = "service_unavailable";
    /**
     * Payment is required.
     */ ReasonCode["PAYMENT_REQUIRED"] = "payment_required";
    /**
     * Call ended due to being banned.
     */ ReasonCode["BANNED_CALL_ENDED"] = "banned_call_ended";
    /**
     * Flow execution failed.
     */ ReasonCode["FLOW_FAILED"] = "flow_failed";
})(ReasonCode || (exports.ReasonCode = ReasonCode = {}));
; //# sourceMappingURL=reasonMessages.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/enums/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/enums/channelType.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/enums/conversationState.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/enums/eventMessageType.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/enums/eventsTypes.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/enums/legStatus.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/enums/memberState.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/enums/reasonMessages.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/anyChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=anyChannel.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/anyMessageBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=anyMessageBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/appChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=appChannel.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/audioSettings.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=audioSettings.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/conversation.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=conversation.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/conversationCallback.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=conversationCallback.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/conversationPage.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=conversationPage.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/event.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=event.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/eventUser.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=eventUser.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/eventPage.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=eventPage.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/member.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=member.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/memberPage.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=memberPage.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageASRBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageASRBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageAudioBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageAudioBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageChannelBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageChannelBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageConversationBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageConversationBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageCustomBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageCustomBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageEventBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageEventBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageFileBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageFileBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageImageBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageImageBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageLegBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageLegBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageLocationBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageLocationBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageMemberBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageMemberBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messagePlayDTMFBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messagePlayDTMFBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageRTCAnswerBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageRTCAnswerBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageRTCIdBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageRTCIdBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageRandomBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageRandomBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageRecordBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageRecordBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageRecordIdBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageRecordIdBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageSIPBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageSIPBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageSIPDirectionBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageSIPDirectionBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageSIPHangupBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageSIPHangupBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageSIPMachineBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageSIPMachineBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageSIPStatusBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageSIPStatusBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageSayBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageSayBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageSayIdBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageSayIdBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageStatusBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageStatusBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageTemplateBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageTemplateBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageTextBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageTextBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageVCardBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageVCardBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/messageVideoBody.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=messageVideoBody.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/listConversationsParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=listConversationsParameters.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/listEventParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=listEventParameters.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/listMemberParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=listMemberParameters.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/listSessionParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=listSessionParameters.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/updateMemberParameters.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=updateMemberParameters.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/listConversationsParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/listEventParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/listMemberParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/listSessionParameters.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/updateMemberParameters.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/phoneNumberChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=phoneNumberChannel.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/requests/conversationCallbackRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=conversationCallbackRequest.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/requests/createConversationRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=createConversationRequest.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/requests/createEventRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=createEventRequest.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/requests/createMemberRequest.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=createMemberRequest.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/requests/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/requests/conversationCallbackRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/requests/createConversationRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/requests/createEventRequest.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/requests/createMemberRequest.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/conversationPageResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=conversationPageResponse.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/conversationResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=conversationResponse.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/listMemberResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=listMemberResponse.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/eventResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=eventResponse.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/eventPageResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=eventPageResponse.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/memberPageResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=memberPageResponse.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/memberResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=memberResponse.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/memberUserResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=memberUserResponse.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/sessionPageResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=sessionPageResponse.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/sessionResponse.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=sessionResponse.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/responses/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/conversationPageResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/conversationResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/listMemberResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/eventResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/eventPageResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/memberPageResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/memberResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/memberUserResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/sessionPageResponse.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/sessionResponse.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/session.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=session.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/sessionPage.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=sessionPage.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/sipChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=sipChannel.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/vbcChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=vbcChannel.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/websocketChannel.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=websocketChannel.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/types/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/anyChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/anyMessageBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/appChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/audioSettings.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/conversation.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/conversationCallback.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/conversationPage.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/event.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/eventUser.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/eventPage.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/member.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/memberPage.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageASRBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageAudioBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageChannelBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageConversationBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageCustomBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageEventBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageFileBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageImageBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageLegBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageLocationBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageMemberBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messagePlayDTMFBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageRTCAnswerBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageRTCIdBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageRandomBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageRecordBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageRecordIdBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageSIPBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageSIPDirectionBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageSIPHangupBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageSIPMachineBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageSIPStatusBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageSayBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageSayIdBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageStatusBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageTemplateBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageTextBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageVCardBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/messageVideoBody.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/parameters/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/phoneNumberChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/requests/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/responses/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/session.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/sessionPage.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/sipChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/vbcChannel.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/websocketChannel.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/conversations/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/conversations.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/enums/index.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/types/index.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@vonage/server-sdk/dist/lib/vonage.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Vonage = void 0;
const accounts_1 = __turbopack_context__.r("[project]/node_modules/@vonage/accounts/dist/lib/index.js [app-rsc] (ecmascript)");
const applications_1 = __turbopack_context__.r("[project]/node_modules/@vonage/applications/dist/lib/index.js [app-rsc] (ecmascript)");
const auth_1 = __turbopack_context__.r("[project]/node_modules/@vonage/auth/dist/lib/index.js [app-rsc] (ecmascript)");
const messages_1 = __turbopack_context__.r("[project]/node_modules/@vonage/messages/dist/lib/index.js [app-rsc] (ecmascript)");
const number_insights_1 = __turbopack_context__.r("[project]/node_modules/@vonage/number-insights/dist/lib/index.js [app-rsc] (ecmascript)");
const numbers_1 = __turbopack_context__.r("[project]/node_modules/@vonage/numbers/dist/lib/index.js [app-rsc] (ecmascript)");
const pricing_1 = __turbopack_context__.r("[project]/node_modules/@vonage/pricing/dist/lib/index.js [app-rsc] (ecmascript)");
const redact_1 = __turbopack_context__.r("[project]/node_modules/@vonage/redact/dist/lib/index.js [app-rsc] (ecmascript)");
const sms_1 = __turbopack_context__.r("[project]/node_modules/@vonage/sms/dist/lib/index.js [app-rsc] (ecmascript)");
const users_1 = __turbopack_context__.r("[project]/node_modules/@vonage/users/dist/lib/index.js [app-rsc] (ecmascript)");
const verify_1 = __turbopack_context__.r("[project]/node_modules/@vonage/verify/dist/lib/index.js [app-rsc] (ecmascript)");
const verify2_1 = __turbopack_context__.r("[project]/node_modules/@vonage/verify2/dist/lib/index.js [app-rsc] (ecmascript)");
const voice_1 = __turbopack_context__.r("[project]/node_modules/@vonage/voice/dist/lib/index.js [app-rsc] (ecmascript)");
const video_1 = __turbopack_context__.r("[project]/node_modules/@vonage/video/dist/lib/index.js [app-rsc] (ecmascript)");
const conversations_1 = __turbopack_context__.r("[project]/node_modules/@vonage/conversations/dist/lib/index.js [app-rsc] (ecmascript)");
/**
 * Represents the Vonage SDK for interacting with Vonage APIs.
 */ class Vonage {
    /**
     * The credentials used for authentication.
     */ credentials;
    /**
     * Optional configuration parameters.
     */ options;
    /**
     * Provides access to the Accounts API.
     */ accounts;
    /**
     * Provides access to the Applications API.
     */ applications;
    /**
     * Provides access to the Messages API.
     */ messages;
    /**
     * Provides access to the Number Insights API.
     */ numberInsights;
    /**
     * Provides access to the Numbers API.
     */ numbers;
    /**
     * Provides access to the Pricing API.
     */ pricing;
    /**
     * Provides access to the Redact API.
     */ redact;
    /**
     * Provides access to the Secrets API.
     */ secrets;
    /**
     * Provides access to the SMS API.
     */ sms;
    /**
     * Provides access to the Users API.
     */ users;
    /**
     * Provides access to the Verify V2 API.
     */ verify2;
    /**
     * Provides access to the Verify API.
     */ verify;
    /**
     * Provides access to the Voice API.
     */ voice;
    /**
     * Provides access to the Video API.
     */ video;
    /**
     * Provides access to the Conversations API.
     */ conversations;
    /**
     * The credentials used for authentication.
     * @param {AuthInterface} credentials - The authentication credentials.
     * @param {ConfigParams} [options] - Optional configuration parameters.
     */ constructor(credentials, options){
        if (typeof credentials.getQueryParams === 'undefined') {
            credentials = new auth_1.Auth(credentials);
        }
        this.credentials = credentials;
        this.options = options || {};
        this.accounts = new accounts_1.Accounts(this.credentials, this.options);
        this.applications = new applications_1.Applications(this.credentials, this.options);
        this.messages = new messages_1.Messages(this.credentials, this.options);
        this.numberInsights = new number_insights_1.NumberInsights(this.credentials, this.options);
        this.numbers = new numbers_1.Numbers(this.credentials, this.options);
        this.pricing = new pricing_1.Pricing(this.credentials, this.options);
        this.redact = new redact_1.Redact(this.credentials, this.options);
        this.secrets = new accounts_1.Secrets(this.credentials, this.options);
        this.sms = new sms_1.SMS(this.credentials, this.options);
        this.users = new users_1.Users(this.credentials, this.options);
        this.verify = new verify_1.Verify(this.credentials, this.options);
        this.verify2 = new verify2_1.Verify2(this.credentials, this.options);
        this.voice = new voice_1.Voice(this.credentials, this.options);
        this.video = new video_1.Video(this.credentials, this.options);
        this.conversations = new conversations_1.Conversations(this.credentials, this.options);
    }
}
exports.Vonage = Vonage; //# sourceMappingURL=vonage.js.map
}}),
"[project]/node_modules/@vonage/server-sdk/dist/lib/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Vonage = void 0;
var vonage_1 = __turbopack_context__.r("[project]/node_modules/@vonage/server-sdk/dist/lib/vonage.js [app-rsc] (ecmascript)");
Object.defineProperty(exports, "Vonage", {
    enumerable: true,
    get: function() {
        return vonage_1.Vonage;
    }
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/date-fns/addDays.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "addDays": (()=>addDays),
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$constructFrom$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/date-fns/constructFrom.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$toDate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/date-fns/toDate.js [app-rsc] (ecmascript)");
;
;
function addDays(date, amount, options) {
    const _date = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$toDate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toDate"])(date, options?.in);
    if (isNaN(amount)) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$constructFrom$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constructFrom"])(options?.in || date, NaN);
    // If 0 days, no-op to avoid changing times in the hour before end of DST
    if (!amount) return _date;
    _date.setDate(_date.getDate() + amount);
    return _date;
}
const __TURBOPACK__default__export__ = addDays;
}}),
"[project]/node_modules/date-fns/addMinutes.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "addMinutes": (()=>addMinutes),
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/date-fns/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$toDate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/date-fns/toDate.js [app-rsc] (ecmascript)");
;
;
function addMinutes(date, amount, options) {
    const _date = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$toDate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toDate"])(date, options?.in);
    _date.setTime(_date.getTime() + amount * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["millisecondsInMinute"]);
    return _date;
}
const __TURBOPACK__default__export__ = addMinutes;
}}),
"[project]/node_modules/date-fns/isBefore.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__),
    "isBefore": (()=>isBefore)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$toDate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/date-fns/toDate.js [app-rsc] (ecmascript)");
;
function isBefore(date, dateToCompare) {
    return +(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$toDate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toDate"])(date) < +(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$toDate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toDate"])(dateToCompare);
}
const __TURBOPACK__default__export__ = isBefore;
}}),
"[project]/node_modules/date-fns/endOfDay.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__),
    "endOfDay": (()=>endOfDay)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$toDate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/date-fns/toDate.js [app-rsc] (ecmascript)");
;
function endOfDay(date, options) {
    const _date = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$date$2d$fns$2f$toDate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toDate"])(date, options?.in);
    _date.setHours(23, 59, 59, 999);
    return _date;
}
const __TURBOPACK__default__export__ = endOfDay;
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/arrow-left.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_context__.s({
    "__iconNode": (()=>__iconNode),
    "default": (()=>ArrowLeft)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-rsc] (ecmascript)");
;
const __iconNode = [
    [
        "path",
        {
            d: "m12 19-7-7 7-7",
            key: "1l729n"
        }
    ],
    [
        "path",
        {
            d: "M19 12H5",
            key: "x3x0zl"
        }
    ]
];
const ArrowLeft = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])("arrow-left", __iconNode);
;
 //# sourceMappingURL=arrow-left.js.map
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/arrow-left.js [app-rsc] (ecmascript) <export default as ArrowLeft>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ArrowLeft": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$arrow$2d$left$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$arrow$2d$left$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/icons/arrow-left.js [app-rsc] (ecmascript)");
}}),

};

//# sourceMappingURL=node_modules_80408511._.js.map